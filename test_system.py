#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã
"""

import sys
import json
from pathlib import Path

def test_imports():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–æ–≤ –º–æ–¥—É–ª–µ–π"""
    print("=" * 60)
    print("–¢–ï–°–¢ –ò–ú–ü–û–†–¢–û–í –ú–û–î–£–õ–ï–ô")
    print("=" * 60)

    try:
        from modules.database import Base, engine, SessionLocal
        from modules.database import Farm, Field, Operation, SowingDetail
        from modules.database import FertilizerApplication, PesticideApplication
        from modules.database import HarvestData, AgrochemicalAnalysis
        from modules.database import PhytosanitaryMonitoring, WeatherData
        from modules.validators import DataValidator
        from modules.config import Settings
        print("‚úì –í—Å–µ –º–æ–¥—É–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        return True
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False

def test_database():
    """–¢–µ—Å—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("\n" + "=" * 60)
    print("–¢–ï–°–¢ –ë–ê–ó–´ –î–ê–ù–ù–´–•")
    print("=" * 60)

    try:
        from modules.database import init_db, SessionLocal
        init_db()

        # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        db = SessionLocal()
        db.close()
        print("‚úì –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –∏ –¥–æ—Å—Ç—É–ø–Ω–∞")
        return True
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ –ë–î: {e}")
        return False

def test_reference_data():
    """–¢–µ—Å—Ç —Å–ø—Ä–∞–≤–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    print("\n" + "=" * 60)
    print("–¢–ï–°–¢ –°–ü–†–ê–í–û–ß–ù–´–• –î–ê–ù–ù–´–•")
    print("=" * 60)

    data_files = {
        'crops.json': '–ö—É–ª—å—Ç—É—Ä—ã',
        'fertilizers.json': '–£–¥–æ–±—Ä–µ–Ω–∏—è',
        'pesticides.json': '–ü–µ—Å—Ç–∏—Ü–∏–¥—ã',
        'diseases.json': '–ë–æ–ª–µ–∑–Ω–∏',
        'pests.json': '–í—Ä–µ–¥–∏—Ç–µ–ª–∏',
        'weeds.json': '–°–æ—Ä–Ω—è–∫–∏'
    }

    all_ok = True
    for filename, description in data_files.items():
        try:
            path = Path('data') / filename
            with open(path, 'r', encoding='utf-8') as f:
                data = json.load(f)
                count = len(data)
                print(f"‚úì {description}: {count} –∑–∞–ø–∏—Å–µ–π")
        except Exception as e:
            print(f"‚úó {description}: –û—à–∏–±–∫–∞ - {e}")
            all_ok = False

    return all_ok

def test_pages():
    """–¢–µ—Å—Ç –Ω–∞–ª–∏—á–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü"""
    print("\n" + "=" * 60)
    print("–¢–ï–°–¢ –°–¢–†–ê–ù–ò–¶ –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø")
    print("=" * 60)

    pages = [
        ('0_üè¢_Farm_Setup.py', '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–æ–∑—è–π—Å—Ç–≤–∞'),
        ('1_üè†_Dashboard.py', 'Dashboard'),
        ('2_üå±_Fields.py', '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è–º–∏'),
        ('3_üìù_Journal.py', '–ñ—É—Ä–Ω–∞–ª –æ–ø–µ—Ä–∞—Ü–∏–π'),
        ('4_üåæ_Sowing.py', '–£—á–µ—Ç –ø–æ—Å–µ–≤–∞'),
        ('5_üíä_Fertilizers.py', '–£—á–µ—Ç —É–¥–æ–±—Ä–µ–Ω–∏–π'),
        ('6_üõ°Ô∏è_Pesticides.py', '–£—á–µ—Ç –ø–µ—Å—Ç–∏—Ü–∏–¥–æ–≤'),
        ('7_üêõ_Phytosanitary.py', '–§–∏—Ç–æ—Å–∞–Ω–∏—Ç–∞—Ä–∏—è'),
        ('8_üöú_Harvest.py', '–£—á–µ—Ç —É–±–æ—Ä–∫–∏'),
        ('9_üß™_Agrochemistry.py', '–ê–≥—Ä–æ—Ö–∏–º–∏—è'),
        ('11_üå§Ô∏è_Weather.py', '–ü–æ–≥–æ–¥–∞'),
        ('15_üì•_Import.py', '–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö'),
    ]

    all_ok = True
    for filename, description in pages:
        path = Path('pages') / filename
        if path.exists():
            size_kb = path.stat().st_size / 1024
            print(f"‚úì {description}: {size_kb:.1f} KB")
        else:
            print(f"‚úó {description}: –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            all_ok = False

    return all_ok

def test_utilities():
    """–¢–µ—Å—Ç —É—Ç–∏–ª–∏—Ç"""
    print("\n" + "=" * 60)
    print("–¢–ï–°–¢ –£–¢–ò–õ–ò–¢")
    print("=" * 60)

    utilities = [
        ('modules/config.py', '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è'),
        ('modules/database.py', '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö'),
        ('modules/validators.py', '–í–∞–ª–∏–¥–∞—Ü–∏—è'),
    ]

    all_ok = True
    for filename, description in utilities:
        path = Path(filename)
        if path.exists():
            size_kb = path.stat().st_size / 1024
            print(f"‚úì {description}: {size_kb:.1f} KB")
        else:
            print(f"‚úó {description}: –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            all_ok = False

    return all_ok

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("\n")
    print("‚ïî" + "‚ïê" * 58 + "‚ïó")
    print("‚ïë" + " " * 10 + "–°–ò–°–¢–ï–ú–ê –°–ë–û–†–ê –î–ê–ù–ù–´–• –•–û–ó–Ø–ô–°–¢–í" + " " * 18 + "‚ïë")
    print("‚ïë" + " " * 15 + "–¢–ï–°–¢ –†–ê–ë–û–¢–û–°–ü–û–°–û–ë–ù–û–°–¢–ò" + " " * 21 + "‚ïë")
    print("‚ïö" + "‚ïê" * 58 + "‚ïù")
    print("\n")

    results = []

    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    results.append(("–ò–º–ø–æ—Ä—Ç—ã –º–æ–¥—É–ª–µ–π", test_imports()))
    results.append(("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", test_database()))
    results.append(("–°–ø—Ä–∞–≤–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", test_reference_data()))
    results.append(("–°—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", test_pages()))
    results.append(("–£—Ç–∏–ª–∏—Ç—ã", test_utilities()))

    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 60)
    print("–ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print("=" * 60)

    for test_name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ù–ï –ü–†–û–ô–î–ï–ù"
        print(f"{test_name}: {status}")

    all_passed = all(result for _, result in results)

    print("\n" + "=" * 60)
    if all_passed:
        print("‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∑–∞–ø—É—Å–∫—É:")
        print("\n  streamlit run app.py")
    else:
        print("‚ùå –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–ô–î–ï–ù–´")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ")
    print("=" * 60)
    print()

    return 0 if all_passed else 1

if __name__ == "__main__":
    sys.exit(main())
