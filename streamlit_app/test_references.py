"""
–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –≤—Å–µ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
"""
from utils.reference_loader import (
    load_crops,
    load_fertilizers,
    load_pesticides,
    load_diseases,
    load_pests,
    load_weeds,
    load_tractors,
    load_combines,
    load_implements
)

def test_reference_loading():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤"""

    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤...\n")

    references = {
        "–ö—É–ª—å—Ç—É—Ä—ã": load_crops,
        "–£–¥–æ–±—Ä–µ–Ω–∏—è": load_fertilizers,
        "–°–ó–†": load_pesticides,
        "–ë–æ–ª–µ–∑–Ω–∏": load_diseases,
        "–í—Ä–µ–¥–∏—Ç–µ–ª–∏": load_pests,
        "–°–æ—Ä–Ω—è–∫–∏": load_weeds,
        "–¢—Ä–∞–∫—Ç–æ—Ä—ã": load_tractors,
        "–ö–æ–º–±–∞–π–Ω—ã": load_combines,
        "–û—Ä—É–¥–∏—è": load_implements,
    }

    results = {}

    for name, loader_func in references.items():
        try:
            data = loader_func()
            if data:
                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π/—ç–ª–µ–º–µ–Ω—Ç–æ–≤
                if isinstance(data, dict):
                    count = len(data)
                    # –î–ª—è —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤ —Å –≤–ª–æ–∂–µ–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
                    total_items = sum(len(v) if isinstance(v, dict) else 1 for v in data.values())
                    results[name] = {
                        "status": "‚úÖ OK",
                        "categories": count,
                        "total_items": total_items
                    }
                else:
                    results[name] = {
                        "status": "‚úÖ OK",
                        "categories": "N/A",
                        "total_items": len(data) if hasattr(data, '__len__') else "N/A"
                    }
            else:
                results[name] = {
                    "status": "‚ö†Ô∏è EMPTY",
                    "categories": 0,
                    "total_items": 0
                }
        except Exception as e:
            results[name] = {
                "status": f"‚ùå ERROR: {str(e)}",
                "categories": 0,
                "total_items": 0
            }

    # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print("=" * 70)
    print(f"{'–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫':<20} {'–°—Ç–∞—Ç—É—Å':<20} {'–ö–∞—Ç–µ–≥–æ—Ä–∏–π':<15} {'–í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤':<15}")
    print("=" * 70)

    for name, result in results.items():
        status = result["status"]
        categories = result.get("categories", "-")
        total = result.get("total_items", "-")
        print(f"{name:<20} {status:<20} {categories:<15} {total:<15}")

    print("=" * 70)

    # –ü–æ–¥—Å—á–µ—Ç —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫
    success_count = sum(1 for r in results.values() if "OK" in r["status"])
    total_count = len(results)

    print(f"\n‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {success_count}/{total_count} —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤")

    if success_count == total_count:
        print("üéâ –í—Å–µ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        return True
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å")
        return False


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
    success = test_reference_loading()

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞ –¥–ª—è CI/CD
    import sys
    sys.exit(0 if success else 1)
