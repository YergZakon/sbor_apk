"""
Sowing - –£—á–µ—Ç –ø–æ—Å–µ–≤–∞
–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ—Å–µ–≤–Ω—ã—Ö —Ä–∞–±–æ—Ç —Å –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
"""
import streamlit as st
import pandas as pd
import json
from datetime import datetime, date
from pathlib import Path
from sqlalchemy.orm import Session
from modules.database import SessionLocal, Farm, Field, Operation, SowingDetail, Machinery, Implements
from modules.auth import (
    require_auth,
    require_farm_binding,
    filter_query_by_farm,
    get_user_display_name,
    get_current_user,
    is_admin,
    can_edit_data,
    can_delete_data
)
from modules.validators import validator
from modules.config import settings
from utils.reference_loader import load_crops, load_tractors, load_reference

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(page_title="–ü–æ—Å–µ–≤", page_icon="üåæ", layout="wide")

# –¢—Ä–µ–±—É–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∏ –ø—Ä–∏–≤—è–∑–∫—É –∫ —Ö–æ–∑—è–π—Å—Ç–≤—É
require_auth()
require_farm_binding()

# –ó–∞–≥–æ–ª–æ–≤–æ–∫
st.title("üåæ –£—á–µ—Ç –ø–æ—Å–µ–≤–Ω—ã—Ö —Ä–∞–±–æ—Ç")
st.caption(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: **{get_user_display_name()}**")

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ë–î
db = SessionLocal()

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤ —á–µ—Ä–µ–∑ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∑–∞–≥—Ä—É–∑—á–∏–∫
crops_reference = load_crops()
tractors_ref = load_tractors()
seed_treatments_ref = load_reference('seed_treatments.json', show_error=False)

try:
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ö–æ–∑—è–π—Å—Ç–≤–∞
    user = get_current_user()

    if is_admin():
        farm = db.query(Farm).first()
    else:
        user_farm_id = user.get("farm_id") if user else None
        farm = db.query(Farm).filter(Farm.id == user_farm_id).first() if user_farm_id else None

    if not farm:
        st.error("‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Ö–æ–∑—è–π—Å—Ç–≤–æ!")
        st.stop()

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–µ–π
    fields = filter_query_by_farm(db.query(Field), Field).all()

    if not fields:
        st.warning("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –ø–æ–ª—è –≤ —Ä–∞–∑–¥–µ–ª–µ '–ü–æ–ª—è'")
        if st.button("‚ûï –ü–µ—Ä–µ–π—Ç–∏ –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –ø–æ–ª–µ–π"):
            st.switch_page("pages/2_üå±_–ü–æ–ª—è.py")
        st.stop()

    # ============================================================================
    # –§–û–†–ú–ê –î–û–ë–ê–í–õ–ï–ù–ò–Ø –ü–û–°–ï–í–ê
    # ============================================================================

    st.markdown("### ‚ûï –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ—Å–µ–≤–∞")

    with st.form("sowing_form"):
        # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        st.markdown("#### üìã –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")

        col1, col2, col3 = st.columns(3)

        with col1:
            # –í—ã–±–æ—Ä –ø–æ–ª—è
            field_options = {f"{f.name or f.field_code} ({f.area_ha} –≥–∞)": f for f in fields}
            selected_field_name = st.selectbox(
                "–ü–æ–ª–µ*",
                options=list(field_options.keys()),
                help="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è –ø–æ—Å–µ–≤–∞"
            )
            selected_field = field_options[selected_field_name]

        with col2:
            # –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –ø–æ—Å–µ–≤–∞
            sowing_date = st.date_input(
                "–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –ø–æ—Å–µ–≤–∞*",
                value=datetime.now().date(),
                max_value=datetime.now().date(),
                help="–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –ø–æ—Å–µ–≤–Ω—ã—Ö —Ä–∞–±–æ—Ç"
            )

        with col3:
            # –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ—Å–µ–≤–∞
            end_date = st.date_input(
                "–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è",
                value=None,
                max_value=datetime.now().date(),
                help="–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ—Å–µ–≤–Ω—ã—Ö —Ä–∞–±–æ—Ç (–¥–ª—è –º–Ω–æ–≥–æ–¥–Ω–µ–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π)"
            )

        col1, col2 = st.columns(2)

        with col1:
            # –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –ø–ª–æ—â–∞–¥—å
            area_processed = st.number_input(
                "–ü–ª–æ—â–∞–¥—å –ø–æ—Å–µ–≤–∞ (–≥–∞)*",
                min_value=0.1,
                max_value=float(selected_field.area_ha),
                value=float(selected_field.area_ha),
                step=0.1,
                help="–§–∞–∫—Ç–∏—á–µ—Å–∫–∏ –∑–∞—Å–µ—è–Ω–Ω–∞—è –ø–ª–æ—â–∞–¥—å"
            )

        with col2:
            # –†–∞–±–æ—á–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å
            work_speed_kmh = st.number_input(
                "–†–∞–±–æ—á–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å (–∫–º/—á)",
                min_value=0.0,
                max_value=25.0,
                value=None,
                step=0.5,
                help="–°–∫–æ—Ä–æ—Å—Ç—å –¥–≤–∏–∂–µ–Ω–∏—è –∞–≥—Ä–µ–≥–∞—Ç–∞ –≤–æ –≤—Ä–µ–º—è –ø–æ—Å–µ–≤–∞"
            )

        st.markdown("---")
        st.markdown("#### üå± –ö—É–ª—å—Ç—É—Ä–∞ –∏ —Å–æ—Ä—Ç")

        col1, col2 = st.columns(2)

        with col1:
            # –í—ã–±–æ—Ä –∫—É–ª—å—Ç—É—Ä—ã
            selected_crop = st.selectbox(
                "–ö—É–ª—å—Ç—É—Ä–∞*",
                options=list(crops_reference.keys()),
                help="–í—ã–±–µ—Ä–∏—Ç–µ –∫—É–ª—å—Ç—É—Ä—É –¥–ª—è –ø–æ—Å–µ–≤–∞",
                key="sowing_crop_select"
            )

            # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –∫—É–ª—å—Ç—É—Ä–µ
            crop_data = crops_reference[selected_crop]

        with col2:
            # –í—ã–±–æ—Ä —Å–æ—Ä—Ç–∞ (—Ä–µ–∞–∫—Ç–∏–≤–Ω—ã–π –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫—É–ª—å—Ç—É—Ä–µ)
            varieties = crop_data.get("—Å–æ—Ä—Ç–∞", [])
            selected_variety = st.selectbox(
                "–°–æ—Ä—Ç*",
                options=["–ù–µ —É–∫–∞–∑–∞–Ω"] + (varieties if varieties else []),
                help="–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ä—Ç –∫—É–ª—å—Ç—É—Ä—ã",
                key="sowing_variety_select"
            )

        # –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        with st.expander("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è " + selected_crop, expanded=True):
            col1, col2, col3 = st.columns(3)

            with col1:
                st.markdown("**–ù–æ—Ä–º–∞ –≤—ã—Å–µ–≤–∞:**")
                norm = crop_data.get("–Ω–æ—Ä–º–∞_–≤—ã—Å–µ–≤–∞", {})
                st.info(f"–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è: {norm.get('—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è', '-')} {norm.get('–µ–¥–∏–Ω–∏—Ü–∞', '–∫–≥/–≥–∞')}")
                st.caption(f"–î–∏–∞–ø–∞–∑–æ–Ω: {norm.get('–º–∏–Ω', '-')} - {norm.get('–º–∞–∫—Å', '-')} {norm.get('–µ–¥–∏–Ω–∏—Ü–∞', '')}")

            with col2:
                st.markdown("**–ì–ª—É–±–∏–Ω–∞ –∑–∞–¥–µ–ª–∫–∏:**")
                depth = crop_data.get("–≥–ª—É–±–∏–Ω–∞_–∑–∞–¥–µ–ª–∫–∏", {})
                st.info(f"–û–ø—Ç–∏–º—É–º: {depth.get('–æ–ø—Ç–∏–º—É–º', '-')} {depth.get('–µ–¥–∏–Ω–∏—Ü–∞', '—Å–º')}")
                if '–¥–∏–∞–ø–∞–∑–æ–Ω' in depth:
                    st.caption(f"–î–∏–∞–ø–∞–∑–æ–Ω: {depth['–¥–∏–∞–ø–∞–∑–æ–Ω'][0]} - {depth['–¥–∏–∞–ø–∞–∑–æ–Ω'][1]} {depth.get('–µ–¥–∏–Ω–∏—Ü–∞', '')}")

            with col3:
                st.markdown("**–ú–µ–∂–¥—É—Ä—è–¥—å–µ:**")
                spacing = crop_data.get("–º–µ–∂–¥—É—Ä—è–¥—å–µ", {})
                if spacing:
                    st.info(f"{spacing.get('—Å—Ç–∞–Ω–¥–∞—Ä—Ç', '-')} {spacing.get('–µ–¥–∏–Ω–∏—Ü–∞', '—Å–º')}")
                else:
                    st.caption("–ù–µ —É–∫–∞–∑–∞–Ω–æ")

        st.markdown("---")
        st.markdown("#### ‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ—Å–µ–≤–∞")

        col1, col2, col3, col4 = st.columns(4)

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        recommended_rate = crop_data.get("–Ω–æ—Ä–º–∞_–≤—ã—Å–µ–≤–∞", {}).get("—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è", 180)
        recommended_depth = crop_data.get("–≥–ª—É–±–∏–Ω–∞_–∑–∞–¥–µ–ª–∫–∏", {}).get("–æ–ø—Ç–∏–º—É–º", 5)
        recommended_spacing = crop_data.get("–º–µ–∂–¥—É—Ä—è–¥—å–µ", {}).get("—Å—Ç–∞–Ω–¥–∞—Ä—Ç", 15)

        with col1:
            seeding_rate = st.number_input(
                f"–ù–æ—Ä–º–∞ –≤—ã—Å–µ–≤–∞ ({crop_data.get('–Ω–æ—Ä–º–∞_–≤—ã—Å–µ–≤–∞', {}).get('–µ–¥–∏–Ω–∏—Ü–∞', '–∫–≥/–≥–∞')})*",
                min_value=1.0,
                max_value=500.0,
                value=float(recommended_rate),
                step=1.0,
                help="–§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –Ω–æ—Ä–º–∞ –≤—ã—Å–µ–≤–∞"
            )

        with col2:
            seeding_depth = st.number_input(
                "–ì–ª—É–±–∏–Ω–∞ –∑–∞–¥–µ–ª–∫–∏ (—Å–º)*",
                min_value=1.0,
                max_value=15.0,
                value=float(recommended_depth),
                step=0.5,
                help="–ì–ª—É–±–∏–Ω–∞ –∑–∞–¥–µ–ª–∫–∏ —Å–µ–º—è–Ω"
            )

        with col3:
            row_spacing = st.number_input(
                "–ú–µ–∂–¥—É—Ä—è–¥—å–µ (—Å–º)",
                min_value=10.0,
                max_value=100.0,
                value=float(recommended_spacing),
                step=5.0,
                help="–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —Ä—è–¥–∞–º–∏"
            )

        with col4:
            if seed_treatments_ref:
                seed_treatment_options = ["–ù–µ —É–∫–∞–∑–∞–Ω"] + list(seed_treatments_ref.keys())
                seed_treatment = st.selectbox(
                    "–ü—Ä–æ—Ç—Ä–∞–≤–∏—Ç–µ–ª—å",
                    options=seed_treatment_options,
                    help="–ü—Ä–µ–ø–∞—Ä–∞—Ç –¥–ª—è –ø—Ä–æ—Ç—Ä–∞–≤–ª–∏–≤–∞–Ω–∏—è —Å–µ–º—è–Ω"
                )

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø—Ä–æ—Ç—Ä–∞–≤–∏—Ç–µ–ª–µ
                if seed_treatment and seed_treatment != "–ù–µ —É–∫–∞–∑–∞–Ω":
                    treatment_data = seed_treatments_ref.get(seed_treatment, {})
                    if treatment_data:
                        st.caption(f"üß™ {treatment_data.get('–¥–µ–π—Å—Ç–≤—É—é—â–µ–µ_–≤–µ—â–µ—Å—Ç–≤–æ', '-')}")
                        st.caption(f"üìä –ù–æ—Ä–º–∞: {treatment_data.get('–Ω–æ—Ä–º–∞_–ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è', '-')}")
            else:
                seed_treatment = st.text_input(
                    "–ü—Ä–æ—Ç—Ä–∞–≤–∏—Ç–µ–ª—å",
                    placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –í–∏—Ç–∞–≤–∞–∫—Å",
                    help="–ü—Ä–µ–ø–∞—Ä–∞—Ç –¥–ª—è –ø—Ä–æ—Ç—Ä–∞–≤–ª–∏–≤–∞–Ω–∏—è —Å–µ–º—è–Ω"
                )

        st.markdown("---")
        st.markdown("#### üåæ –°–µ–º–µ–Ω–Ω–æ–π –º–∞—Ç–µ—Ä–∏–∞–ª")

        col1, col2 = st.columns(2)

        with col1:
            seed_reproduction = st.selectbox(
                "–†–µ–ø—Ä–æ–¥—É–∫—Ü–∏—è —Å–µ–º—è–Ω",
                options=['–≠–ª–∏—Ç–∞', '–°—É–ø–µ—Ä—ç–ª–∏—Ç–∞', '1-—è —Ä–µ–ø—Ä–æ–¥—É–∫—Ü–∏—è', '2-—è —Ä–µ–ø—Ä–æ–¥—É–∫—Ü–∏—è', '3-—è —Ä–µ–ø—Ä–æ–¥—É–∫—Ü–∏—è', '–ì–∏–±—Ä–∏–¥ F1', '–ì–∏–±—Ä–∏–¥ F2', '–ì–∏–±—Ä–∏–¥ F3', '–î—Ä—É–≥–æ–µ'],
                index=None,
                help="–†–µ–ø—Ä–æ–¥—É–∫—Ü–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–≥–æ —Å–µ–º–µ–Ω–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞"
            )

        with col2:
            seed_origin_country = st.text_input(
                "–°—Ç—Ä–∞–Ω–∞ –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è —Å–µ–º—è–Ω",
                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω, –†–æ—Å—Å–∏—è, –ö–∞–Ω–∞–¥–∞",
                help="–°—Ç—Ä–∞–Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ —Å–µ–º–µ–Ω–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞"
            )

        # –°–æ–≤–º–µ—â–µ–Ω–Ω—ã–π –ø–æ—Å–µ–≤ —Å —É–¥–æ–±—Ä–µ–Ω–∏—è–º–∏
        st.markdown("---")
        st.markdown("#### üå± –°–æ–≤–º–µ—â–µ–Ω–Ω—ã–π –ø–æ—Å–µ–≤ —Å —É–¥–æ–±—Ä–µ–Ω–∏—è–º–∏")

        combined_with_fertilizer = st.checkbox(
            "–°–æ–≤–º–µ—â–µ–Ω–Ω—ã–π –ø–æ—Å–µ–≤ —Å –≤–Ω–µ—Å–µ–Ω–∏–µ–º —É–¥–æ–±—Ä–µ–Ω–∏–π",
            value=False,
            help="–û—Ç–º–µ—Ç—å—Ç–µ, –µ—Å–ª–∏ —É–¥–æ–±—Ä–µ–Ω–∏—è –≤–Ω–æ—Å–∏–ª–∏—Å—å –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ —Å –ø–æ—Å–µ–≤–æ–º"
        )

        if combined_with_fertilizer:
            col1, col2 = st.columns(2)

            with col1:
                combined_fertilizer_name = st.text_input(
                    "–ù–∞–∑–≤–∞–Ω–∏–µ —É–¥–æ–±—Ä–µ–Ω–∏—è",
                    placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ê–º–º–æ—Ñ–æ—Å, NPK 16:16:16",
                    help="–ù–∞–∑–≤–∞–Ω–∏–µ —É–¥–æ–±—Ä–µ–Ω–∏—è, –≤–Ω–µ—Å–µ–Ω–Ω–æ–≥–æ –ø—Ä–∏ –ø–æ—Å–µ–≤–µ"
                )

            with col2:
                combined_fertilizer_rate = st.number_input(
                    "–ù–æ—Ä–º–∞ –≤–Ω–µ—Å–µ–Ω–∏—è (–∫–≥/–≥–∞)",
                    min_value=0.0,
                    max_value=500.0,
                    value=None,
                    step=5.0,
                    help="–ù–æ—Ä–º–∞ –≤–Ω–µ—Å–µ–Ω–∏—è —É–¥–æ–±—Ä–µ–Ω–∏—è –ø—Ä–∏ –ø–æ—Å–µ–≤–µ"
                )
        else:
            combined_fertilizer_name = None
            combined_fertilizer_rate = None

        st.markdown("---")
        st.markdown("#### üöú –¢–µ—Ö–Ω–∏–∫–∞ –∏ –∞–≥—Ä–µ–≥–∞—Ç—ã")

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–µ—Ö–Ω–∏–∫–∏ –∏ –∞–≥—Ä–µ–≥–∞—Ç–æ–≤
        machinery_list = filter_query_by_farm(db.query(Machinery).filter(Machinery.status == 'active'), Machinery).all()
        implements_list = filter_query_by_farm(db.query(Implements).filter(Implements.status == 'active'), Implements).all()

        col1, col2 = st.columns(2)

        with col1:
            # Create machinery options with pre-loaded attributes
            machinery_options = {}
            machinery_details = {}  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π —Ç–µ—Ö–Ω–∏–∫–∏

            if machinery_list:
                for m in machinery_list:
                    # Eagerly access attributes while still in session
                    m_brand = m.brand or ''
                    m_model = m.model
                    m_year = m.year
                    m_power = m.engine_power_hp

                    display_text = f"{m_brand} {m_model} ({m_year or '-'})"
                    machinery_options[display_text] = (m.id, m_year)

                    # –ò—â–µ–º —Ç–µ—Ö–Ω–∏–∫—É –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
                    ref_key = f"{m_brand} {m_model}"
                    if ref_key in tractors_ref:
                        machinery_details[display_text] = tractors_ref[ref_key]

            selected_machinery_display = st.selectbox(
                "–¢–µ—Ö–Ω–∏–∫–∞ (—Ç—Ä–∞–∫—Ç–æ—Ä)",
                options=["–ù–µ –≤—ã–±—Ä–∞–Ω–æ"] + list(machinery_options.keys()),
                help="–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–∞–∫—Ç–æ—Ä –∏–ª–∏ –¥—Ä—É–≥—É—é —Ç–µ—Ö–Ω–∏–∫—É"
            )

            if selected_machinery_display != "–ù–µ –≤—ã–±—Ä–∞–Ω–æ":
                selected_machinery_id, machine_year = machinery_options[selected_machinery_display]

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞
                if selected_machinery_display in machinery_details:
                    ref_data = machinery_details[selected_machinery_display]
                    st.success(f"üí™ {ref_data['–º–æ—â–Ω–æ—Å—Ç—å_–ª—Å']} –ª.—Å. | üè∑Ô∏è {ref_data['–∫–ª–∞—Å—Å']} | üöú {ref_data['—Ç–∏–ø']}")

                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–≥–æ–¥–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–æ—Å–µ–≤–∞
                    if '–ü–æ—Å–µ–≤' in ref_data.get('–ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ', []):
                        st.info("‚úÖ –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ø–æ—Å–µ–≤–Ω—ã—Ö —Ä–∞–±–æ—Ç")
                    else:
                        st.warning("‚ö†Ô∏è –ù–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω–∞ –¥–ª—è –ø–æ—Å–µ–≤–∞ (—Å–º. –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ)")
                else:
                    st.caption(f"–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞: {machine_year or '–Ω–µ —É–∫–∞–∑–∞–Ω'}")
            else:
                selected_machinery_id = None
                machine_year = None

        with col2:
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å–µ—è–ª–∫–∏ –∏ pre-load attributes
            implement_options = {}
            if implements_list:
                for impl in implements_list:
                    if impl.implement_type in ['seeder', 'planter']:
                        # Eagerly access attributes while still in session
                        display_text = f"{impl.brand or ''} {impl.model} ({impl.working_width_m or '-'}–º)"
                        implement_options[display_text] = (impl.id, impl.year, impl.working_width_m)

            selected_implement_display = st.selectbox(
                "–ê–≥—Ä–µ–≥–∞—Ç (—Å–µ—è–ª–∫–∞)",
                options=["–ù–µ –≤—ã–±—Ä–∞–Ω–æ"] + list(implement_options.keys()),
                help="–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—è–ª–∫—É –∏–ª–∏ —Å–∞–∂–∞–ª–∫—É"
            )

            if selected_implement_display != "–ù–µ –≤—ã–±—Ä–∞–Ω–æ":
                selected_implement_id, implement_year, implement_width = implement_options[selected_implement_display]
                st.caption(f"–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞: {implement_year or '–Ω–µ —É–∫–∞–∑–∞–Ω'}, –®–∏—Ä–∏–Ω–∞: {implement_width or '-'}–º")
            else:
                selected_implement_id = None
                implement_year = None

        if not machinery_list and not implements_list:
            st.info("üí° –¢–µ—Ö–Ω–∏–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª '–¢–µ—Ö–Ω–∏–∫–∞' –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.")

        st.markdown("---")

        with st.expander("üå§Ô∏è –£—Å–ª–æ–≤–∏—è –ø–æ—Å–µ–≤–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)", expanded=False):
            col1, col2, col3 = st.columns(3)

            with col1:
                soil_temp = st.number_input(
                    "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø–æ—á–≤—ã (¬∞C)",
                    min_value=-5.0,
                    max_value=40.0,
                    value=10.0,
                    step=0.5,
                    help="–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø–æ—á–≤—ã –Ω–∞ –≥–ª—É–±–∏–Ω–µ –ø–æ—Å–µ–≤–∞"
                )

            with col2:
                soil_moisture = st.number_input(
                    "–í–ª–∞–∂–Ω–æ—Å—Ç—å –ø–æ—á–≤—ã (%)",
                    min_value=0.0,
                    max_value=100.0,
                    value=60.0,
                    step=1.0,
                    help="–í–ª–∞–∂–Ω–æ—Å—Ç—å –ø–æ—á–≤—ã –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö"
                )

            with col3:
                weather_conditions = st.text_input(
                    "–ü–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è",
                    placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –Ø—Å–Ω–æ, +15¬∞C",
                    help="–û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–≥–æ–¥—ã –≤–æ –≤—Ä–µ–º—è –ø–æ—Å–µ–≤–∞"
                )

        st.markdown("---")
        st.markdown("#### üë§ –ú–µ—Ö–∞–Ω–∏–∑–∞—Ç–æ—Ä –∏ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è")

        col1, col2 = st.columns(2)

        with col1:
            operator = st.text_input(
                "–ú–µ—Ö–∞–Ω–∏–∑–∞—Ç–æ—Ä",
                placeholder="–§–ò–û –º–µ—Ö–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞",
                help="–ö—Ç–æ –ø—Ä–æ–≤–æ–¥–∏–ª –ø–æ—Å–µ–≤"
            )

        with col2:
            notes = st.text_area(
                "–ü—Ä–∏–º–µ—á–∞–Ω–∏—è",
                placeholder="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è...",
                help="–õ—é–±—ã–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏"
            )

        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å—á–µ—Ç—ã
        st.markdown("---")
        st.markdown("#### üßÆ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å—á–µ—Ç—ã")

        col1, col2, col3 = st.columns(3)

        # –†–∞—Å—á–µ—Ç –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –≤ —Å–µ–º–µ–Ω–∞—Ö
        total_seeds_needed = area_processed * seeding_rate

        with col1:
            st.metric(
                "–ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –≤ —Å–µ–º–µ–Ω–∞—Ö",
                f"{total_seeds_needed:,.1f} –∫–≥",
                help="–û–±—â–∞—è –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –≤ —Å–µ–º–µ–Ω–∞—Ö –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–ª–æ—â–∞–¥–∏"
            )

        with col2:
            # –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Å–µ–º—è–Ω (–ø—Ä–∏–º–µ—Ä–Ω–∞—è)
            seed_cost_per_kg = 150  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞, –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞
            total_seed_cost = total_seeds_needed * seed_cost_per_kg
            st.metric(
                "–ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å–µ–º—è–Ω",
                f"{total_seed_cost:,.0f} —Ç–≥",
                help="–û—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å–µ–º—è–Ω"
            )

        with col3:
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è NPK
            npk = crop_data.get("–ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å_NPK", {})
            if npk:
                n = npk.get("N", 0)
                p = npk.get("P2O5", 0)
                k = npk.get("K2O", 0)
                st.metric(
                    "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è NPK",
                    f"N{n}:P{p}:K{k}",
                    help="–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –≤ —É–¥–æ–±—Ä–µ–Ω–∏—è—Ö"
                )

        # –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
        st.markdown("---")
        submitted = st.form_submit_button("‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å–µ–≤", use_container_width=True, type="primary")

        if submitted:
            # –í–∞–ª–∏–¥–∞—Ü–∏—è
            errors = []

            if not selected_field:
                errors.append("–ü–æ–ª–µ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ")

            if not sowing_date:
                errors.append("–î–∞—Ç–∞ –ø–æ—Å–µ–≤–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞")

            if area_processed > selected_field.area_ha:
                errors.append(f"–ü–ª–æ—â–∞–¥—å –ø–æ—Å–µ–≤–∞ ({area_processed} –≥–∞) –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ø–ª–æ—â–∞–¥—å –ø–æ–ª—è ({selected_field.area_ha} –≥–∞)")

            if seeding_rate <= 0:
                errors.append("–ù–æ—Ä–º–∞ –≤—ã—Å–µ–≤–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")

            if errors:
                for error in errors:
                    st.error(f"‚ùå {error}")
            else:
                try:
                    # –°–æ–∑–¥–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
                    new_operation = Operation(
                        farm_id=farm.id,
                        field_id=selected_field.id,
                        operation_type="sowing",
                        operation_date=sowing_date,
                        end_date=end_date if end_date else None,
                        crop=selected_crop,
                        variety=selected_variety if selected_variety != "–ù–µ —É–∫–∞–∑–∞–Ω" else None,
                        area_processed_ha=area_processed,
                        machine_id=selected_machinery_id if selected_machinery_id else None,
                        implement_id=selected_implement_id if selected_implement_id else None,
                        machine_year=machine_year,
                        implement_year=implement_year,
                        work_speed_kmh=work_speed_kmh if work_speed_kmh else None,
                        operator=operator if operator else None,
                        weather_conditions=weather_conditions if weather_conditions else None,
                        notes=notes if notes else None
                    )

                    db.add(new_operation)
                    db.flush()  # –ü–æ–ª—É—á–∏—Ç—å ID –æ–ø–µ—Ä–∞—Ü–∏–∏

                    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –ø–æ—Å–µ–≤–∞
                    sowing_detail = SowingDetail(
                        operation_id=new_operation.id,
                        crop=selected_crop,
                        variety=selected_variety if selected_variety != "–ù–µ —É–∫–∞–∑–∞–Ω" else None,
                        seeding_rate_kg_ha=seeding_rate,
                        seeding_depth_cm=seeding_depth,
                        row_spacing_cm=row_spacing if row_spacing else None,
                        seed_treatment=seed_treatment if seed_treatment else None,
                        soil_temp_c=soil_temp if soil_temp else None,
                        soil_moisture_percent=soil_moisture if soil_moisture else None,
                        total_seeds_kg=total_seeds_needed,
                        seed_reproduction=seed_reproduction if seed_reproduction else None,
                        seed_origin_country=seed_origin_country if seed_origin_country else None,
                        combined_with_fertilizer=combined_with_fertilizer,
                        combined_fertilizer_name=combined_fertilizer_name if combined_with_fertilizer else None,
                        combined_fertilizer_rate_kg_ha=combined_fertilizer_rate if combined_with_fertilizer else None
                    )

                    db.add(sowing_detail)
                    db.commit()

                    st.success(f"‚úÖ –ü–æ—Å–µ–≤ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!")
                    st.balloons()

                    # –ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–¥–∫—É
                    with st.expander("üìÑ –°–≤–æ–¥–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏", expanded=True):
                        col1, col2 = st.columns(2)

                        with col1:
                            st.markdown(f"**–ü–æ–ª–µ:** {selected_field.name or selected_field.field_code}")
                            st.markdown(f"**–î–∞—Ç–∞:** {sowing_date}")
                            st.markdown(f"**–ö—É–ª—å—Ç—É—Ä–∞:** {selected_crop}")
                            st.markdown(f"**–°–æ—Ä—Ç:** {selected_variety}")
                            st.markdown(f"**–ü–ª–æ—â–∞–¥—å:** {area_processed} –≥–∞")

                        with col2:
                            st.markdown(f"**–ù–æ—Ä–º–∞ –≤—ã—Å–µ–≤–∞:** {seeding_rate} –∫–≥/–≥–∞")
                            st.markdown(f"**–ì–ª—É–±–∏–Ω–∞:** {seeding_depth} —Å–º")
                            st.markdown(f"**–ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –≤ —Å–µ–º–µ–Ω–∞—Ö:** {total_seeds_needed:,.1f} –∫–≥")
                            st.markdown(f"**–ú–µ—Ö–∞–Ω–∏–∑–∞—Ç–æ—Ä:** {operator or '–ù–µ —É–∫–∞–∑–∞–Ω'}")

                    # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
                    st.info("üí° –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥: –í–Ω–µ—Å–µ–Ω–∏–µ —É–¥–æ–±—Ä–µ–Ω–∏–π. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ–∫–æ–≤–æ–µ –º–µ–Ω—é –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞.")

                except Exception as e:
                    db.rollback()
                    st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {str(e)}")

    st.markdown("---")

    # ============================================================================
    # –ò–°–¢–û–†–ò–Ø –ü–û–°–ï–í–û–í
    # ============================================================================

    st.markdown("### üìú –ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å–µ–≤–æ–≤")

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–µ–≤–æ–≤
    sowing_operations = db.query(
        Operation.id,
        Operation.operation_date,
        Field.name.label('field_name'),
        Field.field_code,
        Operation.crop,
        Operation.variety,
        Operation.area_processed_ha,
        SowingDetail.seeding_rate_kg_ha,
        SowingDetail.seeding_depth_cm
    ).join(Field).outerjoin(SowingDetail).filter(
        Operation.operation_type == "sowing",
        Field.farm_id == farm.id  # –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –§–ò–õ–¨–¢–†: —Ç–æ–ª—å–∫–æ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—É—â–µ–≥–æ —Ö–æ–∑—è–π—Å—Ç–≤–∞
    ).order_by(Operation.operation_date.desc()).all()

    if sowing_operations:
        # –°–æ–∑–¥–∞–Ω–∏–µ DataFrame
        df_sowing = pd.DataFrame(sowing_operations, columns=[
            'ID',
            '–î–∞—Ç–∞',
            '–ü–æ–ª–µ',
            '–ö–æ–¥ –ø–æ–ª—è',
            '–ö—É–ª—å—Ç—É—Ä–∞',
            '–°–æ—Ä—Ç',
            '–ü–ª–æ—â–∞–¥—å (–≥–∞)',
            '–ù–æ—Ä–º–∞ –≤—ã—Å–µ–≤–∞ (–∫–≥/–≥–∞)',
            '–ì–ª—É–±–∏–Ω–∞ (—Å–º)'
        ])

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        df_sowing['–î–∞—Ç–∞'] = pd.to_datetime(df_sowing['–î–∞—Ç–∞']).dt.strftime('%Y-%m-%d')
        df_sowing = df_sowing.fillna('-')

        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        st.dataframe(df_sowing, use_container_width=True, hide_index=True)

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        col1, col2, col3, col4 = st.columns(4)

        with col1:
            st.metric("–í—Å–µ–≥–æ –ø–æ—Å–µ–≤–æ–≤", len(sowing_operations))

        with col2:
            total_sown = sum([op.area_processed_ha for op in sowing_operations if op.area_processed_ha])
            st.metric("–ó–∞—Å–µ—è–Ω–æ –≤—Å–µ–≥–æ", f"{total_sown:,.1f} –≥–∞")

        with col3:
            unique_crops = len(set([op.crop for op in sowing_operations if op.crop]))
            st.metric("–ö—É–ª—å—Ç—É—Ä", unique_crops)

        with col4:
            unique_fields = len(set([op.field_name for op in sowing_operations if op.field_name]))
            st.metric("–ü–æ–ª–µ–π", unique_fields)

        # –ì—Ä–∞—Ñ–∏–∫ –ø–æ –∫—É–ª—å—Ç—É—Ä–∞–º
        if len(sowing_operations) > 0:
            crops_data = df_sowing[df_sowing['–ö—É–ª—å—Ç—É—Ä–∞'] != '-']['–ö—É–ª—å—Ç—É—Ä–∞'].value_counts()

            import plotly.express as px

            fig = px.pie(
                values=crops_data.values,
                names=crops_data.index,
                title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–ª–æ—â–∞–¥–µ–π –ø–æ –∫—É–ª—å—Ç—É—Ä–∞–º',
                height=400
            )
            st.plotly_chart(fig, use_container_width=True)

    else:
        st.info("üì≠ –ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å–µ–≤–æ–≤ –ø—É—Å—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π –ø–æ—Å–µ–≤ –≤—ã—à–µ.")

finally:
    db.close()

# Sidebar
with st.sidebar:
    st.markdown("### ‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞")
    st.info("""
    **–£—á–µ—Ç –ø–æ—Å–µ–≤–∞** –ø–æ–∑–≤–æ–ª—è–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å–µ–≤–Ω—ã–µ —Ä–∞–±–æ—Ç—ã —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏.

    **–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:**
    - –ü–æ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    - –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –≤ —Å–µ–º–µ–Ω–∞—Ö
    - –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–æ—Ä–º—ã NPK
    - –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ

    **–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è:**
    - –ü–æ–ª–µ
    - –î–∞—Ç–∞ –ø–æ—Å–µ–≤–∞
    - –ö—É–ª—å—Ç—É—Ä–∞ –∏ —Å–æ—Ä—Ç
    - –ù–æ—Ä–º–∞ –≤—ã—Å–µ–≤–∞
    - –ì–ª—É–±–∏–Ω–∞ –∑–∞–¥–µ–ª–∫–∏
    """)

    st.markdown("### üìö –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –∫—É–ª—å—Ç—É—Ä")
    st.markdown(f"–î–æ—Å—Ç—É–ø–Ω–æ **{len(crops_reference)}** –∫—É–ª—å—Ç—É—Ä:")
    for crop in list(crops_reference.keys())[:5]:
        st.markdown(f"- {crop}")
    if len(crops_reference) > 5:
        st.markdown(f"... –∏ –µ—â–µ {len(crops_reference) - 5}")

    st.markdown("### üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
    st.markdown("""
    - –ü—Ä–æ–≤–æ–¥–∏—Ç–µ –ø–æ—Å–µ–≤ –≤ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ —Å—Ä–æ–∫–∏
    - –°–æ–±–ª—é–¥–∞–π—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—É—é –Ω–æ—Ä–º—É –≤—ã—Å–µ–≤–∞
    - –£—á–∏—Ç—ã–≤–∞–π—Ç–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –∏ –≤–ª–∞–∂–Ω–æ—Å—Ç—å –ø–æ—á–≤—ã
    - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–µ–º–µ–Ω–Ω–æ–π –º–∞—Ç–µ—Ä–∏–∞–ª
    """)
