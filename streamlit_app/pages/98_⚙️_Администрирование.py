"""
Admin Panel - User Management
"""
import streamlit as st
import pandas as pd
from datetime import datetime
from modules.database import SessionLocal, User, Farm, AuditLog, UserFarm
from modules.auth import (
    require_admin, get_current_user, create_user, hash_password,
    get_user_display_name, log_action
)

st.set_page_config(page_title="–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", page_icon="‚öôÔ∏è", layout="wide")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
require_admin()

st.title("‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
st.markdown("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏ —Å–∏—Å—Ç–µ–º–æ–π")

db = SessionLocal()
current_user = get_current_user()

try:
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ —à–∞–ø–∫–µ
    st.markdown("### üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã")

    col1, col2, col3, col4 = st.columns(4)

    total_users = db.query(User).count()
    active_users = db.query(User).filter(User.is_active == True).count()
    total_farms = db.query(Farm).count()
    recent_logins = db.query(User).filter(User.last_login.isnot(None)).count()

    with col1:
        st.metric("–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", total_users)
    with col2:
        st.metric("–ê–∫—Ç–∏–≤–Ω—ã—Ö", active_users, delta=f"{active_users}/{total_users}")
    with col3:
        st.metric("–•–æ–∑—è–π—Å—Ç–≤", total_farms)
    with col4:
        st.metric("–í—Ö–æ–¥–∏–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É", recent_logins)

    st.markdown("---")

    # –í–∫–ª–∞–¥–∫–∏ –∞–¥–º–∏–Ω–∫–∏
    tabs = st.tabs(["üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", "‚ûï –°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "üè¢ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ —Ö–æ–∑—è–π—Å—Ç–≤–∞", "üìú –ñ—É—Ä–Ω–∞–ª –¥–µ–π—Å—Ç–≤–∏–π", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"])

    # ============================================================================
    # –í–ö–õ–ê–î–ö–ê: –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò
    # ============================================================================
    with tabs[0]:
        st.markdown("### üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")

        # –§–∏–ª—å—Ç—Ä—ã
        col1, col2, col3 = st.columns(3)

        with col1:
            filter_role = st.selectbox("–†–æ–ª—å", ["–í—Å–µ", "admin", "farmer", "viewer"])

        with col2:
            filter_status = st.selectbox("–°—Ç–∞—Ç—É—Å", ["–í—Å–µ", "–ê–∫—Ç–∏–≤–Ω—ã–µ", "–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ"])

        with col3:
            filter_farm = st.selectbox(
                "–•–æ–∑—è–π—Å—Ç–≤–æ",
                ["–í—Å–µ"] + [f"{f.bin} - {f.name}" for f in db.query(Farm).all()]
            )

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
        query = db.query(User, Farm).outerjoin(Farm, User.farm_id == Farm.id)

        if filter_role != "–í—Å–µ":
            query = query.filter(User.role == filter_role)

        if filter_status == "–ê–∫—Ç–∏–≤–Ω—ã–µ":
            query = query.filter(User.is_active == True)
        elif filter_status == "–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ":
            query = query.filter(User.is_active == False)

        if filter_farm != "–í—Å–µ":
            farm_bin = filter_farm.split(" - ")[0]
            query = query.filter(Farm.bin == farm_bin)

        users = query.all()

        if users:
            st.markdown(f"**–ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:** {len(users)}")

            # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            data = []
            for user, farm in users:
                data.append({
                    "ID": user.id,
                    "Username": user.username,
                    "–§–ò–û": user.full_name or "-",
                    "Email": user.email,
                    "–†–æ–ª—å": user.role,
                    "–•–æ–∑—è–π—Å—Ç–≤–æ": farm.name if farm else "–ù–µ –ø—Ä–∏–≤—è–∑–∞–Ω",
                    "–ê–∫—Ç–∏–≤–µ–Ω": "‚úÖ" if user.is_active else "‚ùå",
                    "–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥": user.last_login.strftime("%Y-%m-%d %H:%M") if user.last_login else "–ù–∏–∫–æ–≥–¥–∞"
                })

            df = pd.DataFrame(data)
            st.dataframe(df, use_container_width=True, hide_index=True)

            # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            st.markdown("---")
            st.markdown("### ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

            selected_username = st.selectbox(
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                [user.username for user, _ in users]
            )

            if selected_username:
                selected_user = next((u for u, _ in users if u.username == selected_username), None)

                if selected_user:
                    with st.form("edit_user_form"):
                        st.markdown(f"**–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:** {selected_user.username}")

                        col1, col2 = st.columns(2)

                        with col1:
                            edit_full_name = st.text_input("–§–ò–û", value=selected_user.full_name or "")
                            edit_email = st.text_input("Email", value=selected_user.email)
                            edit_role = st.selectbox(
                                "–†–æ–ª—å",
                                ["admin", "farmer", "viewer"],
                                index=["admin", "farmer", "viewer"].index(selected_user.role)
                            )

                        with col2:
                            farms = db.query(Farm).all()
                            farm_options = ["–ù–µ –ø—Ä–∏–≤—è–∑–∞–Ω"] + [f"{f.id} - {f.name}" for f in farms]

                            current_farm_index = 0
                            if selected_user.farm_id:
                                for idx, f in enumerate(farms, start=1):
                                    if f.id == selected_user.farm_id:
                                        current_farm_index = idx
                                        break

                            edit_farm = st.selectbox("–•–æ–∑—è–π—Å—Ç–≤–æ", farm_options, index=current_farm_index)

                            edit_is_active = st.checkbox("–ê–∫—Ç–∏–≤–µ–Ω", value=selected_user.is_active)

                            edit_new_password = st.text_input(
                                "–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º, —á—Ç–æ–±—ã –Ω–µ –º–µ–Ω—è—Ç—å)",
                                type="password"
                            )

                        col1, col2 = st.columns(2)

                        with col1:
                            update_submitted = st.form_submit_button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è", type="primary", use_container_width=True)

                        with col2:
                            if selected_user.id != current_user['id']:  # –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–µ–±—è
                                delete_submitted = st.form_submit_button("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", use_container_width=True)
                            else:
                                delete_submitted = False
                                st.info("–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–µ–±—è")

                        if update_submitted:
                            try:
                                selected_user.full_name = edit_full_name
                                selected_user.email = edit_email
                                selected_user.role = edit_role
                                selected_user.is_active = edit_is_active

                                if edit_farm != "–ù–µ –ø—Ä–∏–≤—è–∑–∞–Ω":
                                    farm_id = int(edit_farm.split(" - ")[0])
                                    selected_user.farm_id = farm_id
                                else:
                                    selected_user.farm_id = None

                                if edit_new_password:
                                    selected_user.hashed_password = hash_password(edit_new_password)

                                selected_user.updated_at = datetime.now()

                                db.commit()

                                # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ–±–Ω–æ–≤–ª—è–µ–º session_state
                                if selected_user.id == current_user['id']:
                                    st.session_state["user"]["full_name"] = selected_user.full_name
                                    st.session_state["user"]["email"] = selected_user.email
                                    st.session_state["user"]["role"] = selected_user.role
                                    st.session_state["user"]["farm_id"] = selected_user.farm_id

                                # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
                                log_action(
                                    db, current_user['id'], "update", "user", selected_user.id,
                                    f"Updated user: {selected_user.username}"
                                )

                                st.success(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {selected_user.username} –æ–±–Ω–æ–≤–ª–µ–Ω!")
                                st.rerun()

                            except Exception as e:
                                db.rollback()
                                st.error(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

                        if delete_submitted:
                            try:
                                username_to_delete = selected_user.username
                                db.delete(selected_user)
                                db.commit()

                                log_action(
                                    db, current_user['id'], "delete", "user", selected_user.id,
                                    f"Deleted user: {username_to_delete}"
                                )

                                st.success(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username_to_delete} —É–¥–∞–ª–µ–Ω!")
                                st.rerun()

                            except Exception as e:
                                db.rollback()
                                st.error(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

        else:
            st.info("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

    # ============================================================================
    # –í–ö–õ–ê–î–ö–ê: –°–û–ó–î–ê–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
    # ============================================================================
    with tabs[1]:
        st.markdown("### ‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

        with st.form("create_user_form"):
            col1, col2 = st.columns(2)

            with col1:
                new_username = st.text_input("Username *", placeholder="username")
                new_email = st.text_input("Email *", placeholder="user@example.com")
                new_full_name = st.text_input("–§–ò–û *", placeholder="–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á")

            with col2:
                new_password = st.text_input("–ü–∞—Ä–æ–ª—å *", type="password", placeholder="–ú–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤")
                new_role = st.selectbox("–†–æ–ª—å *", ["farmer", "admin", "viewer"])

                farms = db.query(Farm).all()
                farm_options = ["–ù–µ –ø—Ä–∏–≤—è–∑–∞–Ω"] + [f"{f.id} - {f.name}" for f in farms]
                new_farm = st.selectbox("–•–æ–∑—è–π—Å—Ç–≤–æ", farm_options)

            create_submitted = st.form_submit_button("‚ûï –°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", type="primary", use_container_width=True)

            if create_submitted:
                errors = []

                if not new_username or not new_email or not new_full_name or not new_password:
                    errors.append("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è")

                if len(new_password) < 6:
                    errors.append("–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤")

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
                if db.query(User).filter(User.username == new_username).first():
                    errors.append("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º username —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

                if db.query(User).filter(User.email == new_email).first():
                    errors.append("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

                if errors:
                    for error in errors:
                        st.error(f"‚ùå {error}")
                else:
                    try:
                        farm_id = None
                        if new_farm != "–ù–µ –ø—Ä–∏–≤—è–∑–∞–Ω":
                            farm_id = int(new_farm.split(" - ")[0])

                        new_user = create_user(
                            db=db,
                            username=new_username,
                            email=new_email,
                            password=new_password,
                            full_name=new_full_name,
                            role=new_role,
                            farm_id=farm_id
                        )

                        log_action(
                            db, current_user['id'], "create", "user", new_user.id,
                            f"Created user: {new_user.username}"
                        )

                        st.success(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {new_user.username} —Å–æ–∑–¥–∞–Ω!")
                        st.balloons()

                    except Exception as e:
                        st.error(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

    # ============================================================================
    # –í–ö–õ–ê–î–ö–ê: –ù–ê–ó–ù–ê–ß–ï–ù–ò–ï –ù–ê –•–û–ó–Ø–ô–°–¢–í–ê (MULTI-FARM)
    # ============================================================================
    with tabs[2]:
        st.markdown("### üè¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–º –∫ —Ö–æ–∑—è–π—Å—Ç–≤–∞–º")
        st.info("üí° **Multi-Farm**: –ù–∞–∑–Ω–∞—á—å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–æ—Å—Ç—É–ø –∫ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º —Ö–æ–∑—è–π—Å—Ç–≤–∞–º —Å —Ä–∞–∑–Ω—ã–º–∏ —Ä–æ–ª—è–º–∏")

        # –í—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        all_users = db.query(User).filter(User.role != 'admin').all()  # –ê–¥–º–∏–Ω–∞–º –Ω–µ –Ω—É–∂–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ

        if not all_users:
            st.warning("üë§ –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)")
        else:
            selected_user_for_farms = st.selectbox(
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                options=[u.username for u in all_users],
                key="user_farms_select"
            )

            if selected_user_for_farms:
                user_obj = next((u for u in all_users if u.username == selected_user_for_farms), None)

                if user_obj:
                    st.markdown(f"#### –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: **{user_obj.full_name or user_obj.username}** ({user_obj.email})")

                    # –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
                    current_assignments = db.query(
                        UserFarm, Farm
                    ).join(
                        Farm, UserFarm.farm_id == Farm.id
                    ).filter(
                        UserFarm.user_id == user_obj.id
                    ).all()

                    st.markdown("##### üìã –¢–µ–∫—É—â–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:")

                    if current_assignments:
                        for uf, farm in current_assignments:
                            col1, col2, col3, col4 = st.columns([3, 2, 1, 1])

                            with col1:
                                primary_star = "‚≠ê " if uf.is_primary else ""
                                st.write(f"{primary_star}**{farm.name}** ({farm.bin})")

                            with col2:
                                role_display = {
                                    "admin": "üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
                                    "manager": "üëî –ú–µ–Ω–µ–¥–∂–µ—Ä",
                                    "viewer": "üëÅÔ∏è –ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å"
                                }.get(uf.role, uf.role)
                                st.write(role_display)

                            with col3:
                                if uf.is_primary:
                                    st.success("–û—Å–Ω–æ–≤–Ω–æ–µ")
                                else:
                                    if st.button("–°–¥–µ–ª–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–º", key=f"primary_{uf.id}"):
                                        # –£–±—Ä–∞—Ç—å is_primary —É –≤—Å–µ—Ö –¥—Ä—É–≥–∏—Ö
                                        db.query(UserFarm).filter(
                                            UserFarm.user_id == user_obj.id
                                        ).update({"is_primary": False})

                                        # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ
                                        uf.is_primary = True
                                        db.commit()

                                        st.success("‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–µ")
                                        st.rerun()

                            with col4:
                                if st.button("üóëÔ∏è", key=f"delete_uf_{uf.id}"):
                                    db.delete(uf)
                                    db.commit()
                                    st.success("‚úÖ –£–¥–∞–ª–µ–Ω–æ")
                                    st.rerun()

                        st.markdown("---")
                    else:
                        st.warning("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∏ –Ω–∞ –æ–¥–Ω–æ —Ö–æ–∑—è–π—Å—Ç–≤–æ")
                        st.info("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º—É –Ω–∏–∂–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è")

                    # –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
                    st.markdown("##### ‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ö–æ–∑—è–π—Å—Ç–≤—É")

                    with st.form("add_user_farm_form"):
                        col1, col2, col3 = st.columns(3)

                        with col1:
                            all_farms = db.query(Farm).all()

                            # –ò—Å–∫–ª—é—á–∏—Ç—å —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ —Ö–æ–∑—è–π—Å—Ç–≤–∞
                            assigned_farm_ids = [uf.farm_id for uf, _ in current_assignments]
                            available_farms = [f for f in all_farms if f.id not in assigned_farm_ids]

                            if not available_farms:
                                st.warning("–í—Å–µ —Ö–æ–∑—è–π—Å—Ç–≤–∞ —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã")
                                farm_to_add = None
                            else:
                                farm_options = [f"{f.id} - {f.name} ({f.bin})" for f in available_farms]
                                selected_farm_option = st.selectbox("–•–æ–∑—è–π—Å—Ç–≤–æ", farm_options)

                                if selected_farm_option:
                                    farm_id_to_add = int(selected_farm_option.split(" - ")[0])
                                    farm_to_add = next((f for f in available_farms if f.id == farm_id_to_add), None)
                                else:
                                    farm_to_add = None

                        with col2:
                            role_to_add = st.selectbox(
                                "–†–æ–ª—å –≤ —Ö–æ–∑—è–π—Å—Ç–≤–µ",
                                options=["viewer", "manager", "admin"],
                                format_func=lambda x: {
                                    "admin": "üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä (–ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø)",
                                    "manager": "üëî –ú–µ–Ω–µ–¥–∂–µ—Ä (—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)",
                                    "viewer": "üëÅÔ∏è –ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å (—Ç–æ–ª—å–∫–æ –ø—Ä–æ—Å–º–æ—Ç—Ä)"
                                }[x]
                            )

                        with col3:
                            set_as_primary = st.checkbox(
                                "–°–¥–µ–ª–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–º",
                                value=len(current_assignments) == 0,  # –ü–µ—Ä–≤–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –≤—Å–µ–≥–¥–∞ –æ—Å–Ω–æ–≤–Ω–æ–µ
                                help="–û—Å–Ω–æ–≤–Ω–æ–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"
                            )

                        add_farm_submitted = st.form_submit_button(
                            "‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø",
                            type="primary",
                            use_container_width=True
                        )

                        if add_farm_submitted and farm_to_add:
                            try:
                                # –ï—Å–ª–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–µ - —É–±–∏—Ä–∞–µ–º is_primary —É –¥—Ä—É–≥–∏—Ö
                                if set_as_primary:
                                    db.query(UserFarm).filter(
                                        UserFarm.user_id == user_obj.id
                                    ).update({"is_primary": False})

                                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ
                                new_uf = UserFarm(
                                    user_id=user_obj.id,
                                    farm_id=farm_to_add.id,
                                    role=role_to_add,
                                    is_primary=set_as_primary
                                )

                                db.add(new_uf)
                                db.commit()

                                log_action(
                                    db, current_user['id'], "create", "user_farm", new_uf.id,
                                    f"Assigned {user_obj.username} to {farm_to_add.name} as {role_to_add}"
                                )

                                st.success(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_obj.username} –¥–æ–±–∞–≤–ª–µ–Ω –≤ {farm_to_add.name}")
                                st.rerun()

                            except Exception as e:
                                db.rollback()
                                st.error(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

    # ============================================================================
    # –í–ö–õ–ê–î–ö–ê: –ñ–£–†–ù–ê–õ –î–ï–ô–°–¢–í–ò–ô
    # ============================================================================
    with tabs[3]:
        st.markdown("### üìú –ñ—É—Ä–Ω–∞–ª –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

        logs = db.query(AuditLog, User).join(User).order_by(AuditLog.created_at.desc()).limit(100).all()

        if logs:
            data = []
            for log, user in logs:
                data.append({
                    "–î–∞—Ç–∞": log.created_at.strftime("%Y-%m-%d %H:%M:%S"),
                    "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å": user.username,
                    "–î–µ–π—Å—Ç–≤–∏–µ": log.action,
                    "–¢–∏–ø": log.entity_type or "-",
                    "ID": log.entity_id or "-",
                    "–î–µ—Ç–∞–ª–∏": log.details or "-"
                })

            df = pd.DataFrame(data)
            st.dataframe(df, use_container_width=True, hide_index=True)

            # –≠–∫—Å–ø–æ—Ä—Ç
            csv = df.to_csv(index=False).encode('utf-8-sig')
            st.download_button(
                "üì• –°–∫–∞—á–∞—Ç—å –∂—É—Ä–Ω–∞–ª (CSV)",
                csv,
                "audit_log.csv",
                "text/csv"
            )
        else:
            st.info("üì≠ –ñ—É—Ä–Ω–∞–ª –ø—É—Å—Ç")

    # ============================================================================
    # –í–ö–õ–ê–î–ö–ê: –ù–ê–°–¢–†–û–ô–ö–ò
    # ============================================================================
    with tabs[4]:
        st.markdown("### ‚öôÔ∏è –°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")

        st.info("üöß –†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

        st.markdown("**–ü–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è:**")
        st.markdown("- –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        st.markdown("- –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö")
        st.markdown("- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
        st.markdown("- –°–∏—Å—Ç–µ–º–Ω—ã–µ –ª–æ–≥–∏")

finally:
    db.close()

# Sidebar
with st.sidebar:
    st.markdown(f"### üë§ {get_user_display_name()}")
    st.markdown(f"**–†–æ–ª—å:** {current_user['role']}")

    st.markdown("---")
    st.markdown("### üìä –ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    st.metric("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", total_users)
    st.metric("–•–æ–∑—è–π—Å—Ç–≤", total_farms)
