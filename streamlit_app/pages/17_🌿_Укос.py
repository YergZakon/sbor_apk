"""
Mowing - –£—á–µ—Ç —É–∫–æ—Å–∞ –º–Ω–æ–≥–æ–ª–µ—Ç–Ω–∏—Ö —Ç—Ä–∞–≤
"""
import streamlit as st
import pandas as pd
from datetime import date
from pathlib import Path
import sys
sys.path.append(str(Path(__file__).parent.parent))

from modules.database import get_db, Farm, Field, Operation, MowingDetails, Machinery, Implements
from modules.auth import require_auth, require_farm_binding, filter_query_by_farm, get_user_display_name, get_current_user, is_admin
from utils.reference_loader import load_crops, load_tractors

st.set_page_config(page_title="–£–∫–æ—Å —Ç—Ä–∞–≤", page_icon="üåø", layout="wide")
require_auth()
require_farm_binding()

st.title("üåø –£—á–µ—Ç —É–∫–æ—Å–∞ –º–Ω–æ–≥–æ–ª–µ—Ç–Ω–∏—Ö —Ç—Ä–∞–≤")
st.caption(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: **{get_user_display_name()}**")

db = next(get_db())

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤
crops_ref = load_crops()
tractors_ref = load_tractors()

# –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∫–æ—Ä–º–æ–≤—ã–µ –∫—É–ª—å—Ç—É—Ä—ã –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞
forage_crops = {}
if crops_ref:
    forage_keywords = ['–ª—é—Ü–µ—Ä–Ω–∞', '—ç—Å–ø–∞—Ä—Ü–µ—Ç', '–¥–æ–Ω–Ω–∏–∫', '–∫–ª–µ–≤–µ—Ä', '–∫–æ—Å—Ç–µ—Ä', '–∂–∏—Ç–Ω—è–∫', '—Ç—Ä–∞–≤']
    for crop_name, crop_data in crops_ref.items():
        crop_lower = crop_name.lower()
        if any(keyword in crop_lower for keyword in forage_keywords):
            forage_crops[crop_name] = crop_data

user = get_current_user()
farm = db.query(Farm).first() if is_admin() else db.query(Farm).filter(Farm.id == user.get("farm_id")).first()

if not farm:
    st.warning("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ!")
    st.stop()

fields = filter_query_by_farm(db.query(Field), Field).all()
if not fields:
    st.warning("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –ø–æ–ª—è!")
    st.stop()

tab1, tab2 = st.tabs(["üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", "üìä –ò—Å—Ç–æ—Ä–∏—è"])

with tab1:
    st.subheader("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É–∫–æ—Å–∞")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —É–∫–æ—Å–æ–≤ –î–û —Ñ–æ—Ä–º—ã (–¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–≤—è–∑—ã–≤–∞–Ω–∏—è pickup —Å mowing)
    all_prev_mowings = db.query(Operation, MowingDetails, Field).join(
        MowingDetails, Operation.id == MowingDetails.operation_id
    ).join(
        Field, Operation.field_id == Field.id
    ).filter(
        Operation.operation_type == "mowing",
        MowingDetails.harvest_phase == "mowing",
        Field.farm_id == farm.id
    ).order_by(Operation.operation_date.desc()).all()

    with st.form("mowing_form"):
        col1, col2 = st.columns(2)

        with col1:
            field_options = {f"{f.field_code} - {f.name}": f for f in fields}
            selected_field = field_options[st.selectbox("–ü–æ–ª–µ *", list(field_options.keys()))]

            operation_date = st.date_input("–î–∞—Ç–∞ *", value=date.today())
            end_date = st.date_input("–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è", value=None, help="–î–ª—è –º–Ω–æ–≥–æ–¥–Ω–µ–≤–Ω—ã—Ö —Ä–∞–±–æ—Ç")

            # –ö—É–ª—å—Ç—É—Ä–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π crops.json
            if forage_crops:
                crop = st.selectbox(
                    "–ö—É–ª—å—Ç—É—Ä–∞ *",
                    options=list(forage_crops.keys()),
                    help="–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä–º–æ–≤—É—é –∫—É–ª—å—Ç—É—Ä—É"
                )
            else:
                crop = st.text_input("–ö—É–ª—å—Ç—É—Ä–∞ *", placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –õ—é—Ü–µ—Ä–Ω–∞")

            # –ù–æ–º–µ—Ä —É–∫–æ—Å–∞
            mowing_number = st.selectbox(
                "–ù–æ–º–µ—Ä —É–∫–æ—Å–∞ *",
                options=[1, 2, 3, 4],
                help="–ö–∞–∫–æ–π –ø–æ —Å—á–µ—Ç—É —É–∫–æ—Å –≤ —ç—Ç–æ–º —Å–µ–∑–æ–Ω–µ"
            )

        with col2:
            area_processed = st.number_input(
                "–ü–ª–æ—â–∞–¥—å (–≥–∞) *",
                min_value=0.1,
                max_value=selected_field.area_ha,
                value=selected_field.area_ha,
                step=0.1
            )

            # –§–∞–∑–∞ —É–±–æ—Ä–∫–∏
            harvest_phase = st.selectbox(
                "–§–∞–∑–∞ —É–±–æ—Ä–∫–∏ *",
                options=["–£–∫–æ—Å (—Å–∫–∞—à–∏–≤–∞–Ω–∏–µ)", "–ü–æ–¥–±–æ—Ä –≤–∞–ª–∫–æ–≤"],
                help="–£–∫–æ—Å = —Å–∫–∞—à–∏–≤–∞–Ω–∏–µ –∏ —É–∫–ª–∞–¥–∫–∞ –≤ –≤–∞–ª–∫–∏. –ü–æ–¥–±–æ—Ä = –ø–æ–¥–±–æ—Ä –≤—ã—Å—É—à–µ–Ω–Ω—ã—Ö –≤–∞–ª–∫–æ–≤"
            )

            harvest_phase_code = "mowing" if harvest_phase == "–£–∫–æ—Å (—Å–∫–∞—à–∏–≤–∞–Ω–∏–µ)" else "pickup"

            # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ–¥–±–æ—Ä, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —Å–≤—è–∑–∞–Ω–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é —É–∫–æ—Å–∞
            linked_operation_id = None
            if harvest_phase_code == "pickup" and all_prev_mowings:
                # –§–∏–ª—å—Ç—Ä—É–µ–º —É–∫–æ—Å—ã –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –ø–æ–ª—é –∏ –Ω–æ–º–µ—Ä—É —É–∫–æ—Å–∞
                filtered_mowings = [
                    (op, md, f) for op, md, f in all_prev_mowings
                    if f.id == selected_field.id and md.mowing_number == mowing_number
                ]

                if filtered_mowings:
                    prev_options = {
                        f"{op.operation_date.strftime('%Y-%m-%d')} - {md.crop}": op.id
                        for op, md, f in filtered_mowings
                    }
                    selected_prev = st.selectbox(
                        "–°–≤—è–∑–∞–Ω–Ω—ã–π —É–∫–æ—Å (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)",
                        options=["–ù–µ —É–∫–∞–∑–∞–Ω"] + list(prev_options.keys()),
                        help="–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é —É–∫–æ—Å–∞, –≤–∞–ª–∫–∏ –∫–æ—Ç–æ—Ä–æ–π –ø–æ–¥–±–∏—Ä–∞–µ—Ç–µ"
                    )
                    if selected_prev != "–ù–µ —É–∫–∞–∑–∞–Ω":
                        linked_operation_id = prev_options[selected_prev]

        st.markdown("---")
        st.markdown("### üìä –£—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å –∏ –∫–∞—á–µ—Å—Ç–≤–æ")

        col3, col4, col5 = st.columns(3)

        with col3:
            yield_green_mass = st.number_input(
                "–£—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å –∑–µ–ª–µ–Ω–æ–π –º–∞—Å—Å—ã (—Ç/–≥–∞)",
                min_value=0.0,
                max_value=100.0,
                value=None,
                step=0.5,
                help="–î–ª—è —Ñ–∞–∑—ã —É–∫–æ—Å–∞"
            )

            yield_hay = st.number_input(
                "–£—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å —Å–µ–Ω–∞ (—Ç/–≥–∞)",
                min_value=0.0,
                max_value=20.0,
                value=None,
                step=0.1,
                help="–î–ª—è —Ñ–∞–∑—ã –ø–æ–¥–±–æ—Ä–∞ (–ø–æ—Å–ª–µ —Å—É—à–∫–∏)"
            )

        with col4:
            moisture_pct = st.number_input(
                "–í–ª–∞–∂–Ω–æ—Å—Ç—å (%)",
                min_value=0.0,
                max_value=100.0,
                value=None,
                step=1.0,
                help="–í–ª–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏ —É–∫–æ—Å–µ/–ø–æ–¥–±–æ—Ä–µ"
            )

            quality_class = st.selectbox(
                "–ö–ª–∞—Å—Å –∫–∞—á–µ—Å—Ç–≤–∞",
                options=["–ù–µ —É–∫–∞–∑–∞–Ω", "1-–π –∫–ª–∞—Å—Å", "2-–π –∫–ª–∞—Å—Å", "3-–π –∫–ª–∞—Å—Å", "–ù–µ–∫–ª–∞—Å—Å–Ω–æ–µ"],
                help="–ö–ª–∞—Å—Å –∫–∞—á–µ—Å—Ç–≤–∞ —Å–µ–Ω–∞"
            )

        with col5:
            plant_height = st.number_input(
                "–í—ã—Å–æ—Ç–∞ —Ä–∞—Å—Ç–µ–Ω–∏–π (—Å–º)",
                min_value=0.0,
                max_value=200.0,
                value=None,
                step=5.0,
                help="–í—ã—Å–æ—Ç–∞ —Ä–∞—Å—Ç–µ–Ω–∏–π –ø—Ä–∏ —É–∫–æ—Å–µ"
            )

            stubble_height = st.number_input(
                "–í—ã—Å–æ—Ç–∞ —Å—Ä–µ–∑–∞ (—Å–º)",
                min_value=0.0,
                max_value=50.0,
                value=None,
                step=1.0,
                help="–í—ã—Å–æ—Ç–∞ —Å—Ç–µ—Ä–Ω–∏ –ø–æ—Å–ª–µ —É–∫–æ—Å–∞"
            )

        st.markdown("---")
        st.markdown("### üöú –¢–µ—Ö–Ω–∏–∫–∞")

        machinery_list = filter_query_by_farm(db.query(Machinery).filter(Machinery.status == 'active'), Machinery).all()
        implements_list = filter_query_by_farm(db.query(Implements).filter(Implements.status == 'active'), Implements).all()

        # Pre-load machinery attributes
        tractors = [m for m in machinery_list if m.machinery_type == 'tractor']
        self_propelled_mowers = [m for m in machinery_list if m.machinery_type == 'self_propelled_mower']

        machinery_options = {}
        machinery_details = {}

        for m in tractors + self_propelled_mowers:
            m_brand = m.brand or ''
            m_model = m.model
            m_year = m.year
            m_type = m.machinery_type

            type_label = "–¢—Ä–∞–∫—Ç–æ—Ä" if m_type == 'tractor' else "–°–∞–º–æ—Ö–æ–¥–Ω–∞—è –∫–æ—Å–∏–ª–∫–∞"
            display_text = f"{m_brand} {m_model} ({type_label})"
            machinery_options[display_text] = (m.id, m_year, m_type)

            ref_key = f"{m_brand} {m_model}"
            if ref_key in tractors_ref:
                machinery_details[display_text] = tractors_ref[ref_key]

        # Pre-load implement attributes (–∫–æ—Å–∏–ª–∫–∏, –ø—Ä–µ—Å—Å-–ø–æ–¥–±–æ—Ä—â–∏–∫–∏)
        mowers = [impl for impl in implements_list if impl.implement_type in ['mower', 'baler']]
        implement_options = {}
        if mowers:
            for i in mowers:
                impl_type_label = "–ö–æ—Å–∏–ª–∫–∞" if i.implement_type == 'mower' else "–ü—Ä–µ—Å—Å-–ø–æ–¥–±–æ—Ä—â–∏–∫"
                display_text = f"{i.brand or ''} {i.model} ({impl_type_label})"
                implement_options[display_text] = (i.id, i.year)

        col_tech1, col_tech2, col_tech3 = st.columns(3)

        with col_tech1:
            selected_machinery_display = st.selectbox("–¢–µ—Ö–Ω–∏–∫–∞", ["–ù–µ –≤—ã–±—Ä–∞–Ω–æ"] + list(machinery_options.keys()))

            if selected_machinery_display != "–ù–µ –≤—ã–±—Ä–∞–Ω–æ":
                selected_machinery_id, machine_year, machinery_type = machinery_options[selected_machinery_display]

                if selected_machinery_display in machinery_details:
                    ref_data = machinery_details[selected_machinery_display]
                    st.success(f"üí™ {ref_data['–º–æ—â–Ω–æ—Å—Ç—å_–ª—Å']} –ª.—Å. | üè∑Ô∏è {ref_data['–∫–ª–∞—Å—Å']} | üöú {ref_data['—Ç–∏–ø']}")
                else:
                    st.caption(f"–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞: {machine_year or '–Ω–µ —É–∫–∞–∑–∞–Ω'}")
            else:
                selected_machinery_id = None
                machine_year = None
                machinery_type = None

        with col_tech2:
            # –ê–≥—Ä–µ–≥–∞—Ç –Ω—É–∂–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç—Ä–∞–∫—Ç–æ—Ä–æ–≤
            needs_implement = machinery_type == 'tractor'
            if needs_implement:
                selected_implement_display = st.selectbox("–ê–≥—Ä–µ–≥–∞—Ç", ["–ù–µ –≤—ã–±—Ä–∞–Ω–æ"] + list(implement_options.keys()))

                if selected_implement_display != "–ù–µ –≤—ã–±—Ä–∞–Ω–æ":
                    selected_implement_id, implement_year = implement_options[selected_implement_display]
                else:
                    selected_implement_id = None
                    implement_year = None
            else:
                if machinery_type == 'self_propelled_mower':
                    st.info("‚úÖ –°–∞–º–æ—Ö–æ–¥–Ω–∞—è –∫–æ—Å–∏–ª–∫–∞ - –∞–≥—Ä–µ–≥–∞—Ç –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
                selected_implement_id = None
                implement_year = None

        with col_tech3:
            work_speed_kmh = st.number_input("–°–∫–æ—Ä–æ—Å—Ç—å (–∫–º/—á)", min_value=0.0, value=None, step=0.5)

        notes = st.text_area("–ü—Ä–∏–º–µ—á–∞–Ω–∏—è")

        submitted = st.form_submit_button("‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å", use_container_width=True, type="primary")

        if submitted:
            try:
                operation = Operation(
                    farm_id=farm.id,
                    field_id=selected_field.id,
                    operation_type="mowing",
                    operation_date=operation_date,
                    end_date=end_date,
                    area_processed_ha=area_processed,
                    machine_id=selected_machinery_id,
                    implement_id=selected_implement_id,
                    machine_year=machine_year,
                    implement_year=implement_year,
                    work_speed_kmh=work_speed_kmh,
                    notes=notes
                )
                db.add(operation)
                db.flush()

                mowing_details = MowingDetails(
                    operation_id=operation.id,
                    crop=crop,
                    mowing_number=mowing_number,
                    yield_green_mass_t_ha=yield_green_mass,
                    yield_hay_t_ha=yield_hay,
                    moisture_pct=moisture_pct,
                    quality_class=quality_class if quality_class != "–ù–µ —É–∫–∞–∑–∞–Ω" else None,
                    harvest_phase=harvest_phase_code,
                    linked_operation_id=linked_operation_id,
                    plant_height_cm=plant_height,
                    stubble_height_cm=stubble_height
                )
                db.add(mowing_details)
                db.commit()

                phase_msg = "—É–∫–æ—Å" if harvest_phase_code == "mowing" else "–ø–æ–¥–±–æ—Ä –≤–∞–ª–∫–æ–≤"
                st.success(f"‚úÖ {phase_msg.capitalize()} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {area_processed} –≥–∞")
                st.balloons()
                st.rerun()

            except Exception as e:
                db.rollback()
                st.error(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

with tab2:
    st.subheader("–ò—Å—Ç–æ—Ä–∏—è —É–∫–æ—Å–æ–≤")

    operations = db.query(Operation, Field, MowingDetails).join(Field).outerjoin(
        MowingDetails, Operation.id == MowingDetails.operation_id
    ).filter(
        Operation.operation_type == "mowing",
        Field.farm_id == farm.id
    ).order_by(Operation.operation_date.desc()).all()

    if operations:
        data = []
        for op, field, md in operations:
            phase_label = {"mowing": "–£–∫–æ—Å", "pickup": "–ü–æ–¥–±–æ—Ä"}.get(md.harvest_phase if md else None, "-")

            data.append({
                '–î–∞—Ç–∞': op.operation_date.strftime('%Y-%m-%d'),
                '–ü–æ–ª–µ': field.name or field.field_code,
                '–ö—É–ª—å—Ç—É—Ä–∞': md.crop if md else '-',
                '–£–∫–æ—Å ‚Ññ': md.mowing_number if md else '-',
                '–§–∞–∑–∞': phase_label,
                '–ó–µ–ª. –º–∞—Å—Å–∞ (—Ç/–≥–∞)': f"{md.yield_green_mass_t_ha:.1f}" if (md and md.yield_green_mass_t_ha) else '-',
                '–°–µ–Ω–æ (—Ç/–≥–∞)': f"{md.yield_hay_t_ha:.1f}" if (md and md.yield_hay_t_ha) else '-',
                '–í–ª–∞–∂–Ω–æ—Å—Ç—å (%)': f"{md.moisture_pct:.0f}" if (md and md.moisture_pct) else '-',
                '–ö–ª–∞—Å—Å': md.quality_class if (md and md.quality_class) else '-',
                '–ü–ª–æ—â–∞–¥—å (–≥–∞)': op.area_processed_ha
            })

        st.dataframe(pd.DataFrame(data), use_container_width=True, hide_index=True)

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        col1, col2, col3, col4 = st.columns(4)
        with col1:
            st.metric("–í—Å–µ–≥–æ –æ–ø–µ—Ä–∞—Ü–∏–π", len(operations))
        with col2:
            total_area = sum([op.area_processed_ha for op, _, _ in operations if op.area_processed_ha])
            st.metric("–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤—Å–µ–≥–æ", f"{total_area:,.1f} –≥–∞")
        with col3:
            mowing_ops = [md for _, _, md in operations if md and md.harvest_phase == "mowing"]
            avg_green = sum([md.yield_green_mass_t_ha for md in mowing_ops if md.yield_green_mass_t_ha]) / len(mowing_ops) if mowing_ops else 0
            st.metric("–°—Ä. –∑–µ–ª. –º–∞—Å—Å–∞", f"{avg_green:.1f} —Ç/–≥–∞")
        with col4:
            pickup_ops = [md for _, _, md in operations if md and md.harvest_phase == "pickup"]
            avg_hay = sum([md.yield_hay_t_ha for md in pickup_ops if md.yield_hay_t_ha]) / len(pickup_ops) if pickup_ops else 0
            st.metric("–°—Ä. —É—Ä–æ–∂. —Å–µ–Ω–∞", f"{avg_hay:.1f} —Ç/–≥–∞")
    else:
        st.info("üì≠ –ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞")

# Sidebar
with st.sidebar:
    st.markdown("### ‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞")
    st.info("""
    **–£—á–µ—Ç —É–∫–æ—Å–∞** –ø–æ–∑–≤–æ–ª—è–µ—Ç:
    - –†–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —É–∫–æ—Å—ã –º–Ω–æ–≥–æ–ª–µ—Ç–Ω–∏—Ö —Ç—Ä–∞–≤
    - –£—á–∏—Ç—ã–≤–∞—Ç—å –¥–≤—É—Ö—Ñ–∞–∑–Ω—É—é —É–±–æ—Ä–∫—É (—É–∫–æ—Å ‚Üí –ø–æ–¥–±–æ—Ä)
    - –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ —Å–µ–Ω–∞
    - –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å –ø–æ —É–∫–æ—Å–∞–º

    **–§–∞–∑—ã —É–±–æ—Ä–∫–∏:**
    - **–£–∫–æ—Å** - —Å–∫–∞—à–∏–≤–∞–Ω–∏–µ –∏ —É–∫–ª–∞–¥–∫–∞ –≤ –≤–∞–ª–∫–∏
    - **–ü–æ–¥–±–æ—Ä** - –ø–æ–¥–±–æ—Ä –≤—ã—Å—É—à–µ–Ω–Ω—ã—Ö –≤–∞–ª–∫–æ–≤

    **–¢–∏–ø–∏—á–Ω—ã–µ –∫—É–ª—å—Ç—É—Ä—ã:**
    –õ—é—Ü–µ—Ä–Ω–∞, –≠—Å–ø–∞—Ä—Ü–µ—Ç, –î–æ–Ω–Ω–∏–∫, –ö–ª–µ–≤–µ—Ä, –ö–æ—Å—Ç–µ—Ä, –ñ–∏—Ç–Ω—è–∫
    """)
