"""
Desiccation - –£—á–µ—Ç –¥–µ—Å–∏–∫–∞—Ü–∏–∏ (–ø—Ä–µ–¥—É–±–æ—Ä–æ—á–Ω–æ–≥–æ –ø–æ–¥—Å—É—à–∏–≤–∞–Ω–∏—è)
"""
import streamlit as st
import pandas as pd
import json
from datetime import date
from pathlib import Path
import sys
sys.path.append(str(Path(__file__).parent.parent))

from modules.database import get_db, Farm, Field, Operation, DesiccationDetails, Machinery, Implements
from modules.auth import require_auth, require_farm_binding, filter_query_by_farm, get_user_display_name, get_current_user, is_admin

st.set_page_config(page_title="–î–µ—Å–∏–∫–∞—Ü–∏—è", page_icon="üíß", layout="wide")
require_auth()
require_farm_binding()

st.title("üíß –£—á–µ—Ç –¥–µ—Å–∏–∫–∞—Ü–∏–∏")
st.caption(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: **{get_user_display_name()}**")

db = next(get_db())

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ —Ç—Ä–∞–∫—Ç–æ—Ä–æ–≤
tractors_ref = {}
try:
    tractors_path = Path('data/tractors.json')
    if tractors_path.exists():
        with open(tractors_path, 'r', encoding='utf-8') as f:
            tractors_ref = json.load(f)
except Exception as e:
    pass  # –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –æ–ø—Ü–∏–æ–Ω–∞–ª–µ–Ω

user = get_current_user()
farm = db.query(Farm).first() if is_admin() else db.query(Farm).filter(Farm.id == user.get("farm_id")).first()

if not farm:
    st.warning("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ!")
    st.stop()

fields = filter_query_by_farm(db.query(Field), Field).all()
if not fields:
    st.warning("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –ø–æ–ª—è!")
    st.stop()

tab1, tab2 = st.tabs(["üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", "üìä –ò—Å—Ç–æ—Ä–∏—è"])

with tab1:
    st.subheader("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–µ—Å–∏–∫–∞—Ü–∏–∏")

    with st.form("desiccation_form"):
        col1, col2 = st.columns(2)

        with col1:
            field_options = {f"{f.field_code} - {f.name}": f for f in fields}
            selected_field = field_options[st.selectbox("–ü–æ–ª–µ *", list(field_options.keys()))]

            operation_date = st.date_input("–î–∞—Ç–∞ *", value=date.today())
            end_date = st.date_input("–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è", value=None)

            product_name = st.text_input("–ü—Ä–µ–ø–∞—Ä–∞—Ç *", placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –†–∞—É–Ω–¥–∞–ø")
            active_ingredient = st.text_input("–î–µ–π—Å—Ç–≤—É—é—â–µ–µ –≤–µ—â–µ—Å—Ç–≤–æ", placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ì–ª–∏—Ñ–æ—Å–∞—Ç")

        with col2:
            area_processed = st.number_input("–ü–ª–æ—â–∞–¥—å (–≥–∞) *", min_value=0.1, max_value=selected_field.area_ha, value=selected_field.area_ha, step=0.1)
            rate_per_ha = st.number_input("–ù–æ—Ä–º–∞ —Ä–∞—Å—Ö–æ–¥–∞ (–ª/–≥–∞)", min_value=0.0, value=2.0, step=0.1)
            target_moisture_percent = st.number_input("–¶–µ–ª–µ–≤–∞—è –≤–ª–∞–∂–Ω–æ—Å—Ç—å (%)", min_value=0.0, max_value=100.0, value=14.0, step=0.5)
            application_method = st.selectbox("–°–ø–æ—Å–æ–± –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è", ["–ù–∞–∑–µ–º–Ω–æ–µ –æ–ø—Ä—ã—Å–∫–∏–≤–∞–Ω–∏–µ", "–ê–≤–∏–∞—Ü–∏–æ–Ω–Ω–æ–µ –æ–ø—Ä—ã—Å–∫–∏–≤–∞–Ω–∏–µ"])

        st.markdown("---")
        st.markdown("### üöú –¢–µ—Ö–Ω–∏–∫–∞")

        machinery_list = filter_query_by_farm(db.query(Machinery).filter(Machinery.status == 'active'), Machinery).all()
        implements_list = filter_query_by_farm(db.query(Implements).filter(Implements.status == 'active'), Implements).all()

        # Pre-load machinery attributes
        spray_machinery = [m for m in machinery_list if m.machinery_type in ['tractor', 'self_propelled_sprayer', 'drone']]
        machinery_options = {}
        machinery_details = {}  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π —Ç–µ—Ö–Ω–∏–∫–∏

        if spray_machinery:
            for m in spray_machinery:
                # Eagerly access attributes while still in session
                m_brand = m.brand or ''
                m_model = m.model
                m_year = m.year
                m_type = m.machinery_type

                display_text = f"{m_brand} {m_model}"
                machinery_options[display_text] = (m.id, m_year, m_type)

                # –ò—â–µ–º —Ç–µ—Ö–Ω–∏–∫—É –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ
                ref_key = f"{m_brand} {m_model}"
                if ref_key in tractors_ref:
                    machinery_details[display_text] = tractors_ref[ref_key]

        # Pre-load implement attributes
        sprayers = [impl for impl in implements_list if impl.implement_type == 'sprayer_trailer']
        implement_options = {}
        if sprayers:
            for i in sprayers:
                # Eagerly access attributes while still in session
                display_text = f"{i.brand or ''} {i.model}"
                implement_options[display_text] = (i.id, i.year)

        col_tech1, col_tech2, col_tech3 = st.columns(3)

        with col_tech1:
            selected_machinery_display = st.selectbox("–¢–µ—Ö–Ω–∏–∫–∞", ["–ù–µ –≤—ã–±—Ä–∞–Ω–æ"] + list(machinery_options.keys()))

            if selected_machinery_display != "–ù–µ –≤—ã–±—Ä–∞–Ω–æ":
                selected_machinery_id, machine_year, machinery_type = machinery_options[selected_machinery_display]

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞
                if selected_machinery_display in machinery_details:
                    ref_data = machinery_details[selected_machinery_display]
                    st.success(f"üí™ {ref_data['–º–æ—â–Ω–æ—Å—Ç—å_–ª—Å']} –ª.—Å. | üè∑Ô∏è {ref_data['–∫–ª–∞—Å—Å']} | üöú {ref_data['—Ç–∏–ø']}")

                    if ref_data.get('–ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ'):
                        applications = ', '.join(ref_data['–ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ'])
                        st.info(f"üîß –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ: {applications}")
                else:
                    st.caption(f"–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞: {machine_year or '–Ω–µ —É–∫–∞–∑–∞–Ω'}")
            else:
                selected_machinery_id = None
                machine_year = None
                machinery_type = None

        with col_tech2:
            needs_implement = selected_machinery_id and machinery_type == 'tractor'
            if needs_implement:
                selected_implement_display = st.selectbox("–û–ø—Ä—ã—Å–∫–∏–≤–∞—Ç–µ–ª—å", ["–ù–µ –≤—ã–±—Ä–∞–Ω–æ"] + list(implement_options.keys()))

                if selected_implement_display != "–ù–µ –≤—ã–±—Ä–∞–Ω–æ":
                    selected_implement_id, implement_year = implement_options[selected_implement_display]
                else:
                    selected_implement_id = None
                    implement_year = None
            else:
                selected_implement_id = None
                implement_year = None
                st.info("–ê–≥—Ä–µ–≥–∞—Ç –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")

        with col_tech3:
            work_speed_kmh = st.number_input("–°–∫–æ—Ä–æ—Å—Ç—å (–∫–º/—á)", min_value=0.0, value=None, step=0.5)

        notes = st.text_area("–ü—Ä–∏–º–µ—á–∞–Ω–∏—è")

        submitted = st.form_submit_button("‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å", use_container_width=True, type="primary")

        if submitted:
            if not product_name:
                st.error("‚ùå –£–∫–∞–∂–∏—Ç–µ –ø—Ä–µ–ø–∞—Ä–∞—Ç")
            else:
                try:
                    operation = Operation(
                        farm_id=farm.id, field_id=selected_field.id, operation_type="desiccation",
                        operation_date=operation_date, end_date=end_date, area_processed_ha=area_processed,
                        machine_id=selected_machinery_id,
                        implement_id=selected_implement_id,
                        machine_year=machine_year, implement_year=implement_year,
                        work_speed_kmh=work_speed_kmh, notes=notes
                    )
                    db.add(operation)
                    db.flush()

                    desiccation_details = DesiccationDetails(
                        operation_id=operation.id, product_name=product_name,
                        active_ingredient=active_ingredient, rate_per_ha=rate_per_ha,
                        target_moisture_percent=target_moisture_percent, application_method=application_method
                    )
                    db.add(desiccation_details)
                    db.commit()

                    st.success(f"‚úÖ –î–µ—Å–∏–∫–∞—Ü–∏—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {area_processed} –≥–∞")
                    st.balloons()
                except Exception as e:
                    db.rollback()
                    st.error(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

with tab2:
    st.subheader("–ò—Å—Ç–æ—Ä–∏—è –¥–µ—Å–∏–∫–∞—Ü–∏–π")

    operations = db.query(Operation, Field, DesiccationDetails).join(Field).outerjoin(DesiccationDetails).filter(
        Operation.operation_type == "desiccation", Field.farm_id == farm.id
    ).order_by(Operation.operation_date.desc()).all()

    if operations:
        data = [{
            '–î–∞—Ç–∞': op[0].operation_date.strftime('%Y-%m-%d'),
            '–ü–æ–ª–µ': op[1].name or op[1].field_code,
            '–ü—Ä–µ–ø–∞—Ä–∞—Ç': op[2].product_name if op[2] else '-',
            '–ù–æ—Ä–º–∞ (–ª/–≥–∞)': op[2].rate_per_ha if op[2] else '-',
            '–ü–ª–æ—â–∞–¥—å (–≥–∞)': op[0].area_processed_ha
        } for op in operations]

        st.dataframe(pd.DataFrame(data), use_container_width=True, hide_index=True)

        col1, col2 = st.columns(2)
        with col1:
            st.metric("–í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–æ–∫", len(operations))
        with col2:
            total_area = sum([op[0].area_processed_ha for op in operations if op[0].area_processed_ha])
            st.metric("–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤—Å–µ–≥–æ", f"{total_area:,.1f} –≥–∞")
    else:
        st.info("üì≠ –ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞")
