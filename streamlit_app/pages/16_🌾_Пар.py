"""
Fallow - –£—á–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞—Ä–æ–≤
"""
import streamlit as st
import pandas as pd
import json
from datetime import date
from pathlib import Path
import sys
sys.path.append(str(Path(__file__).parent.parent))

from modules.database import get_db, Farm, Field, Operation, FallowDetails, Machinery, Implements
from modules.auth import require_auth, require_farm_binding, filter_query_by_farm, get_user_display_name, get_current_user, is_admin

st.set_page_config(page_title="–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä–æ–≤", page_icon="üåæ", layout="wide")
require_auth()
require_farm_binding()

st.title("üåæ –£—á–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞—Ä–æ–≤")
st.caption(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: **{get_user_display_name()}**")

db = next(get_db())

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ —Ç—Ä–∞–∫—Ç–æ—Ä–æ–≤
tractors_ref = {}
try:
    tractors_path = Path('data/tractors.json')
    if tractors_path.exists():
        with open(tractors_path, 'r', encoding='utf-8') as f:
            tractors_ref = json.load(f)
except Exception as e:
    pass  # –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –æ–ø—Ü–∏–æ–Ω–∞–ª–µ–Ω

user = get_current_user()
farm = db.query(Farm).first() if is_admin() else db.query(Farm).filter(Farm.id == user.get("farm_id")).first()

if not farm:
    st.warning("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ!")
    st.stop()

fields = filter_query_by_farm(db.query(Field), Field).all()
if not fields:
    st.warning("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –ø–æ–ª—è!")
    st.stop()

tab1, tab2 = st.tabs(["üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", "üìä –ò—Å—Ç–æ—Ä–∏—è"])

with tab1:
    st.subheader("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞—Ä–æ–≤")

    with st.form("fallow_form"):
        col1, col2 = st.columns(2)

        with col1:
            field_options = {f"{f.field_code} - {f.name}": f for f in fields}
            selected_field = field_options[st.selectbox("–ü–æ–ª–µ *", list(field_options.keys()))]

            operation_date = st.date_input("–î–∞—Ç–∞ *", value=date.today())
            end_date = st.date_input("–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è", value=None)

        with col2:
            area_processed = st.number_input("–ü–ª–æ—â–∞–¥—å (–≥–∞) *", min_value=0.1, max_value=selected_field.area_ha, value=selected_field.area_ha, step=0.1)

            processing_depth_cm = st.number_input("–ì–ª—É–±–∏–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ (—Å–º)", min_value=0.0, value=None, step=1.0, help="–ì–ª—É–±–∏–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞—Ä–æ–≤—ã—Ö –ø–æ–ª–µ–π")

        st.markdown("---")
        st.markdown("### üöú –¢–µ—Ö–Ω–∏–∫–∞")

        machinery_list = filter_query_by_farm(db.query(Machinery).filter(Machinery.status == 'active'), Machinery).all()
        implements_list = filter_query_by_farm(db.query(Implements).filter(Implements.status == 'active'), Implements).all()

        # Pre-load machinery attributes
        tractors = [m for m in machinery_list if m.machinery_type == 'tractor']
        machinery_options = {}
        machinery_details = {}  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π —Ç–µ—Ö–Ω–∏–∫–∏

        if tractors:
            for m in tractors:
                # Eagerly access attributes while still in session
                m_brand = m.brand or ''
                m_model = m.model
                m_year = m.year

                display_text = f"{m_brand} {m_model}"
                machinery_options[display_text] = (m.id, m_year)

                # –ò—â–µ–º —Ç–µ—Ö–Ω–∏–∫—É –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ
                ref_key = f"{m_brand} {m_model}"
                if ref_key in tractors_ref:
                    machinery_details[display_text] = tractors_ref[ref_key]

        # Pre-load implement attributes
        fallow_implements = [impl for impl in implements_list if impl.implement_type in ['cultivator', 'harrow', 'disc', 'plow']]
        implement_options = {}
        if fallow_implements:
            for i in fallow_implements:
                # Eagerly access attributes while still in session
                display_text = f"{i.brand or ''} {i.model}"
                implement_options[display_text] = (i.id, i.year)

        col_tech1, col_tech2, col_tech3 = st.columns(3)

        with col_tech1:
            selected_machinery_display = st.selectbox("–¢—Ä–∞–∫—Ç–æ—Ä", ["–ù–µ –≤—ã–±—Ä–∞–Ω–æ"] + list(machinery_options.keys()))

            if selected_machinery_display != "–ù–µ –≤—ã–±—Ä–∞–Ω–æ":
                selected_machinery_id, machine_year = machinery_options[selected_machinery_display]

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞
                if selected_machinery_display in machinery_details:
                    ref_data = machinery_details[selected_machinery_display]
                    st.success(f"üí™ {ref_data['–º–æ—â–Ω–æ—Å—Ç—å_–ª—Å']} –ª.—Å. | üè∑Ô∏è {ref_data['–∫–ª–∞—Å—Å']} | üöú {ref_data['—Ç–∏–ø']}")

                    if ref_data.get('–ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ'):
                        applications = ', '.join(ref_data['–ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ'])
                        st.info(f"üîß –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ: {applications}")
                else:
                    st.caption(f"–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞: {machine_year or '–Ω–µ —É–∫–∞–∑–∞–Ω'}")
            else:
                selected_machinery_id = None
                machine_year = None

        with col_tech2:
            selected_implement_display = st.selectbox("–ê–≥—Ä–µ–≥–∞—Ç", ["–ù–µ –≤—ã–±—Ä–∞–Ω–æ"] + list(implement_options.keys()))

            if selected_implement_display != "–ù–µ –≤—ã–±—Ä–∞–Ω–æ":
                selected_implement_id, implement_year = implement_options[selected_implement_display]
            else:
                selected_implement_id = None
                implement_year = None

        with col_tech3:
            work_speed_kmh = st.number_input("–°–∫–æ—Ä–æ—Å—Ç—å (–∫–º/—á)", min_value=0.0, value=None, step=0.5)

        notes = st.text_area("–ü—Ä–∏–º–µ—á–∞–Ω–∏—è")

        submitted = st.form_submit_button("‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å", use_container_width=True, type="primary")

        if submitted:
            try:
                operation = Operation(
                    farm_id=farm.id, field_id=selected_field.id, operation_type="fallow",
                    operation_date=operation_date, end_date=end_date, area_processed_ha=area_processed,
                    machine_id=selected_machinery_id,
                    implement_id=selected_implement_id,
                    machine_year=machine_year, implement_year=implement_year,
                    work_speed_kmh=work_speed_kmh, notes=notes
                )
                db.add(operation)
                db.flush()

                fallow_details = FallowDetails(
                    operation_id=operation.id, fallow_type=None,
                    processing_depth_cm=processing_depth_cm, number_of_treatments=None
                )
                db.add(fallow_details)
                db.commit()

                st.success(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä–æ–≤ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {area_processed} –≥–∞")
                st.balloons()
            except Exception as e:
                db.rollback()
                st.error(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

with tab2:
    st.subheader("–ò—Å—Ç–æ—Ä–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞—Ä–æ–≤")

    operations = db.query(Operation, Field, FallowDetails).join(
        Field, Operation.field_id == Field.id
    ).outerjoin(
        FallowDetails, Operation.id == FallowDetails.operation_id
    ).filter(
        Operation.operation_type == "fallow", Field.farm_id == farm.id
    ).order_by(Operation.operation_date.desc()).all()

    if operations:
        data = [{
            '–î–∞—Ç–∞': op[0].operation_date.strftime('%Y-%m-%d'),
            '–ü–æ–ª–µ': op[1].name or op[1].field_code,
            '–¢–∏–ø –ø–∞—Ä–∞': {
                'black': '–ß–∏—Å—Ç—ã–π',
                'early': '–†–∞–Ω–Ω–∏–π',
                'green': '–ó–µ–ª–µ–Ω—ã–π',
                'cultivated': '–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π'
            }.get(op[2].fallow_type if op[2] else None, '-'),
            '–ì–ª—É–±–∏–Ω–∞ (—Å–º)': op[2].processing_depth_cm if op[2] else '-',
            '–û–±—Ä–∞–±–æ—Ç–æ–∫': op[2].number_of_treatments if op[2] else '-',
            '–ü–ª–æ—â–∞–¥—å (–≥–∞)': op[0].area_processed_ha
        } for op in operations]

        st.dataframe(pd.DataFrame(data), use_container_width=True, hide_index=True)

        col1, col2 = st.columns(2)
        with col1:
            st.metric("–í—Å–µ–≥–æ –æ–ø–µ—Ä–∞—Ü–∏–π", len(operations))
        with col2:
            total_area = sum([op[0].area_processed_ha for op in operations if op[0].area_processed_ha])
            st.metric("–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤—Å–µ–≥–æ", f"{total_area:,.1f} –≥–∞")
    else:
        st.info("üì≠ –ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞")
