"""
Harvest - –£—á–µ—Ç —É–±–æ—Ä–∫–∏ —É—Ä–æ–∂–∞—è
"""
import streamlit as st
import pandas as pd
import json
from datetime import datetime, date
from pathlib import Path
import plotly.express as px
import plotly.graph_objects as go

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
import sys
sys.path.append(str(Path(__file__).parent.parent))

from modules.database import get_db, Farm, Field, Operation, HarvestData, SowingDetail, Machinery, Implements
from modules.auth import (
    require_auth,
    require_farm_binding,
    filter_query_by_farm,
    get_user_display_name,
    get_current_user,
    is_admin,
    can_edit_data,
    can_delete_data
)
from modules.validators import DataValidator
from utils.formatters import format_date, format_area, format_number
from utils.charts import create_bar_chart, create_grouped_bar_chart, create_scatter_chart

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(page_title="–£–±–æ—Ä–∫–∞ —É—Ä–æ–∂–∞—è", page_icon="üöú", layout="wide")

# –¢—Ä–µ–±—É–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∏ –ø—Ä–∏–≤—è–∑–∫—É –∫ —Ö–æ–∑—è–π—Å—Ç–≤—É
require_auth()
require_farm_binding()

st.title("üöú –£—á–µ—Ç —É–±–æ—Ä–∫–∏ —É—Ä–æ–∂–∞—è")
st.caption(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: **{get_user_display_name()}**")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞
validator = DataValidator()

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ –∫—É–ª—å—Ç—É—Ä
def load_crops_reference():
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ –∫—É–ª—å—Ç—É—Ä –∏–∑ JSON"""
    reference_path = Path(__file__).parent.parent / "data" / "crops.json"
    try:
        with open(reference_path, "r", encoding="utf-8") as f:
            return json.load(f)
    except FileNotFoundError:
        st.error("–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –∫—É–ª—å—Ç—É—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return {}

crops_ref = load_crops_reference()

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ –∫–æ–º–±–∞–π–Ω–æ–≤
combines_ref = {}
try:
    combines_path = Path(__file__).parent.parent / "data" / "combines.json"
    if combines_path.exists():
        with open(combines_path, 'r', encoding='utf-8') as f:
            combines_ref = json.load(f)
except Exception as e:
    pass  # –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –æ–ø—Ü–∏–æ–Ω–∞–ª–µ–Ω

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
db = next(get_db())

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ö–æ–∑—è–π—Å—Ç–≤–∞
user = get_current_user()

if is_admin():
    farm = db.query(Farm).first()
else:
    user_farm_id = user.get("farm_id") if user else None
    farm = db.query(Farm).filter(Farm.id == user_farm_id).first() if user_farm_id else None

if not farm:
    st.warning("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∏–º–ø–æ—Ä—Ç–∞!")
    st.stop()

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª–µ–π
fields = filter_query_by_farm(db.query(Field), Field).all()
if not fields:
    st.warning("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –ø–æ–ª—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ '–ü–æ–ª—è'!")
    st.stop()

# –¢–∞–±—ã
tab1, tab2, tab3, tab4 = st.tabs(["üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É–±–æ—Ä–∫–∏", "üìä –ò—Å—Ç–æ—Ä–∏—è —É–±–æ—Ä–∫–∏", "üìà –ê–Ω–∞–ª–∏–∑ —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç–∏", "üéØ –¶–µ–ª–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏"])

# ========================================
# TAB 1: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É–±–æ—Ä–∫–∏
# ========================================
with tab1:
    st.subheader("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É–±–æ—Ä–∫–∏ —É—Ä–æ–∂–∞—è")

    with st.form("harvest_form"):
        col1, col2 = st.columns(2)

        with col1:
            # –í—ã–±–æ—Ä –ø–æ–ª—è
            field_options = {f"{f.field_code} - {f.name}": f for f in fields}
            selected_field_name = st.selectbox(
                "–ü–æ–ª–µ *",
                options=list(field_options.keys()),
                help="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É–±–æ—Ä–∫–∏"
            )
            selected_field = field_options[selected_field_name]

            # –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ —É–±–æ—Ä–∫–∏
            harvest_date = st.date_input(
                "–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ —É–±–æ—Ä–∫–∏ *",
                value=date.today(),
                help="–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ —É–±–æ—Ä–∫–∏ —É—Ä–æ–∂–∞—è"
            )

            # –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è —É–±–æ—Ä–∫–∏
            end_date = st.date_input(
                "–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è —É–±–æ—Ä–∫–∏",
                value=None,
                help="–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è —É–±–æ—Ä–∫–∏ (–¥–ª—è –º–Ω–æ–≥–æ–¥–Ω–µ–≤–Ω—ã—Ö —Ä–∞–±–æ—Ç)"
            )

            # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–µ–≤–æ–≤ –Ω–∞ —ç—Ç–æ–º –ø–æ–ª–µ
            sowings = db.query(Operation, SowingDetail).join(
                SowingDetail, Operation.id == SowingDetail.operation_id
            ).filter(
                Operation.field_id == selected_field.id,
                Operation.operation_type == "sowing"
            ).order_by(Operation.operation_date.desc()).all()

            if sowings:
                sowing_options = {}
                for op, sowing in sowings:
                    key = f"{sowing.crop} - {sowing.variety} (–ø–æ—Å–µ–≤ {format_date(op.operation_date)})"
                    sowing_options[key] = (op, sowing)

                selected_sowing_name = st.selectbox(
                    "–ü–æ—Å–µ–≤ *",
                    options=list(sowing_options.keys()),
                    help="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Å–µ–≤ –¥–ª—è —É—á–µ—Ç–∞ —É—Ä–æ–∂–∞—è"
                )
                _, selected_sowing = sowing_options[selected_sowing_name]
                crop_name = selected_sowing.crop
                variety_name = selected_sowing.variety
            else:
                st.warning("‚ö†Ô∏è –ù–∞ —ç—Ç–æ–º –ø–æ–ª–µ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å–µ–≤–æ–≤. –£–∫–∞–∂–∏—Ç–µ –∫—É–ª—å—Ç—É—Ä—É –≤—Ä—É—á–Ω—É—é.")
                crop_name = st.selectbox(
                    "–ö—É–ª—å—Ç—É—Ä–∞ *",
                    options=list(crops_ref.keys()),
                    help="–í—ã–±–µ—Ä–∏—Ç–µ –∫—É–ª—å—Ç—É—Ä—É",
                    key="harvest_crop_select"
                )

                varieties = list(crops_ref[crop_name].get("—Å–æ—Ä—Ç–∞", [])) if crop_name in crops_ref else []
                variety_name = st.selectbox(
                    "–°–æ—Ä—Ç",
                    options=["–ù–µ —É–∫–∞–∑–∞–Ω"] + varieties,
                    help="–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ä—Ç",
                    key="harvest_variety_select"
                ) if varieties else "–ù–µ —É–∫–∞–∑–∞–Ω"

            # –£–±—Ä–∞–Ω–Ω–∞—è –ø–ª–æ—â–∞–¥—å
            area_harvested = st.number_input(
                "–£–±—Ä–∞–Ω–Ω–∞—è –ø–ª–æ—â–∞–¥—å (–≥–∞) *",
                min_value=0.1,
                max_value=selected_field.area_ha,
                value=selected_field.area_ha,
                step=0.1,
                help=f"–ü–ª–æ—â–∞–¥—å –ø–æ–ª—è: {format_area(selected_field.area_ha)}"
            )

        with col2:
            # –£—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å
            yield_t_ha = st.number_input(
                "–£—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å (—Ç/–≥–∞) *",
                min_value=0.1,
                max_value=15.0,
                value=2.0,
                step=0.1,
                help="–§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å"
            )

            # –í–∞–ª–æ–≤–æ–π —Å–±–æ—Ä (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç)
            total_yield_t = area_harvested * yield_t_ha
            st.metric("–í–∞–ª–æ–≤–æ–π —Å–±–æ—Ä", f"{format_number(total_yield_t, 2)} —Ç")

            # –í–ª–∞–∂–Ω–æ—Å—Ç—å –∑–µ—Ä–Ω–∞
            moisture_percent = st.number_input(
                "–í–ª–∞–∂–Ω–æ—Å—Ç—å (%)",
                min_value=0.0,
                max_value=40.0,
                value=14.0,
                step=0.5,
                help="–í–ª–∞–∂–Ω–æ—Å—Ç—å –∑–µ—Ä–Ω–∞ –ø—Ä–∏ —É–±–æ—Ä–∫–µ"
            )

            # –ó–∞—Å–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å
            weed_content_percent = st.number_input(
                "–ó–∞—Å–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å (%)",
                min_value=0.0,
                max_value=20.0,
                value=2.0,
                step=0.5,
                help="–ü—Ä–æ—Ü–µ–Ω—Ç —Å–æ—Ä–Ω–æ–π –ø—Ä–∏–º–µ—Å–∏"
            )

            # –ù–∞—Ç—É—Ä–∞ –∑–µ—Ä–Ω–∞
            test_weight = st.number_input(
                "–ù–∞—Ç—É—Ä–∞ –∑–µ—Ä–Ω–∞ (–≥/–ª)",
                min_value=500,
                max_value=900,
                value=750,
                step=10,
                help="–ù–∞—Ç—É—Ä–∞ –∑–µ—Ä–Ω–∞ (–æ–±—ä–µ–º–Ω–∞—è –º–∞—Å—Å–∞)"
            )

        # –¢–µ—Ö–Ω–∏–∫–∞ –¥–ª—è —É–±–æ—Ä–∫–∏
        st.markdown("---")
        st.markdown("### üöú –¢–µ—Ö–Ω–∏–∫–∞ –¥–ª—è —É–±–æ—Ä–∫–∏")

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ–º–±–∞–π–Ω–æ–≤ –∏ –∞–≥—Ä–µ–≥–∞—Ç–æ–≤
        machinery_list = filter_query_by_farm(db.query(Machinery).filter(Machinery.status == 'active'), Machinery).all()
        implements_list = filter_query_by_farm(db.query(Implements).filter(Implements.status == 'active'), Implements).all()

        combines = [m for m in machinery_list if m.machinery_type == 'combine']

        # Pre-load machinery attributes
        machinery_options = {}
        machinery_details = {}  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∫–æ–º–±–∞–π–Ω–æ–≤

        if combines:
            for m in combines:
                # Eagerly access attributes while still in session
                m_brand = m.brand or ''
                m_model = m.model
                m_year = m.year

                display_text = f"{m_brand} {m_model} ({m_year or '-'})"
                machinery_options[display_text] = (m.id, m_year)

                # –ò—â–µ–º –∫–æ–º–±–∞–π–Ω –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
                ref_key = f"{m_brand} {m_model}"
                if ref_key in combines_ref:
                    machinery_details[display_text] = combines_ref[ref_key]

        col_tech1, col_tech2, col_tech3 = st.columns(3)

        with col_tech1:
            selected_machinery_display = st.selectbox(
                "–ö–æ–º–±–∞–π–Ω",
                options=["–ù–µ –≤—ã–±—Ä–∞–Ω–æ"] + list(machinery_options.keys()),
                help="–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–±–∞–π–Ω –¥–ª—è —É–±–æ—Ä–∫–∏",
                key="harvest_machinery"
            )

            if selected_machinery_display != "–ù–µ –≤—ã–±—Ä–∞–Ω–æ":
                selected_machinery_id, machine_year = machinery_options[selected_machinery_display]

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞
                if selected_machinery_display in machinery_details:
                    ref_data = machinery_details[selected_machinery_display]
                    st.success(f"üí™ {ref_data['–º–æ—â–Ω–æ—Å—Ç—å_–ª—Å']} –ª.—Å. | üè∑Ô∏è {ref_data['–∫–ª–∞—Å—Å']} | ‚öôÔ∏è {ref_data['–º–æ–ª–æ—Ç–∏–ª—å–Ω—ã–π_–∞–ø–ø–∞—Ä–∞—Ç']}")

                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∫—É–ª—å—Ç—É—Ä—ã
                    if ref_data.get('–∫—É–ª—å—Ç—É—Ä—ã'):
                        cultures = ', '.join(ref_data['–∫—É–ª—å—Ç—É—Ä—ã'])
                        st.info(f"üåæ –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è: {cultures}")
                else:
                    st.caption(f"–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞: {machine_year or '–Ω–µ —É–∫–∞–∑–∞–Ω'}")
            else:
                selected_machinery_id = None
                machine_year = None

        with col_tech2:
            # –°–µ–ª–µ–∫—Ç–æ—Ä –∂–∞—Ç–∫–∏/—Ö–µ–¥–µ—Ä–∞
            headers = [impl for impl in implements_list if impl.implement_type in ['header', 'picker']]
            implement_options = {}
            if headers:
                for i in headers:
                    display_text = f"{i.brand or ''} {i.model} ({i.working_width_m or '-'}–º)"
                    implement_options[display_text] = (i.id, i.year)

            selected_implement_display = st.selectbox(
                "–ñ–∞—Ç–∫–∞/–•–µ–¥–µ—Ä",
                options=["–ù–µ –≤—ã–±—Ä–∞–Ω–æ"] + list(implement_options.keys()),
                help="–í—ã–±–µ—Ä–∏—Ç–µ –∂–∞—Ç–∫—É –∏–ª–∏ —Ö–µ–¥–µ—Ä (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)",
                key="harvest_implement"
            )

            if selected_implement_display != "–ù–µ –≤—ã–±—Ä–∞–Ω–æ":
                selected_implement_id, implement_year = implement_options[selected_implement_display]
            else:
                selected_implement_id = None
                implement_year = None

        with col_tech3:
            # –°–ø–æ—Å–æ–± —É–±–æ—Ä–∫–∏
            harvest_method = st.selectbox(
                "–°–ø–æ—Å–æ–± —É–±–æ—Ä–∫–∏",
                options=[
                    "–ü—Ä—è–º–æ–µ –∫–æ–º–±–∞–π–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ",
                    "–ü–æ–¥–±–æ—Ä –≤–∞–ª–∫–æ–≤ (–¥–≤—É—Ö—Ñ–∞–∑–Ω–∞—è)",
                    "–î—Ä—É–≥–æ–µ"
                ],
                help="–°–ø–æ—Å–æ–± —É–±–æ—Ä–∫–∏ —É—Ä–æ–∂–∞—è",
                key="harvest_method"
            )

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –∫–æ–¥ –¥–ª—è –ë–î
            harvest_method_code = {
                "–ü—Ä—è–º–æ–µ –∫–æ–º–±–∞–π–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ": "direct_combining",
                "–ü–æ–¥–±–æ—Ä –≤–∞–ª–∫–æ–≤ (–¥–≤—É—Ö—Ñ–∞–∑–Ω–∞—è)": "swath_pickup",
                "–î—Ä—É–≥–æ–µ": "other"
            }.get(harvest_method, "direct_combining")

            work_speed_kmh = st.number_input(
                "–†–∞–±–æ—á–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å (–∫–º/—á)",
                min_value=0.0,
                max_value=15.0,
                value=None,
                step=0.5,
                help="–°–∫–æ—Ä–æ—Å—Ç—å –¥–≤–∏–∂–µ–Ω–∏—è –∫–æ–º–±–∞–π–Ω–∞ –ø—Ä–∏ —É–±–æ—Ä–∫–µ",
                key="harvest_speed"
            )

        # –ö–∞—á–µ—Å—Ç–≤–æ –∑–µ—Ä–Ω–∞
        st.markdown("---")
        st.markdown("### üåæ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∞—á–µ—Å—Ç–≤–∞")

        col3, col4, col5 = st.columns(3)

        with col3:
            protein_percent = st.number_input(
                "–ë–µ–ª–æ–∫ (%)",
                min_value=0.0,
                max_value=25.0,
                value=12.5,
                step=0.1,
                help="–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –±–µ–ª–∫–∞ –≤ –∑–µ—Ä–Ω–µ"
            )

        with col4:
            gluten_percent = st.number_input(
                "–ö–ª–µ–π–∫–æ–≤–∏–Ω–∞ (%)",
                min_value=0.0,
                max_value=50.0,
                value=25.0,
                step=0.5,
                help="–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∫–ª–µ–π–∫–æ–≤–∏–Ω—ã (–¥–ª—è –ø—à–µ–Ω–∏—Ü—ã)"
            )

        with col5:
            falling_number = st.number_input(
                "–ß–∏—Å–ª–æ –ø–∞–¥–µ–Ω–∏—è (—Å–µ–∫)",
                min_value=0,
                max_value=600,
                value=300,
                step=10,
                help="–ß–∏—Å–ª–æ –ø–∞–¥–µ–Ω–∏—è (–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∞–º–∏–ª–∞–∑—ã)"
            )

        # –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞
        st.markdown("---")
        st.markdown("### üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —Ü–µ–ª–µ–≤—ã–º–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏")

        if crop_name in crops_ref:
            crop_data = crops_ref[crop_name]
            typical_yields = crop_data.get("—É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å_—Ç–∏–ø–∏—á–Ω–∞—è", {})

            if typical_yields:
                min_yield = typical_yields.get("–º–∏–Ω", 0)
                max_yield = typical_yields.get("–º–∞–∫—Å", 0)
                avg_yield = typical_yields.get("—Å—Ä–µ–¥–Ω—è—è", 0)

                col6, col7, col8 = st.columns(3)

                with col6:
                    st.metric("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è", f"{min_yield} —Ç/–≥–∞")
                with col7:
                    st.metric("–°—Ä–µ–¥–Ω—è—è", f"{avg_yield} —Ç/–≥–∞", delta=f"{yield_t_ha - avg_yield:+.2f} —Ç/–≥–∞")
                with col8:
                    st.metric("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è", f"{max_yield} —Ç/–≥–∞")

                # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä
                if yield_t_ha >= avg_yield:
                    st.success(f"‚úÖ –£—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–π –Ω–∞ {((yield_t_ha/avg_yield - 1) * 100):.1f}%")
                else:
                    st.warning(f"‚ö†Ô∏è –£—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å –Ω–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–π –Ω–∞ {((1 - yield_t_ha/avg_yield) * 100):.1f}%")

        # –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        st.markdown("---")
        st.markdown("### üí∞ –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏")

        col9, col10 = st.columns(2)

        with col9:
            price_per_ton = st.number_input(
                "–¶–µ–Ω–∞ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ (—Ç–≥/—Ç)",
                min_value=0,
                max_value=200000,
                value=75000,
                step=1000,
                help="–¶–µ–Ω–∞ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–µ—Ä–Ω–∞"
            )

        with col10:
            total_revenue = total_yield_t * price_per_ton
            st.metric("–í—ã—Ä—É—á–∫–∞ —Å –ø–æ–ª—è", f"{format_number(total_revenue, 0)} —Ç–≥")

        # –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ
        notes = st.text_area(
            "–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ",
            height=80,
            help="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É–±–æ—Ä–∫–µ"
        )

        # –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
        submitted = st.form_submit_button("‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —É–±–æ—Ä–∫—É", use_container_width=True)

        if submitted:
            # –í–∞–ª–∏–¥–∞—Ü–∏—è
            errors = []

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞—Ç—ã
            is_valid, msg = validator.validate_date(harvest_date)
            if not is_valid:
                errors.append(f"–î–∞—Ç–∞: {msg}")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–æ—â–∞–¥–∏
            is_valid, msg = validator.validate_area(area_harvested)
            if not is_valid:
                errors.append(f"–ü–ª–æ—â–∞–¥—å: {msg}")

            if area_harvested > selected_field.area_ha:
                errors.append(f"–£–±—Ä–∞–Ω–Ω–∞—è –ø–ª–æ—â–∞–¥—å ({area_harvested} –≥–∞) –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ø–ª–æ—â–∞–¥—å –ø–æ–ª—è ({selected_field.area_ha} –≥–∞)")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç–∏
            is_valid, msg = validator.validate_yield(yield_t_ha, "wheat")
            if not is_valid:
                errors.append(f"–£—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å: {msg}")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–ª–∞–∂–Ω–æ—Å—Ç–∏
            if moisture_percent > 30:
                errors.append("–í–ª–∞–∂–Ω–æ—Å—Ç—å —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∞—è (>30%)")

            if errors:
                st.error("‚ùå –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:\n" + "\n".join(f"- {e}" for e in errors))
            else:
                try:
                    # –°–æ–∑–¥–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
                    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ø–æ—Å–æ–±–µ —É–±–æ—Ä–∫–∏ –≤ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è
                    harvest_notes = f"–°–ø–æ—Å–æ–± —É–±–æ—Ä–∫–∏: {harvest_method}"
                    if notes:
                        harvest_notes = f"{harvest_notes}\n{notes}"

                    operation = Operation(
                        farm_id=farm.id,
                        field_id=selected_field.id,
                        operation_type="harvest",
                        operation_date=harvest_date,
                        end_date=end_date if end_date else None,
                        area_processed_ha=area_harvested,
                        machine_id=selected_machinery_id,
                        implement_id=selected_implement_id,  # –î–æ–±–∞–≤–ª–µ–Ω implement (–∂–∞—Ç–∫–∞/—Ö–µ–¥–µ—Ä)
                        machine_year=machine_year,
                        implement_year=implement_year if selected_implement_id else None,  # –î–æ–±–∞–≤–ª–µ–Ω –≥–æ–¥ –∞–≥—Ä–µ–≥–∞—Ç–∞
                        work_speed_kmh=work_speed_kmh if work_speed_kmh else None,
                        notes=harvest_notes
                    )
                    db.add(operation)
                    db.flush()

                    # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ —É–±–æ—Ä–∫–∏
                    harvest_data = HarvestData(
                        operation_id=operation.id,
                        crop=crop_name,
                        variety=variety_name if variety_name != "–ù–µ —É–∫–∞–∑–∞–Ω" else None,
                        yield_t_ha=yield_t_ha,
                        total_yield_t=total_yield_t,
                        moisture_percent=moisture_percent,
                        protein_percent=protein_percent if protein_percent > 0 else None,
                        gluten_percent=gluten_percent if gluten_percent > 0 else None,
                        test_weight_g_l=test_weight if test_weight > 0 else None,
                        falling_number=falling_number if falling_number > 0 else None,
                        weed_content_percent=weed_content_percent if weed_content_percent > 0 else None
                    )
                    db.add(harvest_data)

                    db.commit()

                    st.success(f"‚úÖ –£–±–æ—Ä–∫–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞! –í–∞–ª–æ–≤–æ–π —Å–±–æ—Ä: {format_number(total_yield_t, 2)} —Ç")
                    st.balloons()

                except Exception as e:
                    db.rollback()
                    st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {str(e)}")

# ========================================
# TAB 2: –ò—Å—Ç–æ—Ä–∏—è —É–±–æ—Ä–∫–∏
# ========================================
with tab2:
    st.subheader("–ò—Å—Ç–æ—Ä–∏—è —É–±–æ—Ä–∫–∏ —É—Ä–æ–∂–∞—è")

    # –§–∏–ª—å—Ç—Ä—ã
    col1, col2, col3 = st.columns(3)

    with col1:
        filter_field = st.selectbox(
            "–§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–ª—é",
            options=["–í—Å–µ –ø–æ–ª—è"] + [f"{f.field_code} - {f.name}" for f in fields],
            key="filter_field_history"
        )

    with col2:
        all_crops = list(crops_ref.keys())
        filter_crop = st.selectbox(
            "–§–∏–ª—å—Ç—Ä –ø–æ –∫—É–ª—å—Ç—É—Ä–µ",
            options=["–í—Å–µ –∫—É–ª—å—Ç—É—Ä—ã"] + all_crops,
            key="filter_crop_history"
        )

    with col3:
        filter_year = st.selectbox(
            "–§–∏–ª—å—Ç—Ä –ø–æ –≥–æ–¥—É",
            options=["–í—Å–µ –≥–æ–¥—ã"] + list(range(datetime.now().year, datetime.now().year - 10, -1)),
            key="filter_year_history"
        )

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    query = db.query(Operation, HarvestData, Field).join(
        HarvestData, Operation.id == HarvestData.operation_id
    ).join(
        Field, Operation.field_id == Field.id
    ).filter(
        Operation.operation_type == "harvest",
        Field.farm_id == farm.id  # –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –§–ò–õ–¨–¢–†: —Ç–æ–ª—å–∫–æ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—É—â–µ–≥–æ —Ö–æ–∑—è–π—Å—Ç–≤–∞
    )

    # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    if filter_field != "–í—Å–µ –ø–æ–ª—è":
        field_code = filter_field.split(" - ")[0]
        query = query.filter(Field.field_code == field_code)

    if filter_crop != "–í—Å–µ –∫—É–ª—å—Ç—É—Ä—ã":
        query = query.filter(HarvestData.crop == filter_crop)

    if filter_year != "–í—Å–µ –≥–æ–¥—ã":
        from sqlalchemy import extract
        query = query.filter(extract('year', Operation.operation_date) == filter_year)

    harvests = query.order_by(Operation.operation_date.desc()).all()

    if harvests:
        st.metric("–í—Å–µ–≥–æ —É–±–æ—Ä–æ–∫", len(harvests))

        # –¢–∞–±–ª–∏—Ü–∞
        data = []
        for op, harvest, field in harvests:
            data.append({
                "–î–∞—Ç–∞": format_date(op.operation_date),
                "–ü–æ–ª–µ": f"{field.field_code} - {field.name}",
                "–ö—É–ª—å—Ç—É—Ä–∞": harvest.crop,
                "–°–æ—Ä—Ç": harvest.variety or "-",
                "–ü–ª–æ—â–∞–¥—å (–≥–∞)": format_area(op.area_processed_ha),
                "–£—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å (—Ç/–≥–∞)": format_number(harvest.yield_t_ha, 2),
                "–í–∞–ª–æ–≤–æ–π —Å–±–æ—Ä (—Ç)": format_number(harvest.total_yield_t, 2),
                "–í–ª–∞–∂–Ω–æ—Å—Ç—å (%)": format_number(harvest.moisture_percent, 1) if harvest.moisture_percent else "-",
                "–ë–µ–ª–æ–∫ (%)": format_number(harvest.protein_percent, 1) if harvest.protein_percent else "-"
            })

        df = pd.DataFrame(data)
        st.dataframe(df, use_container_width=True, hide_index=True)

        # –≠–∫—Å–ø–æ—Ä—Ç
        col1, col2 = st.columns(2)
        with col1:
            csv = df.to_csv(index=False).encode('utf-8-sig')
            st.download_button(
                "üì• –°–∫–∞—á–∞—Ç—å CSV",
                csv,
                "harvest_history.csv",
                "text/csv",
                use_container_width=True
            )

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        st.markdown("---")
        st.markdown("### üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")

        col1, col2, col3, col4 = st.columns(4)

        total_area = sum(op.area_processed_ha for op, _, _ in harvests)
        total_yield = sum(harvest.total_yield_t for _, harvest, _ in harvests)
        avg_yield = total_yield / total_area if total_area > 0 else 0
        max_yield = max(harvest.yield_t_ha for _, harvest, _ in harvests)

        with col1:
            st.metric("–£–±—Ä–∞–Ω–æ –ø–ª–æ—â–∞–¥–∏", format_area(total_area))
        with col2:
            st.metric("–í–∞–ª–æ–≤–æ–π —Å–±–æ—Ä", f"{format_number(total_yield, 2)} —Ç")
        with col3:
            st.metric("–°—Ä–µ–¥–Ω—è—è —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å", f"{format_number(avg_yield, 2)} —Ç/–≥–∞")
        with col4:
            st.metric("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å", f"{format_number(max_yield, 2)} —Ç/–≥–∞")

        # –ì—Ä–∞—Ñ–∏–∫–∏
        col1, col2 = st.columns(2)

        with col1:
            # –ì—Ä–∞—Ñ–∏–∫ –ø–æ –∫—É–ª—å—Ç—É—Ä–∞–º
            crop_data = {}
            for _, harvest, _ in harvests:
                crop = harvest.crop
                crop_data[crop] = crop_data.get(crop, 0) + harvest.total_yield_t

            fig_crop = px.pie(
                values=list(crop_data.values()),
                names=list(crop_data.keys()),
                title="–í–∞–ª–æ–≤–æ–π —Å–±–æ—Ä –ø–æ –∫—É–ª—å—Ç—É—Ä–∞–º (—Ç)"
            )
            st.plotly_chart(fig_crop, use_container_width=True)

        with col2:
            # –ì—Ä–∞—Ñ–∏–∫ —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç–∏ –ø–æ –ø–æ–ª—è–º
            field_yields = {}
            field_areas = {}
            for op, harvest, field in harvests:
                field_name = f"{field.field_code}"
                if field_name not in field_yields:
                    field_yields[field_name] = 0
                    field_areas[field_name] = 0
                field_yields[field_name] += harvest.total_yield_t
                field_areas[field_name] += op.area_processed_ha

            # –°—Ä–µ–¥–Ω—è—è —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å –ø–æ –ø–æ–ª—è–º
            avg_yields_by_field = {k: field_yields[k] / field_areas[k] for k in field_yields.keys()}

            fig_fields = px.bar(
                x=list(avg_yields_by_field.keys()),
                y=list(avg_yields_by_field.values()),
                title="–°—Ä–µ–¥–Ω—è—è —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å –ø–æ –ø–æ–ª—è–º (—Ç/–≥–∞)",
                labels={"x": "–ü–æ–ª—è", "y": "–£—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å (—Ç/–≥–∞)"}
            )
            st.plotly_chart(fig_fields, use_container_width=True)

    else:
        st.info("üì≠ –ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ–± —É–±–æ—Ä–∫–µ —É—Ä–æ–∂–∞—è")

# ========================================
# TAB 3: –ê–Ω–∞–ª–∏–∑ —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç–∏
# ========================================
with tab3:
    st.subheader("–ê–Ω–∞–ª–∏–∑ —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç–∏")

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —É–±–æ—Ä–æ–∫
    all_harvests = db.query(Operation, HarvestData, Field).join(
        HarvestData, Operation.id == HarvestData.operation_id
    ).join(
        Field, Operation.field_id == Field.id
    ).filter(
        Operation.operation_type == "harvest",
        Field.farm_id == farm.id  # –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –§–ò–õ–¨–¢–†: —Ç–æ–ª—å–∫–æ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—É—â–µ–≥–æ —Ö–æ–∑—è–π—Å—Ç–≤–∞
    ).all()

    if all_harvests:
        # –ê–Ω–∞–ª–∏–∑ –ø–æ –≥–æ–¥–∞–º
        st.markdown("### üìÖ –î–∏–Ω–∞–º–∏–∫–∞ –ø–æ –≥–æ–¥–∞–º")

        yearly_data = {}
        for op, harvest, field in all_harvests:
            year = op.operation_date.year
            if year not in yearly_data:
                yearly_data[year] = {"total_yield": 0, "total_area": 0}
            yearly_data[year]["total_yield"] += harvest.total_yield_t
            yearly_data[year]["total_area"] += op.area_processed_ha

        years = sorted(yearly_data.keys())
        avg_yields_by_year = [yearly_data[y]["total_yield"] / yearly_data[y]["total_area"] for y in years]
        total_yields_by_year = [yearly_data[y]["total_yield"] for y in years]

        col1, col2 = st.columns(2)

        with col1:
            fig_year_avg = go.Figure()
            fig_year_avg.add_trace(go.Scatter(
                x=years,
                y=avg_yields_by_year,
                mode='lines+markers',
                name='–°—Ä–µ–¥–Ω—è—è —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å',
                line=dict(color='green', width=3),
                marker=dict(size=10)
            ))
            fig_year_avg.update_layout(
                title="–°—Ä–µ–¥–Ω—è—è —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å –ø–æ –≥–æ–¥–∞–º",
                xaxis_title="–ì–æ–¥",
                yaxis_title="–£—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å (—Ç/–≥–∞)"
            )
            st.plotly_chart(fig_year_avg, use_container_width=True)

        with col2:
            fig_year_total = go.Figure()
            fig_year_total.add_trace(go.Bar(
                x=years,
                y=total_yields_by_year,
                name='–í–∞–ª–æ–≤–æ–π —Å–±–æ—Ä',
                marker_color='orange'
            ))
            fig_year_total.update_layout(
                title="–í–∞–ª–æ–≤–æ–π —Å–±–æ—Ä –ø–æ –≥–æ–¥–∞–º",
                xaxis_title="–ì–æ–¥",
                yaxis_title="–í–∞–ª–æ–≤–æ–π —Å–±–æ—Ä (—Ç)"
            )
            st.plotly_chart(fig_year_total, use_container_width=True)

        # –ê–Ω–∞–ª–∏–∑ –ø–æ –∫—É–ª—å—Ç—É—Ä–∞–º
        st.markdown("---")
        st.markdown("### üåæ –ê–Ω–∞–ª–∏–∑ –ø–æ –∫—É–ª—å—Ç—É—Ä–∞–º")

        crop_analysis = {}
        for op, harvest, field in all_harvests:
            crop = harvest.crop
            if crop not in crop_analysis:
                crop_analysis[crop] = {"yields": [], "areas": []}
            crop_analysis[crop]["yields"].append(harvest.yield_t_ha)
            crop_analysis[crop]["areas"].append(op.area_processed_ha)

        # –°—Ä–µ–¥–Ω—è—è —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å –ø–æ –∫—É–ª—å—Ç—É—Ä–∞–º
        crop_avg_yields = {crop: sum(data["yields"]) / len(data["yields"]) for crop, data in crop_analysis.items()}
        crop_total_areas = {crop: sum(data["areas"]) for crop, data in crop_analysis.items()}

        col1, col2 = st.columns(2)

        with col1:
            fig_crop_yield = px.bar(
                x=list(crop_avg_yields.keys()),
                y=list(crop_avg_yields.values()),
                title="–°—Ä–µ–¥–Ω—è—è —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å –ø–æ –∫—É–ª—å—Ç—É—Ä–∞–º (—Ç/–≥–∞)",
                labels={"x": "–ö—É–ª—å—Ç—É—Ä—ã", "y": "–£—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å (—Ç/–≥–∞)"},
                color=list(crop_avg_yields.values()),
                color_continuous_scale="Greens"
            )
            st.plotly_chart(fig_crop_yield, use_container_width=True)

        with col2:
            fig_crop_area = px.pie(
                values=list(crop_total_areas.values()),
                names=list(crop_total_areas.keys()),
                title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–ª–æ—â–∞–¥–µ–π –ø–æ –∫—É–ª—å—Ç—É—Ä–∞–º"
            )
            st.plotly_chart(fig_crop_area, use_container_width=True)

        # –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –∏ —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç–∏
        st.markdown("---")
        st.markdown("### üî¨ –ö–∞—á–µ—Å—Ç–≤–æ –∑–µ—Ä–Ω–∞ vs –£—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å")

        # –î–∞–Ω–Ω—ã–µ –¥–ª—è scatter plot
        yields_for_scatter = []
        proteins_for_scatter = []
        crops_for_scatter = []

        for op, harvest, field in all_harvests:
            if harvest.protein_percent:
                yields_for_scatter.append(harvest.yield_t_ha)
                proteins_for_scatter.append(harvest.protein_percent)
                crops_for_scatter.append(harvest.crop)

        if yields_for_scatter:
            fig_scatter = px.scatter(
                x=yields_for_scatter,
                y=proteins_for_scatter,
                color=crops_for_scatter,
                title="–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –±–µ–ª–∫–∞ –æ—Ç —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç–∏",
                labels={"x": "–£—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å (—Ç/–≥–∞)", "y": "–ë–µ–ª–æ–∫ (%)"},
                hover_data={"–ö—É–ª—å—Ç—É—Ä–∞": crops_for_scatter}
            )
            st.plotly_chart(fig_scatter, use_container_width=True)

    else:
        st.info("üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")

# ========================================
# TAB 4: –¶–µ–ª–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
# ========================================
with tab4:
    st.subheader("–¶–µ–ª–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç–∏")

    st.markdown("""
    ### üéØ –¶–µ–ª–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –¥–ª—è –ê–∫–º–æ–ª–∏–Ω—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏

    –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫—É–ª—å—Ç—É—Ä –≤ —É—Å–ª–æ–≤–∏—è—Ö
    –ê–∫–º–æ–ª–∏–Ω—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏ –ø—Ä–∏ —Å–æ–±–ª—é–¥–µ–Ω–∏–∏ –∞–≥—Ä–æ—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π:
    """)

    # –¢–∞–±–ª–∏—Ü–∞ —Ü–µ–ª–µ–≤—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
    target_data = []
    for crop_name, crop_info in crops_ref.items():
        typical_yields = crop_info.get("—É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å_—Ç–∏–ø–∏—á–Ω–∞—è", {})
        if typical_yields:
            target_data.append({
                "–ö—É–ª—å—Ç—É—Ä–∞": crop_name,
                "–ú–∏–Ω–∏–º—É–º (—Ç/–≥–∞)": typical_yields.get("–º–∏–Ω", "-"),
                "–°—Ä–µ–¥–Ω—è—è (—Ç/–≥–∞)": typical_yields.get("—Å—Ä–µ–¥–Ω—è—è", "-"),
                "–ú–∞–∫—Å–∏–º—É–º (—Ç/–≥–∞)": typical_yields.get("–º–∞–∫—Å", "-"),
                "–£—Å–ª–æ–≤–∏–µ": typical_yields.get("—É—Å–ª–æ–≤–∏–µ", "-")
            })

    if target_data:
        df_targets = pd.DataFrame(target_data)
        st.dataframe(df_targets, use_container_width=True, hide_index=True)

    # –§–∞–∫—Ç–æ—Ä—ã –≤–ª–∏—è–Ω–∏—è
    st.markdown("---")
    st.markdown("### üåü –§–∞–∫—Ç–æ—Ä—ã, –≤–ª–∏—è—é—â–∏–µ –Ω–∞ —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å")

    col1, col2 = st.columns(2)

    with col1:
        st.markdown("""
        **–ü—Ä–∏—Ä–æ–¥–Ω–æ-–∫–ª–∏–º–∞—Ç–∏—á–µ—Å–∫–∏–µ:**
        - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å–∞–¥–∫–æ–≤ –∑–∞ –≤–µ–≥–µ—Ç–∞—Ü–∏—é
        - –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–π —Ä–µ–∂–∏–º
        - –ó–∞–º–æ—Ä–æ–∑–∫–∏ –≤ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–µ—Ä–∏–æ–¥—ã
        - –í–ª–∞–≥–æ–∑–∞–ø–∞—Å—ã –≤ –ø–æ—á–≤–µ
        - –ó–∞—Å—É—Ö–∏ –∏ —Å—É—Ö–æ–≤–µ–∏
        """)

    with col2:
        st.markdown("""
        **–ê–≥—Ä–æ—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ:**
        - –°—Ä–æ–∫–∏ –ø–æ—Å–µ–≤–∞
        - –ù–æ—Ä–º–∞ –≤—ã—Å–µ–≤–∞
        - –ö–∞—á–µ—Å—Ç–≤–æ —Å–µ–º—è–Ω
        - –°–∏—Å—Ç–µ–º–∞ —É–¥–æ–±—Ä–µ–Ω–∏–π (NPK)
        - –ó–∞—â–∏—Ç–∞ –æ—Ç –±–æ–ª–µ–∑–Ω–µ–π –∏ –≤—Ä–µ–¥–∏—Ç–µ–ª–µ–π
        - –ö–∞—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—á–≤—ã
        """)

    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    st.markdown("---")
    st.markdown("### üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç–∏")

    st.info("""
    1. **–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∏—Ç–∞–Ω–∏—è:**
       - –í–Ω–µ—Å–µ–Ω–∏–µ —É–¥–æ–±—Ä–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–≥—Ä–æ—Ö–∏–º–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
       - –°–æ–±–ª—é–¥–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ NPK
       - –ü–æ–¥–∫–æ—Ä–º–∫–∏ –≤ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–∑—ã

    2. **–ó–∞—â–∏—Ç–∞ —Ä–∞—Å—Ç–µ–Ω–∏–π:**
       - –°–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Ç–∏–≤ –±–æ–ª–µ–∑–Ω–µ–π –∏ –≤—Ä–µ–¥–∏—Ç–µ–ª–µ–π
       - –ö–æ–Ω—Ç—Ä–æ–ª—å —Å–æ—Ä–Ω—è–∫–æ–≤ (–≥–µ—Ä–±–∏—Ü–∏–¥—ã)
       - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ñ–∏—Ç–æ—Å–∞–Ω–∏—Ç–∞—Ä–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è

    3. **–ê–≥—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∞:**
       - –°–æ–±–ª—é–¥–µ–Ω–∏–µ —Å–µ–≤–æ–æ–±–æ—Ä–æ—Ç–∞
       - –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–æ—á–≤—ã
       - –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ —Å—Ä–æ–∫–∏ —Å–µ–≤–∞
       - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–µ–º—è–Ω

    4. **–í–ª–∞–≥–æ—Å–±–µ—Ä–µ–∂–µ–Ω–∏–µ:**
       - –°–Ω–µ–≥–æ–∑–∞–¥–µ—Ä–∂–∞–Ω–∏–µ
       - –ú–∏–Ω–∏–º–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—á–≤—ã
       - –ú—É–ª—å—á–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∂–Ω–∏–≤–Ω—ã–º–∏ –æ—Å—Ç–∞—Ç–∫–∞–º–∏
    """)

# –§—É—Ç–µ—Ä
st.markdown("---")
st.markdown("üöú **–£—á–µ—Ç —É–±–æ—Ä–∫–∏ —É—Ä–æ–∂–∞—è** | –í–µ—Ä—Å–∏—è 1.0")
