"""
Multi-farm support functions
–§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Ö–æ–∑—è–π—Å—Ç–≤–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
"""
import streamlit as st
from typing import List, Optional, Dict
from sqlalchemy.orm import Session
from modules.database import UserFarm, Farm, SessionLocal
from modules.auth import get_current_user, is_admin


def get_user_farms(user_id: int, db: Session = None) -> List[Dict]:
    """
    –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ö–æ–∑—è–π—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db: –°–µ—Å—Å–∏—è –ë–î (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

    Returns:
        –°–ø–∏—Å–æ–∫ —Ö–æ–∑—è–π—Å—Ç–≤ —Å —Ä–æ–ª—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    close_db = False
    if db is None:
        db = SessionLocal()
        close_db = True

    try:
        # –ê–¥–º–∏–Ω –≤–∏–¥–∏—Ç –≤—Å–µ —Ö–æ–∑—è–π—Å—Ç–≤–∞
        user = get_current_user()
        if user and user.get("role") == "admin":
            farms = db.query(Farm).all()
            return [{
                "farm_id": f.id,
                "farm_name": f.name,
                "farm_bin": f.bin,
                "role": "admin",
                "is_primary": False
            } for f in farms]

        # –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - —Ö–æ–∑—è–π—Å—Ç–≤–∞ –∏–∑ user_farms
        user_farm_records = db.query(
            UserFarm, Farm
        ).join(
            Farm, UserFarm.farm_id == Farm.id
        ).filter(
            UserFarm.user_id == user_id
        ).all()

        result = []
        for uf, farm in user_farm_records:
            result.append({
                "farm_id": farm.id,
                "farm_name": farm.name,
                "farm_bin": farm.bin,
                "role": uf.role,
                "is_primary": uf.is_primary
            })

        return result
    finally:
        if close_db:
            db.close()


def get_primary_farm_id(user_id: int, db: Session = None) -> Optional[int]:
    """
    –ü–æ–ª—É—á–∏—Ç—å ID –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ö–æ–∑—è–π—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db: –°–µ—Å—Å–∏—è –ë–î

    Returns:
        ID –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ö–æ–∑—è–π—Å—Ç–≤–∞ –∏–ª–∏ None
    """
    close_db = False
    if db is None:
        db = SessionLocal()
        close_db = True

    try:
        primary = db.query(UserFarm).filter(
            UserFarm.user_id == user_id,
            UserFarm.is_primary == True
        ).first()

        if primary:
            return primary.farm_id

        # –ï—Å–ª–∏ –Ω–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ - –≤–µ—Ä–Ω—É—Ç—å –ø–µ—Ä–≤–æ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ
        first_farm = db.query(UserFarm).filter(
            UserFarm.user_id == user_id
        ).first()

        return first_farm.farm_id if first_farm else None
    finally:
        if close_db:
            db.close()


def get_selected_farm_id() -> Optional[int]:
    """
    –ü–æ–ª—É—á–∏—Ç—å ID —Ç–µ–∫—É—â–µ–≥–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ö–æ–∑—è–π—Å—Ç–≤–∞ –∏–∑ session_state

    Returns:
        ID –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ö–æ–∑—è–π—Å—Ç–≤–∞ –∏–ª–∏ None
    """
    user = get_current_user()
    if not user:
        return None

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ –≤ session_state
    if "selected_farm_id" in st.session_state:
        return st.session_state.selected_farm_id

    # –ï—Å–ª–∏ –Ω–µ—Ç - –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ
    user_id = user.get("id")
    if user_id:
        primary_farm_id = get_primary_farm_id(user_id)
        if primary_farm_id:
            st.session_state.selected_farm_id = primary_farm_id
            return primary_farm_id

    # Fallback –Ω–∞ legacy farm_id –∏–∑ user
    legacy_farm_id = user.get("farm_id")
    if legacy_farm_id:
        st.session_state.selected_farm_id = legacy_farm_id
        return legacy_farm_id

    return None


def set_selected_farm_id(farm_id: int):
    """
    –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ –≤ session_state

    Args:
        farm_id: ID —Ö–æ–∑—è–π—Å—Ç–≤–∞
    """
    st.session_state.selected_farm_id = farm_id
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–∫–∂–µ –≤ user session –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    if "user" in st.session_state:
        st.session_state.user["farm_id"] = farm_id


def render_farm_selector():
    """
    –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Å–µ–ª–µ–∫—Ç–æ—Ä —Ö–æ–∑—è–π—Å—Ç–≤ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
    –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω –Ω–∞ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É —Ö–æ–∑—è–π—Å—Ç–≤–∞–º–∏
    """
    user = get_current_user()
    if not user:
        return

    user_id = user.get("id")
    if not user_id:
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ö–æ–∑—è–π—Å—Ç–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    farms = get_user_farms(user_id)

    if not farms:
        st.warning("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –Ω–∏ –∫ –æ–¥–Ω–æ–º—É —Ö–æ–∑—è–π—Å—Ç–≤—É")
        return

    # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ —Ö–æ–∑—è–π—Å—Ç–≤–æ - –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ
    if len(farms) == 1:
        farm = farms[0]
        st.info(f"üè¢ **{farm['farm_name']}** ({farm['farm_bin']})")
        set_selected_farm_id(farm['farm_id'])
        return

    # –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ö–æ–∑—è–π—Å—Ç–≤ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä
    current_farm_id = get_selected_farm_id()

    # –ù–∞–π—Ç–∏ —Ç–µ–∫—É—â–µ–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ –≤ —Å–ø–∏—Å–∫–µ
    current_index = 0
    farm_options = []
    for i, farm in enumerate(farms):
        label = f"{farm['farm_name']} ({farm['farm_bin']})"
        if farm['is_primary']:
            label += " ‚≠ê"
        farm_options.append(label)
        if farm['farm_id'] == current_farm_id:
            current_index = i

    selected_label = st.selectbox(
        "üè¢ –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ:",
        options=farm_options,
        index=current_index,
        key="farm_selector"
    )

    # –û–±–Ω–æ–≤–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ
    selected_index = farm_options.index(selected_label)
    selected_farm_id = farms[selected_index]['farm_id']

    if selected_farm_id != current_farm_id:
        set_selected_farm_id(selected_farm_id)
        st.rerun()
