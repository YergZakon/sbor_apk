"""
Authentication and authorization utilities
"""
import bcrypt
import streamlit as st
from datetime import datetime
from typing import Optional
from sqlalchemy.orm import Session
from modules.database import User, Farm, AuditLog, UserFarm, SessionLocal


def hash_password(password: str) -> str:
    """–•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è"""
    salt = bcrypt.gensalt()
    hashed = bcrypt.hashpw(password.encode('utf-8'), salt)
    return hashed.decode('utf-8')


def verify_password(password: str, hashed_password: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è"""
    return bcrypt.checkpw(password.encode('utf-8'), hashed_password.encode('utf-8'))


def create_user(
    db: Session,
    username: str,
    email: str,
    password: str,
    full_name: str,
    role: str = "farmer",
    farm_id: Optional[int] = None
) -> User:
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    hashed_pwd = hash_password(password)
    user = User(
        username=username,
        email=email,
        hashed_password=hashed_pwd,
        full_name=full_name,
        role=role,
        farm_id=farm_id,
        is_active=True
    )
    db.add(user)
    db.commit()
    db.refresh(user)
    return user


def authenticate_user(db: Session, username: str, password: str) -> Optional[User]:
    """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = db.query(User).filter(User.username == username).first()

    if not user:
        return None

    if not user.is_active:
        return None

    if not verify_password(password, user.hashed_password):
        return None

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞
    user.last_login = datetime.now()
    db.commit()

    return user


def get_current_user() -> Optional[dict]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ session_state"""
    if "user" in st.session_state:
        return st.session_state["user"]
    return None


def is_authenticated() -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"""
    return "user" in st.session_state and st.session_state["user"] is not None


def is_admin() -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    user = get_current_user()
    return user is not None and user.get("role") == "admin"


def is_farmer() -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ñ–µ—Ä–º–µ—Ä–æ–º"""
    user = get_current_user()
    return user is not None and user.get("role") == "farmer"


def is_viewer() -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–º–æ—Ç—Ä—â–∏–∫–æ–º"""
    user = get_current_user()
    return user is not None and user.get("role") == "viewer"


def has_farm_access(farm_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ö–æ–∑—è–π—Å—Ç–≤—É"""
    user = get_current_user()

    if not user:
        return False

    # –ê–¥–º–∏–Ω –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ö–æ–∑—è–π—Å—Ç–≤–∞–º
    if user.get("role") == "admin":
        return True

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–≤—è–∑–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫ —ç—Ç–æ–º—É —Ö–æ–∑—è–π—Å—Ç–≤—É
    return user.get("farm_id") == farm_id


def require_auth(redirect_to_login: bool = True):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä/–ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    if not is_authenticated():
        st.error("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
        if redirect_to_login:
            st.info("üëâ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É —á–µ—Ä–µ–∑ –±–æ–∫–æ–≤–æ–µ –º–µ–Ω—é")
        st.stop()


def require_admin():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    require_auth()
    if not is_admin():
        st.error("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        st.stop()


def require_role(*roles):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–¥–Ω–æ–π –∏–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —Ä–æ–ª–µ–π"""
    require_auth()
    user = get_current_user()

    if user.get("role") not in roles:
        st.error(f"‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢—Ä–µ–±—É–µ—Ç—Å—è –æ–¥–Ω–∞ –∏–∑ —Ä–æ–ª–µ–π: {', '.join(roles)}")
        st.stop()


def login_user(user: User):
    """–í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º—É"""
    st.session_state["user"] = {
        "id": user.id,
        "username": user.username,
        "email": user.email,
        "full_name": user.full_name,
        "role": user.role,
        "farm_id": user.farm_id
    }


def logout_user():
    """–í—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–∏—Å—Ç–µ–º—ã"""
    if "user" in st.session_state:
        del st.session_state["user"]


def log_action(
    db: Session,
    user_id: int,
    action: str,
    entity_type: Optional[str] = None,
    entity_id: Optional[int] = None,
    details: Optional[str] = None
):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    log = AuditLog(
        user_id=user_id,
        action=action,
        entity_type=entity_type,
        entity_id=entity_id,
        details=details
    )
    db.add(log)
    db.commit()


def get_user_display_name() -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = get_current_user()
    if not user:
        return "–ì–æ—Å—Ç—å"

    return user.get("full_name") or user.get("username") or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"


def get_user_role_display() -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–æ–ª–∏"""
    user = get_current_user()
    if not user:
        return ""

    role_map = {
        "admin": "üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
        "farmer": "üë®‚Äçüåæ –§–µ—Ä–º–µ—Ä",
        "viewer": "üëÅÔ∏è –ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å"
    }

    return role_map.get(user.get("role"), user.get("role"))


def get_user_farm_id() -> Optional[int]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ ID —Ö–æ–∑—è–π—Å—Ç–≤–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = get_current_user()
    if not user:
        return None
    return user.get("farm_id")


def filter_query_by_farm(query, model):
    """
    –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –ø–æ —Ö–æ–∑—è–π—Å—Ç–≤—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Args:
        query: SQLAlchemy query
        model: –ú–æ–¥–µ–ª—å —Å –ø–æ–ª–µ–º farm_id

    Returns:
        –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π query
    """
    user = get_current_user()

    if not user:
        # –ï—Å–ª–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        return query.filter(False)

    # –ê–¥–º–∏–Ω –≤–∏–¥–∏—Ç –≤—Å—ë
    if user.get("role") == "admin":
        return query

    # –§–µ—Ä–º–µ—Ä –∏ Viewer –≤–∏–¥—è—Ç —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ —Å–≤–æ–µ–≥–æ —Ö–æ–∑—è–π—Å—Ç–≤–∞
    farm_id = user.get("farm_id")

    if not farm_id:
        # –ï—Å–ª–∏ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —Ö–æ–∑—è–π—Å—Ç–≤—É - –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        return query.filter(False)

    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ farm_id
    if hasattr(model, 'farm_id'):
        return query.filter(model.farm_id == farm_id)
    else:
        # –ï—Å–ª–∏ —É –º–æ–¥–µ–ª–∏ –Ω–µ—Ç farm_id –Ω–∞–ø—Ä—è–º—É—é, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
        return query


def can_edit_data() -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ"""
    user = get_current_user()
    if not user:
        return False

    # Admin –∏ Farmer –º–æ–≥—É—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
    return user.get("role") in ["admin", "farmer"]


def can_delete_data() -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª—è—Ç—å –¥–∞–Ω–Ω—ã–µ"""
    user = get_current_user()
    if not user:
        return False

    # –¢–æ–ª—å–∫–æ Admin –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å
    return user.get("role") == "admin"


def require_farm_binding():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —Ö–æ–∑—è–π—Å—Ç–≤—É"""
    require_auth()

    user = get_current_user()

    # –ê–¥–º–∏–Ω –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏
    if user.get("role") == "admin":
        return

    # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞ –ø—Ä–∏–≤—è–∑–∫–∞
    if not user.get("farm_id"):
        st.error("‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —Ö–æ–∑—è–π—Å—Ç–≤—É")
        st.warning("–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –∫ —Ö–æ–∑—è–π—Å—Ç–≤—É.")

        st.info("**–ö–æ–Ω—Ç–∞–∫—Ç—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:**\nEmail: admin@agrodata.kz")
        st.stop()
