"""
Unified reference loader for JSON catalogs
Handles multiple possible file locations for robustness
"""
import json
from pathlib import Path
from typing import Dict, Any, Optional
import streamlit as st


def load_reference(filename: str, show_error: bool = True) -> Dict[str, Any]:
    """
    –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ –∏–∑ JSON –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—É—Ç–µ–π

    Args:
        filename: –∏–º—è JSON —Ñ–∞–π–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "fertilizers.json")
        show_error: –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ –æ—à–∏–±–∫—É –≤ Streamlit –ø—Ä–∏ –Ω–µ—É–¥–∞—á–µ

    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–ª–∏ –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å –ø—Ä–∏ –æ—à–∏–±–∫–µ
    """
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—É—Ç–∏ –ø–æ–∏—Å–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞
    candidate_paths = [
        # –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã (—Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è pages/)
        Path(__file__).parent.parent / "data" / filename,

        # –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–æ—Ä–Ω—è streamlit_app
        Path(__file__).parent.parent / "streamlit_app" / "data" / filename,

        # Shared data directory
        Path(__file__).parent.parent / "shared" / "data" / filename,

        # –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è (–æ—Ç–∫—É–¥–∞ –∑–∞–ø—É—â–µ–Ω streamlit)
        Path.cwd() / "data" / filename,
        Path.cwd() / "streamlit_app" / "data" / filename,
        Path.cwd() / "streamlit_app" / "shared" / "data" / filename,

        # –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å —á–µ—Ä–µ–∑ –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞
        Path(__file__).resolve().parent.parent.parent / "data" / filename,
        Path(__file__).resolve().parent.parent.parent / "shared" / "data" / filename,
    ]

    # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—É—Ç–∏
    candidate_paths = list(set(p.resolve() for p in candidate_paths))

    # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –∫–∞–∂–¥–æ–≥–æ –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –ø—É—Ç–∏
    for path in candidate_paths:
        try:
            if path.exists():
                with open(path, "r", encoding="utf-8") as f:
                    data = json.load(f)
                    # –£—Å–ø–µ—à–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                    return data
        except json.JSONDecodeError as e:
            if show_error:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –≤ {path.name}: {e}")
            return {}
        except Exception as e:
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —á—Ç–µ–Ω–∏—è (—Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —Ç.–¥.)
            continue

    # –ï—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω –ø—É—Ç—å –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
    if show_error:
        tried_paths = "\n".join(f"  - {p}" for p in candidate_paths[:5])  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
        st.error(
            f"‚ùå –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ **{filename}** –Ω–µ –Ω–∞–π–¥–µ–Ω!\n\n"
            f"–ò—Å–∫–∞–ª–∏ –≤:\n{tried_paths}\n\n"
            f"üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ `streamlit_app/data/` –∏–ª–∏ `streamlit_app/shared/data/`"
        )

    return {}


def load_multiple_references(*filenames: str, show_error: bool = True) -> Dict[str, Dict[str, Any]]:
    """
    –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ

    Args:
        *filenames: –∏–º–µ–Ω–∞ JSON —Ñ–∞–π–ª–æ–≤
        show_error: –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ –æ—à–∏–±–∫–∏

    Returns:
        –°–ª–æ–≤–∞—Ä—å {filename: data}
    """
    result = {}
    for filename in filenames:
        result[filename] = load_reference(filename, show_error=show_error)
    return result


# –ü—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∑—á–∏–∫–∏ –¥–ª—è —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤
def load_crops() -> Dict[str, Any]:
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ –∫—É–ª—å—Ç—É—Ä"""
    return load_reference("crops.json")


def load_fertilizers() -> Dict[str, Any]:
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ —É–¥–æ–±—Ä–µ–Ω–∏–π"""
    return load_reference("fertilizers.json")


def load_pesticides() -> Dict[str, Any]:
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ –°–ó–†"""
    return load_reference("pesticides.json")


def load_diseases() -> Dict[str, Any]:
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ –±–æ–ª–µ–∑–Ω–µ–π"""
    return load_reference("diseases.json")


def load_pests() -> Dict[str, Any]:
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ –≤—Ä–µ–¥–∏—Ç–µ–ª–µ–π"""
    return load_reference("pests.json")


def load_weeds() -> Dict[str, Any]:
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ —Å–æ—Ä–Ω—è–∫–æ–≤"""
    return load_reference("weeds.json")


def load_tractors() -> Dict[str, Any]:
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ —Ç—Ä–∞–∫—Ç–æ—Ä–æ–≤"""
    return load_reference("tractors.json", show_error=False)


def load_combines() -> Dict[str, Any]:
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ –∫–æ–º–±–∞–π–Ω–æ–≤"""
    return load_reference("combines.json", show_error=False)


def load_implements() -> Dict[str, Any]:
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ –æ—Ä—É–¥–∏–π"""
    return load_reference("implements.json", show_error=False)


# –ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
@st.cache_data(ttl=3600)  # –ö–µ—à –Ω–∞ 1 —á–∞—Å
def load_reference_cached(filename: str) -> Dict[str, Any]:
    """–ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞"""
    return load_reference(filename, show_error=True)
