"""
Irrigation - –£—á–µ—Ç –æ—Ä–æ—à–µ–Ω–∏—è
"""
import streamlit as st
import pandas as pd
from datetime import date
from pathlib import Path
import sys
sys.path.append(str(Path(__file__).parent.parent))

from modules.database import get_db, Farm, Field, Operation, IrrigationDetails, Machinery
from modules.auth import require_auth, require_farm_binding, filter_query_by_farm, get_user_display_name, get_current_user, is_admin

st.set_page_config(page_title="–û—Ä–æ—à–µ–Ω–∏–µ", page_icon="üí¶", layout="wide")
require_auth()
require_farm_binding()

st.title("üí¶ –£—á–µ—Ç –æ—Ä–æ—à–µ–Ω–∏—è")
st.caption(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: **{get_user_display_name()}**")

db = next(get_db())
user = get_current_user()
farm = db.query(Farm).first() if is_admin() else db.query(Farm).filter(Farm.id == user.get("farm_id")).first()

if not farm:
    st.warning("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ!")
    st.stop()

fields = filter_query_by_farm(db.query(Field), Field).all()
if not fields:
    st.warning("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –ø–æ–ª—è!")
    st.stop()

tab1, tab2 = st.tabs(["üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", "üìä –ò—Å—Ç–æ—Ä–∏—è"])

with tab1:
    st.subheader("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ä–æ—à–µ–Ω–∏—è")

    with st.form("irrigation_form"):
        col1, col2 = st.columns(2)

        with col1:
            field_options = {f"{f.field_code} - {f.name}": f for f in fields}
            selected_field = field_options[st.selectbox("–ü–æ–ª–µ *", list(field_options.keys()))]

            operation_date = st.date_input("–î–∞—Ç–∞ *", value=date.today())
            end_date = st.date_input("–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è", value=None)

            irrigation_type = st.selectbox(
                "–¢–∏–ø –æ—Ä–æ—à–µ–Ω–∏—è *",
                ['sprinkler', 'drip', 'furrow', 'flood', 'center_pivot'],
                format_func=lambda x: {
                    'sprinkler': '–î–æ–∂–¥–µ–≤–∞–Ω–∏–µ',
                    'drip': '–ö–∞–ø–µ–ª—å–Ω–æ–µ',
                    'furrow': '–ü–æ –±–æ—Ä–æ–∑–¥–∞–º',
                    'flood': '–ó–∞—Ç–æ–ø–ª–µ–Ω–∏–µ',
                    'center_pivot': '–ö—Ä—É–≥–æ–≤–æ–µ –¥–æ–∂–¥–µ–≤–∞–Ω–∏–µ'
                }[x]
            )

        with col2:
            area_processed = st.number_input("–ü–ª–æ—â–∞–¥—å (–≥–∞) *", min_value=0.1, max_value=selected_field.area_ha, value=selected_field.area_ha, step=0.1)
            water_volume_m3 = st.number_input("–û–±—ä–µ–º –≤–æ–¥—ã (–º¬≥)", min_value=0.0, value=1000.0, step=100.0)

            water_rate_m3_ha = water_volume_m3 / area_processed if area_processed > 0 else 0
            st.metric("–ù–æ—Ä–º–∞ –ø–æ–ª–∏–≤–∞", f"{water_rate_m3_ha:.1f} –º¬≥/–≥–∞")

            water_source = st.selectbox("–ò—Å—Ç–æ—á–Ω–∏–∫ –≤–æ–¥—ã", ["–°–∫–≤–∞–∂–∏–Ω–∞", "–†–µ–∫–∞", "–ö–∞–Ω–∞–ª", "–í–æ–¥–æ—Ö—Ä–∞–Ω–∏–ª–∏—â–µ", "–î—Ä—É–≥–æ–µ"], index=None)

        st.markdown("---")
        st.markdown("### üöú –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ")

        machinery_list = filter_query_by_farm(db.query(Machinery).filter(Machinery.status == 'active'), Machinery).all()
        irrigation_systems = [m for m in machinery_list if m.machinery_type == 'irrigation_system']

        col_tech1, col_tech2 = st.columns(2)

        with col_tech1:
            selected_machinery = st.selectbox("–°–∏—Å—Ç–µ–º–∞ –æ—Ä–æ—à–µ–Ω–∏—è", [None] + irrigation_systems, format_func=lambda m: "–ù–µ –≤—ã–±—Ä–∞–Ω–æ" if m is None else f"{m.brand or ''} {m.model}")
            machine_year = selected_machinery.year if selected_machinery else None

        with col_tech2:
            soil_moisture_before = st.number_input("–í–ª–∞–∂–Ω–æ—Å—Ç—å –ø–æ—á–≤—ã –¥–æ (%)", min_value=0.0, max_value=100.0, value=None, step=1.0)

        notes = st.text_area("–ü—Ä–∏–º–µ—á–∞–Ω–∏—è")

        submitted = st.form_submit_button("‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å", use_container_width=True, type="primary")

        if submitted:
            try:
                operation = Operation(
                    farm_id=farm.id, field_id=selected_field.id, operation_type="irrigation",
                    operation_date=operation_date, end_date=end_date, area_processed_ha=area_processed,
                    machine_id=selected_machinery.id if selected_machinery else None,
                    machine_year=machine_year, notes=notes
                )
                db.add(operation)
                db.flush()

                irrigation_details = IrrigationDetails(
                    operation_id=operation.id, irrigation_type=irrigation_type,
                    water_volume_m3=water_volume_m3, water_rate_m3_ha=water_rate_m3_ha,
                    water_source=water_source, soil_moisture_before=soil_moisture_before
                )
                db.add(irrigation_details)
                db.commit()

                st.success(f"‚úÖ –û—Ä–æ—à–µ–Ω–∏–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ! –ü–æ–ª–∏—Ç–æ {area_processed} –≥–∞, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ {water_volume_m3} –º¬≥ –≤–æ–¥—ã")
                st.balloons()
            except Exception as e:
                db.rollback()
                st.error(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

with tab2:
    st.subheader("–ò—Å—Ç–æ—Ä–∏—è –æ—Ä–æ—à–µ–Ω–∏–π")

    operations = db.query(Operation, Field, IrrigationDetails).join(Field).outerjoin(IrrigationDetails).filter(
        Operation.operation_type == "irrigation", Field.farm_id == farm.id
    ).order_by(Operation.operation_date.desc()).all()

    if operations:
        data = [{
            '–î–∞—Ç–∞': op[0].operation_date.strftime('%Y-%m-%d'),
            '–ü–æ–ª–µ': op[1].name or op[1].field_code,
            '–¢–∏–ø': {
                'sprinkler': '–î–æ–∂–¥–µ–≤–∞–Ω–∏–µ', 'drip': '–ö–∞–ø–µ–ª—å–Ω–æ–µ', 'furrow': '–ü–æ –±–æ—Ä–æ–∑–¥–∞–º',
                'flood': '–ó–∞—Ç–æ–ø–ª–µ–Ω–∏–µ', 'center_pivot': '–ö—Ä—É–≥–æ–≤–æ–µ'
            }.get(op[2].irrigation_type if op[2] else None, '-'),
            '–û–±—ä–µ–º (–º¬≥)': op[2].water_volume_m3 if op[2] else '-',
            '–ü–ª–æ—â–∞–¥—å (–≥–∞)': op[0].area_processed_ha
        } for op in operations]

        st.dataframe(pd.DataFrame(data), use_container_width=True, hide_index=True)

        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("–í—Å–µ–≥–æ –ø–æ–ª–∏–≤–æ–≤", len(operations))
        with col2:
            total_area = sum([op[0].area_processed_ha for op in operations if op[0].area_processed_ha])
            st.metric("–ü–æ–ª–∏—Ç–æ –≤—Å–µ–≥–æ", f"{total_area:,.1f} –≥–∞")
        with col3:
            total_water = sum([op[2].water_volume_m3 for op in operations if op[2] and op[2].water_volume_m3])
            st.metric("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –≤–æ–¥—ã", f"{total_water:,.0f} –º¬≥")
    else:
        st.info("üì≠ –ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞")
