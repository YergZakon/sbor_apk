"""
Import - –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel
–ü–æ–¥–¥–µ—Ä–∂–∫–∞ 10 —Ç–∏–ø–æ–≤ —Ñ–∞–π–ª–æ–≤ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
"""
import streamlit as st
import pandas as pd
import io
from datetime import datetime
from sqlalchemy.orm import Session
from modules.database import SessionLocal, Farm, Field, Operation, AgrochemicalAnalysis, EconomicData, HarvestData, SowingDetail, FertilizerApplication
from modules.validators import validator
from modules.config import settings

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(page_title="–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", page_icon="üì•", layout="wide")

# –ó–∞–≥–æ–ª–æ–≤–æ–∫
st.title("üì• –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel")

st.markdown("""
–ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel-—Ñ–∞–π–ª—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —Å–∏—Å—Ç–µ–º—É.
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –∏–∑ –ø–∞–ø–∫–∏ `examples/`.
""")

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ë–î
db = SessionLocal()

try:
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ö–æ–∑—è–π—Å—Ç–≤–∞
    farm = db.query(Farm).first()

    if not farm:
        st.warning("‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Ö–æ–∑—è–π—Å—Ç–≤–æ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ")

    # ============================================================================
    # –í–´–ë–û–† –¢–ò–ü–ê –î–ê–ù–ù–´–•
    # ============================================================================

    st.markdown("### üìÅ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞")

    data_types = {
        "01 - –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Ö–æ–∑—è–π—Å—Ç–≤–∞": {
            "description": "–ë–ò–ù, –Ω–∞–∑–≤–∞–Ω–∏–µ, –∫–æ–Ω—Ç–∞–∫—Ç—ã, –ø–ª–æ—â–∞–¥–∏",
            "template": "01_–û–±—â–∞—è_–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è_—Ö–æ–∑—è–π—Å—Ç–≤–∞.xlsx",
            "icon": "üè¢"
        },
        "02 - –ü–∞—Å–ø–æ—Ä—Ç –ø–æ–ª–µ–π": {
            "description": "–ü–æ–ª—è —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏",
            "template": "02_–ü–∞—Å–ø–æ—Ä—Ç_–ø–æ–ª–µ–π.xlsx",
            "icon": "üå±"
        },
        "03 - –ê–≥—Ä–æ—Ö–∏–º–∏—á–µ—Å–∫–∏–µ –∞–Ω–∞–ª–∏–∑—ã": {
            "description": "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–æ–≤ –ø–æ—á–≤—ã",
            "template": "03_–ê–≥—Ä–æ—Ö–∏–º–∏—á–µ—Å–∫–∏–µ_–∞–Ω–∞–ª–∏–∑—ã.xlsx",
            "icon": "üß™"
        },
        "04 - –ñ—É—Ä–Ω–∞–ª –ø–æ–ª–µ–≤—ã—Ö —Ä–∞–±–æ—Ç": {
            "description": "–ò—Å—Ç–æ—Ä–∏—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π (–ø–æ—Å–µ–≤, –æ–±—Ä–∞–±–æ—Ç–∫–∏)",
            "template": "04_–ñ—É—Ä–Ω–∞–ª_–ø–æ–ª–µ–≤—ã—Ö_—Ä–∞–±–æ—Ç_2023_2025.xlsx",
            "icon": "üìù"
        },
        "05 - –£—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å": {
            "description": "–î–∞–Ω–Ω—ã–µ —É–±–æ—Ä–∫–∏ —É—Ä–æ–∂–∞—è –ø–æ –≥–æ–¥–∞–º",
            "template": "05_–£—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å_—Å–≤–æ–¥–Ω–∞—è_2023_2025.xlsx",
            "icon": "üåæ"
        },
        "06 - –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ": {
            "description": "–ó–∞—Ç—Ä–∞—Ç—ã, –¥–æ—Ö–æ–¥—ã, —Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å",
            "template": "06_–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ_–¥–∞–Ω–Ω—ã–µ_2023_2025.xlsx",
            "icon": "üí∞"
        },
        "07 - –ú–µ—Ç–µ–æ–¥–∞–Ω–Ω—ã–µ": {
            "description": "–ü–æ–≥–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, –æ—Å–∞–¥–∫–∏)",
            "template": "07_–ú–µ—Ç–µ–æ–¥–∞–Ω–Ω—ã–µ_2023_2025.xlsx",
            "icon": "üå°Ô∏è"
        },
        "08 - –î–∞–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏ (GPS)": {
            "description": "GPS-—Ç—Ä–µ–∫–∏ —Ç–µ—Ö–Ω–∏–∫–∏",
            "template": "08_–î–∞–Ω–Ω—ã–µ_—Ç–µ—Ö–Ω–∏–∫–∏_2023_2025.xlsx",
            "icon": "üì°"
        },
        "09 - –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—Å–Ω–∞—â–µ–Ω–Ω–æ—Å—Ç—å": {
            "description": "GPS/RTK –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ",
            "template": "09_–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è_–æ—Å–Ω–∞—â–µ–Ω–Ω–æ—Å—Ç—å.xlsx",
            "icon": "üöú"
        },
        "10 - –°–ø—É—Ç–Ω–∏–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (NDVI)": {
            "description": "–ò–Ω–¥–µ–∫—Å—ã –≤–µ–≥–µ—Ç–∞—Ü–∏–∏ NDVI/EVI",
            "template": "10_–°–ø—É—Ç–Ω–∏–∫–æ–≤—ã–µ_–¥–∞–Ω–Ω—ã–µ_NDVI_2023_2025.xlsx",
            "icon": "üõ∞Ô∏è"
        }
    }

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
    cols = st.columns(2)

    for idx, (data_type, info) in enumerate(data_types.items()):
        with cols[idx % 2]:
            with st.container():
                st.markdown(f"### {info['icon']} {data_type}")
                st.caption(info['description'])
                st.caption(f"üìÑ –®–∞–±–ª–æ–Ω: `{info['template']}`")

    st.markdown("---")

    # ============================================================================
    # –ó–ê–ì–†–£–ó–ö–ê –§–ê–ô–õ–ê
    # ============================================================================

    selected_type = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö",
        options=list(data_types.keys()),
        help="–¢–∏–ø –¥–∞–Ω–Ω—ã—Ö –¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –∑–∞–≥—Ä—É–∂–∞–µ–º–æ–º—É —Ñ–∞–π–ª—É"
    )

    st.markdown(f"### {data_types[selected_type]['icon']} –ó–∞–≥—Ä—É–∑–∫–∞: {selected_type}")

    uploaded_file = st.file_uploader(
        "–í—ã–±–µ—Ä–∏—Ç–µ Excel —Ñ–∞–π–ª",
        type=['xlsx', 'xls'],
        help=f"–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ {data_types[selected_type]['template']}"
    )

    if uploaded_file:
        try:
            # –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
            with st.spinner("–ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞..."):
                # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∏–º–ø–æ—Ä—Ç–∞
                if "01 - –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è" in selected_type:
                    # –§–∞–π–ª —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ª–∏—Å—Ç–∞–º–∏
                    excel_file = pd.ExcelFile(uploaded_file)
                    sheets = excel_file.sheet_names

                    st.success(f"‚úÖ –§–∞–π–ª –ø—Ä–æ—á–∏—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ! –ù–∞–π–¥–µ–Ω–æ –ª–∏—Å—Ç–æ–≤: {len(sheets)}")

                    # –ü–æ–∫–∞–∑–∞—Ç—å –ª–∏—Å—Ç—ã
                    st.markdown("#### üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ª–∏—Å—Ç—ã:")
                    for sheet in sheets:
                        st.markdown(f"- {sheet}")

                    # –ß—Ç–µ–Ω–∏–µ –ª–∏—Å—Ç–∞ "–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è"
                    if "–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è" in sheets:
                        df = pd.read_excel(uploaded_file, sheet_name="–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è")
                        st.markdown("#### –ü—Ä–µ–≤—å—é –¥–∞–Ω–Ω—ã—Ö (–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è):")
                        st.dataframe(df.head(10), use_container_width=True)

                        # –í–∞–ª–∏–¥–∞—Ü–∏—è
                        st.markdown("#### ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö")

                        errors = []
                        warnings = []

                        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
                        data_dict = dict(zip(df.iloc[:, 0], df.iloc[:, 1]))

                        bin_value = data_dict.get("–ë–ò–ù")
                        if bin_value and not pd.isna(bin_value):
                            is_valid, msg = validator.validate_bin(str(bin_value))
                            if not is_valid:
                                errors.append(f"–ë–ò–ù: {msg}")
                        else:
                            errors.append("–ë–ò–ù –Ω–µ —É–∫–∞–∑–∞–Ω –∏–ª–∏ –ø—É—Å—Ç–æ–π")

                        phone_value = data_dict.get("–¢–µ–ª–µ—Ñ–æ–Ω")
                        if phone_value and not pd.isna(phone_value):
                            is_valid, msg = validator.validate_phone(str(phone_value))
                            if not is_valid:
                                errors.append(f"–¢–µ–ª–µ—Ñ–æ–Ω: {msg}")

                        # –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏
                        if errors:
                            st.error(f"‚ùå –ù–∞–π–¥–µ–Ω–æ {len(errors)} –æ—à–∏–±–æ–∫:")
                            for error in errors:
                                st.error(f"  ‚Ä¢ {error}")
                        else:
                            st.success("‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")

                        if warnings:
                            st.warning(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è ({len(warnings)}):")
                            for warning in warnings:
                                st.warning(f"  ‚Ä¢ {warning}")

                        # –ö–Ω–æ–ø–∫–∞ –∏–º–ø–æ—Ä—Ç–∞
                        if not errors:
                            if st.button("üì• –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Ö–æ–∑—è–π—Å—Ç–≤–∞", type="primary"):
                                with st.spinner("–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö..."):
                                    try:
                                        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ö–æ–∑—è–π—Å—Ç–≤–∞
                                        existing_farm = db.query(Farm).filter(Farm.bin == str(bin_value)).first()

                                        if existing_farm:
                                            st.warning("‚ö†Ô∏è –•–æ–∑—è–π—Å—Ç–≤–æ —Å —Ç–∞–∫–∏–º –ë–ò–ù —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...")
                                            farm_to_update = existing_farm
                                        else:
                                            farm_to_update = Farm(bin=str(bin_value))
                                            db.add(farm_to_update)

                                        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π
                                        farm_to_update.name = data_dict.get("–ü–æ–ª–Ω–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "")
                                        farm_to_update.contact_person = data_dict.get("–ö–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ (–§–ò–û)")
                                        farm_to_update.phone = str(phone_value) if phone_value else None

                                        db.commit()
                                        st.success("‚úÖ –î–∞–Ω–Ω—ã–µ —Ö–æ–∑—è–π—Å—Ç–≤–∞ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã!")
                                        st.balloons()

                                    except Exception as e:
                                        db.rollback()
                                        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ: {str(e)}")

                    else:
                        st.error("‚ùå –õ–∏—Å—Ç '–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ñ–∞–π–ª–µ")

                elif "02 - –ü–∞—Å–ø–æ—Ä—Ç" in selected_type:
                    # –ò–º–ø–æ—Ä—Ç –ø–æ–ª–µ–π
                    df = pd.read_excel(uploaded_file)

                    st.success(f"‚úÖ –§–∞–π–ª –ø—Ä–æ—á–∏—Ç–∞–Ω! –ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫: {len(df)}")

                    # –ü—Ä–µ–≤—å—é
                    st.markdown("#### –ü—Ä–µ–≤—å—é –¥–∞–Ω–Ω—ã—Ö:")
                    st.dataframe(df.head(10), use_container_width=True)

                    # –í–∞–ª–∏–¥–∞—Ü–∏—è
                    st.markdown("#### ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö")

                    errors = []
                    warnings = []

                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
                    required_cols = ['ID –ø–æ–ª—è', '–ü–ª–æ—â–∞–¥—å (–≥–∞)']
                    for col in required_cols:
                        if col not in df.columns:
                            errors.append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –∫–æ–ª–æ–Ω–∫–∞: {col}")

                    if not errors:
                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
                        valid_rows = 0
                        for idx, row in df.iterrows():
                            if pd.isna(row.get('ID –ø–æ–ª—è')) or pd.isna(row.get('–ü–ª–æ—â–∞–¥—å (–≥–∞)')):
                                continue

                            valid_rows += 1

                            # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–ª–æ—â–∞–¥–∏
                            area = row.get('–ü–ª–æ—â–∞–¥—å (–≥–∞)')
                            if area and area > 0:
                                is_valid, msg = validator.validate_area(area)
                                if not is_valid:
                                    errors.append(f"–°—Ç—Ä–æ–∫–∞ {idx + 2}: {msg}")

                        st.info(f"‚ÑπÔ∏è –ù–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö —Å—Ç—Ä–æ–∫ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞: {valid_rows}")

                    # –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                    if errors:
                        st.error(f"‚ùå –ù–∞–π–¥–µ–Ω–æ –æ—à–∏–±–æ–∫: {len(errors)}")
                        for error in errors[:10]:  # –ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—ã–µ 10
                            st.error(f"  ‚Ä¢ {error}")
                        if len(errors) > 10:
                            st.caption(f"... –∏ –µ—â–µ {len(errors) - 10} –æ—à–∏–±–æ–∫")
                    else:
                        st.success("‚úÖ –î–∞–Ω–Ω—ã–µ –≥–æ—Ç–æ–≤—ã –∫ –∏–º–ø–æ—Ä—Ç—É!")

                    if warnings:
                        st.warning(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {len(warnings)}")
                        for warning in warnings[:5]:
                            st.warning(f"  ‚Ä¢ {warning}")

                    # –ö–Ω–æ–ø–∫–∞ –∏–º–ø–æ—Ä—Ç–∞
                    if not errors and valid_rows > 0:
                        if st.button("üì• –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—è", type="primary"):
                            with st.spinner(f"–ò–º–ø–æ—Ä—Ç {valid_rows} –ø–æ–ª–µ–π..."):
                                try:
                                    if not farm:
                                        st.error("‚ùå –°–Ω–∞—á–∞–ª–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ —Ö–æ–∑—è–π—Å—Ç–≤–∞ (—Ç–∏–ø 01)")
                                        st.stop()

                                    imported_count = 0

                                    for idx, row in df.iterrows():
                                        if pd.isna(row.get('ID –ø–æ–ª—è')) or pd.isna(row.get('–ü–ª–æ—â–∞–¥—å (–≥–∞)')):
                                            continue

                                        field_code = str(row['ID –ø–æ–ª—è'])
                                        area = float(row['–ü–ª–æ—â–∞–¥—å (–≥–∞)'])

                                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è
                                        existing = db.query(Field).filter(Field.field_code == field_code).first()

                                        if not existing:
                                            new_field = Field(
                                                farm_id=farm.id,
                                                field_code=field_code,
                                                name=row.get('–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—è') if not pd.isna(row.get('–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—è')) else None,
                                                area_ha=area,
                                                cadastral_number=row.get('–ö–∞–¥–∞—Å—Ç—Ä–æ–≤—ã–π –Ω–æ–º–µ—Ä') if not pd.isna(row.get('–ö–∞–¥–∞—Å—Ç—Ä–æ–≤—ã–π –Ω–æ–º–µ—Ä')) else None,
                                                center_lat=row.get('–¶–µ–Ω—Ç—Ä–æ–∏–¥ —à–∏—Ä–æ—Ç–∞') if not pd.isna(row.get('–¶–µ–Ω—Ç—Ä–æ–∏–¥ —à–∏—Ä–æ—Ç–∞')) else None,
                                                center_lon=row.get('–¶–µ–Ω—Ç—Ä–æ–∏–¥ –¥–æ–ª–≥–æ—Ç–∞') if not pd.isna(row.get('–¶–µ–Ω—Ç—Ä–æ–∏–¥ –¥–æ–ª–≥–æ—Ç–∞')) else None,
                                                soil_type=row.get('–¢–∏–ø –ø–æ—á–≤—ã') if not pd.isna(row.get('–¢–∏–ø –ø–æ—á–≤—ã')) else None,
                                                ph_water=row.get('pH –≤–æ–¥–Ω') if not pd.isna(row.get('pH –≤–æ–¥–Ω')) else None,
                                                humus_pct=row.get('–ì—É–º—É—Å (%)') if not pd.isna(row.get('–ì—É–º—É—Å (%)')) else None,
                                                p2o5_mg_kg=row.get('P2O5 (–º–≥/–∫–≥)') if not pd.isna(row.get('P2O5 (–º–≥/–∫–≥)')) else None,
                                                k2o_mg_kg=row.get('K2O (–º–≥/–∫–≥)') if not pd.isna(row.get('K2O (–º–≥/–∫–≥)')) else None,
                                            )
                                            db.add(new_field)
                                            imported_count += 1

                                    db.commit()
                                    st.success(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {imported_count} –ø–æ–ª–µ–π!")
                                    st.balloons()

                                    # –°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä
                                    if st.button("üå± –ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–ª—è–º"):
                                        st.switch_page("pages/2_üå±_Fields.py")

                                except Exception as e:
                                    db.rollback()
                                    st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ: {str(e)}")

                elif "03 - –ê–≥—Ä–æ—Ö–∏–º–∏—á–µ—Å–∫–∏–µ" in selected_type:
                    # –ò–º–ø–æ—Ä—Ç –∞–≥—Ä–æ—Ö–∏–º–∏—á–µ—Å–∫–∏—Ö –∞–Ω–∞–ª–∏–∑–æ–≤
                    df = pd.read_excel(uploaded_file)

                    st.success(f"‚úÖ –§–∞–π–ª –ø—Ä–æ—á–∏—Ç–∞–Ω! –ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫: {len(df)}")

                    # –ü—Ä–µ–≤—å—é
                    st.markdown("#### –ü—Ä–µ–≤—å—é –¥–∞–Ω–Ω—ã—Ö:")
                    st.dataframe(df.head(10), use_container_width=True)

                    # –í–∞–ª–∏–¥–∞—Ü–∏—è
                    st.markdown("#### ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö")

                    errors = []
                    warnings = []

                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
                    required_cols = ['ID –ø–æ–ª—è', '–î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞']
                    for col in required_cols:
                        if col not in df.columns:
                            errors.append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –∫–æ–ª–æ–Ω–∫–∞: {col}")

                    if not errors:
                        valid_rows = 0
                        for idx, row in df.iterrows():
                            if pd.isna(row.get('ID –ø–æ–ª—è')) or pd.isna(row.get('–î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞')):
                                continue

                            valid_rows += 1

                            # –í–∞–ª–∏–¥–∞—Ü–∏—è pH
                            ph = row.get('pH –≤–æ–¥–Ω')
                            if ph and not pd.isna(ph):
                                is_valid, msg = validator.validate_ph(float(ph))
                                if not is_valid:
                                    warnings.append(f"–°—Ç—Ä–æ–∫–∞ {idx + 2}: {msg}")

                        st.info(f"‚ÑπÔ∏è –ù–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö —Å—Ç—Ä–æ–∫: {valid_rows}")

                    # –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                    if errors:
                        st.error(f"‚ùå –ù–∞–π–¥–µ–Ω–æ –æ—à–∏–±–æ–∫: {len(errors)}")
                        for error in errors:
                            st.error(f"  ‚Ä¢ {error}")
                    else:
                        st.success("‚úÖ –î–∞–Ω–Ω—ã–µ –≥–æ—Ç–æ–≤—ã –∫ –∏–º–ø–æ—Ä—Ç—É!")

                    if warnings:
                        st.warning(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {len(warnings)}")
                        for warning in warnings[:5]:
                            st.warning(f"  ‚Ä¢ {warning}")

                    # –ö–Ω–æ–ø–∫–∞ –∏–º–ø–æ—Ä—Ç–∞
                    if not errors and valid_rows > 0:
                        if st.button("üì• –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∞–ª–∏–∑—ã", type="primary"):
                            with st.spinner(f"–ò–º–ø–æ—Ä—Ç {valid_rows} –∞–Ω–∞–ª–∏–∑–æ–≤..."):
                                try:
                                    if not farm:
                                        st.error("‚ùå –°–Ω–∞—á–∞–ª–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ —Ö–æ–∑—è–π—Å—Ç–≤–∞ (—Ç–∏–ø 01)")
                                        st.stop()

                                    imported_count = 0

                                    for idx, row in df.iterrows():
                                        if pd.isna(row.get('ID –ø–æ–ª—è')) or pd.isna(row.get('–î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞')):
                                            continue

                                        field_code = str(row['ID –ø–æ–ª—è'])
                                        field = db.query(Field).filter(Field.field_code == field_code).first()

                                        if not field:
                                            st.warning(f"‚ö†Ô∏è –ü–æ–ª–µ {field_code} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–ø—É—Å–∫...")
                                            continue

                                        # –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã
                                        analysis_date = pd.to_datetime(row['–î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞']).date()

                                        # –°–æ–∑–¥–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
                                        operation = Operation(
                                            farm_id=farm.id,
                                            field_id=field.id,
                                            operation_type="soil_analysis",
                                            operation_date=analysis_date,
                                            area_processed_ha=field.area_ha
                                        )
                                        db.add(operation)
                                        db.flush()

                                        # –°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞
                                        analysis = AgrochemicalAnalysis(
                                            operation_id=operation.id,
                                            sample_depth_cm=row.get('–ì–ª—É–±–∏–Ω–∞ –æ—Ç–±–æ—Ä–∞ (—Å–º)') if not pd.isna(row.get('–ì–ª—É–±–∏–Ω–∞ –æ—Ç–±–æ—Ä–∞ (—Å–º)')) else None,
                                            ph_water=row.get('pH –≤–æ–¥–Ω') if not pd.isna(row.get('pH –≤–æ–¥–Ω')) else None,
                                            ph_salt=row.get('pH —Å–æ–ª') if not pd.isna(row.get('pH —Å–æ–ª')) else None,
                                            humus_percent=row.get('–ì—É–º—É—Å (%)') if not pd.isna(row.get('–ì—É–º—É—Å (%)')) else None,
                                            nitrogen_total_percent=row.get('N –æ–±—â–∏–π (%)') if not pd.isna(row.get('N –æ–±—â–∏–π (%)')) else None,
                                            p2o5_mg_kg=row.get('P2O5 (–º–≥/–∫–≥)') if not pd.isna(row.get('P2O5 (–º–≥/–∫–≥)')) else None,
                                            k2o_mg_kg=row.get('K2O (–º–≥/–∫–≥)') if not pd.isna(row.get('K2O (–º–≥/–∫–≥)')) else None,
                                            mobile_s_mg_kg=row.get('S –ø–æ–¥–≤. (–º–≥/–∫–≥)') if not pd.isna(row.get('S –ø–æ–¥–≤. (–º–≥/–∫–≥)')) else None
                                        )
                                        db.add(analysis)
                                        imported_count += 1

                                    db.commit()
                                    st.success(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {imported_count} –∞–Ω–∞–ª–∏–∑–æ–≤!")
                                    st.balloons()

                                except Exception as e:
                                    db.rollback()
                                    st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ: {str(e)}")

                elif "04 - –ñ—É—Ä–Ω–∞–ª" in selected_type:
                    # –ò–º–ø–æ—Ä—Ç –∂—É—Ä–Ω–∞–ª–∞ —Ä–∞–±–æ—Ç
                    df = pd.read_excel(uploaded_file)

                    st.success(f"‚úÖ –§–∞–π–ª –ø—Ä–æ—á–∏—Ç–∞–Ω! –ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫: {len(df)}")

                    # –ü—Ä–µ–≤—å—é
                    st.markdown("#### –ü—Ä–µ–≤—å—é –¥–∞–Ω–Ω—ã—Ö:")
                    st.dataframe(df.head(10), use_container_width=True)

                    # –í–∞–ª–∏–¥–∞—Ü–∏—è
                    st.markdown("#### ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö")

                    errors = []
                    valid_rows = 0

                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
                    required_cols = ['ID –ø–æ–ª—è', '–î–∞—Ç–∞', '–¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏']
                    for col in required_cols:
                        if col not in df.columns:
                            errors.append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –∫–æ–ª–æ–Ω–∫–∞: {col}")

                    if not errors:
                        for idx, row in df.iterrows():
                            if pd.isna(row.get('ID –ø–æ–ª—è')) or pd.isna(row.get('–î–∞—Ç–∞')) or pd.isna(row.get('–¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏')):
                                continue
                            valid_rows += 1

                        st.info(f"‚ÑπÔ∏è –ù–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö —Å—Ç—Ä–æ–∫: {valid_rows}")

                    # –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                    if errors:
                        st.error(f"‚ùå –ù–∞–π–¥–µ–Ω–æ –æ—à–∏–±–æ–∫: {len(errors)}")
                        for error in errors:
                            st.error(f"  ‚Ä¢ {error}")
                    else:
                        st.success("‚úÖ –î–∞–Ω–Ω—ã–µ –≥–æ—Ç–æ–≤—ã –∫ –∏–º–ø–æ—Ä—Ç—É!")

                    # –ö–Ω–æ–ø–∫–∞ –∏–º–ø–æ—Ä—Ç–∞
                    if not errors and valid_rows > 0:
                        if st.button("üì• –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏", type="primary"):
                            with st.spinner(f"–ò–º–ø–æ—Ä—Ç {valid_rows} –æ–ø–µ—Ä–∞—Ü–∏–π..."):
                                try:
                                    if not farm:
                                        st.error("‚ùå –°–Ω–∞—á–∞–ª–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ —Ö–æ–∑—è–π—Å—Ç–≤–∞ (—Ç–∏–ø 01)")
                                        st.stop()

                                    imported_count = 0
                                    operation_type_map = {
                                        "–ü–æ—Å–µ–≤": "sowing",
                                        "–í–Ω–µ—Å–µ–Ω–∏–µ —É–¥–æ–±—Ä–µ–Ω–∏–π": "fertilizing",
                                        "–û–ø—Ä—ã—Å–∫–∏–≤–∞–Ω–∏–µ": "spraying",
                                        "–£–±–æ—Ä–∫–∞": "harvest"
                                    }

                                    for idx, row in df.iterrows():
                                        if pd.isna(row.get('ID –ø–æ–ª—è')) or pd.isna(row.get('–î–∞—Ç–∞')) or pd.isna(row.get('–¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏')):
                                            continue

                                        field_code = str(row['ID –ø–æ–ª—è'])
                                        field = db.query(Field).filter(Field.field_code == field_code).first()

                                        if not field:
                                            continue

                                        # –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã
                                        op_date = pd.to_datetime(row['–î–∞—Ç–∞']).date()
                                        op_type_ru = str(row['–¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏'])
                                        op_type = operation_type_map.get(op_type_ru, "other")

                                        # –°–æ–∑–¥–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
                                        operation = Operation(
                                            farm_id=farm.id,
                                            field_id=field.id,
                                            operation_type=op_type,
                                            operation_date=op_date,
                                            area_processed_ha=row.get('–ü–ª–æ—â–∞–¥—å (–≥–∞)') if not pd.isna(row.get('–ü–ª–æ—â–∞–¥—å (–≥–∞)')) else field.area_ha,
                                            notes=row.get('–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ') if not pd.isna(row.get('–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ')) else None
                                        )
                                        db.add(operation)
                                        imported_count += 1

                                    db.commit()
                                    st.success(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {imported_count} –æ–ø–µ—Ä–∞—Ü–∏–π!")
                                    st.balloons()

                                except Exception as e:
                                    db.rollback()
                                    st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ: {str(e)}")

                elif "05 - –£—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å" in selected_type:
                    # –ò–º–ø–æ—Ä—Ç —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç–∏
                    df = pd.read_excel(uploaded_file)

                    st.success(f"‚úÖ –§–∞–π–ª –ø—Ä–æ—á–∏—Ç–∞–Ω! –ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫: {len(df)}")

                    # –ü—Ä–µ–≤—å—é
                    st.markdown("#### –ü—Ä–µ–≤—å—é –¥–∞–Ω–Ω—ã—Ö:")
                    st.dataframe(df.head(10), use_container_width=True)

                    # –í–∞–ª–∏–¥–∞—Ü–∏—è
                    st.markdown("#### ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö")

                    errors = []
                    valid_rows = 0

                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
                    required_cols = ['ID –ø–æ–ª—è', '–ì–æ–¥', '–ö—É–ª—å—Ç—É—Ä–∞', '–£—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å (—Ç/–≥–∞)']
                    for col in required_cols:
                        if col not in df.columns:
                            errors.append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –∫–æ–ª–æ–Ω–∫–∞: {col}")

                    if not errors:
                        for idx, row in df.iterrows():
                            if pd.isna(row.get('ID –ø–æ–ª—è')) or pd.isna(row.get('–ì–æ–¥')) or pd.isna(row.get('–£—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å (—Ç/–≥–∞)')):
                                continue

                            valid_rows += 1

                            # –í–∞–ª–∏–¥–∞—Ü–∏—è —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç–∏
                            yield_val = row.get('–£—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å (—Ç/–≥–∞)')
                            if yield_val:
                                is_valid, msg = validator.validate_yield(float(yield_val), "wheat")
                                if not is_valid:
                                    errors.append(f"–°—Ç—Ä–æ–∫–∞ {idx + 2}: {msg}")

                        st.info(f"‚ÑπÔ∏è –ù–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö —Å—Ç—Ä–æ–∫: {valid_rows}")

                    # –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                    if errors:
                        st.error(f"‚ùå –ù–∞–π–¥–µ–Ω–æ –æ—à–∏–±–æ–∫: {len(errors)}")
                        for error in errors[:10]:
                            st.error(f"  ‚Ä¢ {error}")
                    else:
                        st.success("‚úÖ –î–∞–Ω–Ω—ã–µ –≥–æ—Ç–æ–≤—ã –∫ –∏–º–ø–æ—Ä—Ç—É!")

                    # –ö–Ω–æ–ø–∫–∞ –∏–º–ø–æ—Ä—Ç–∞
                    if not errors and valid_rows > 0:
                        if st.button("üì• –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å", type="primary"):
                            with st.spinner(f"–ò–º–ø–æ—Ä—Ç {valid_rows} –∑–∞–ø–∏—Å–µ–π..."):
                                try:
                                    if not farm:
                                        st.error("‚ùå –°–Ω–∞—á–∞–ª–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ —Ö–æ–∑—è–π—Å—Ç–≤–∞ (—Ç–∏–ø 01)")
                                        st.stop()

                                    imported_count = 0

                                    for idx, row in df.iterrows():
                                        if pd.isna(row.get('ID –ø–æ–ª—è')) or pd.isna(row.get('–ì–æ–¥')) or pd.isna(row.get('–£—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å (—Ç/–≥–∞)')):
                                            continue

                                        field_code = str(row['ID –ø–æ–ª—è'])
                                        field = db.query(Field).filter(Field.field_code == field_code).first()

                                        if not field:
                                            continue

                                        # –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö
                                        year = int(row['–ì–æ–¥'])
                                        # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º –¥–∞—Ç—É —É–±–æ—Ä–∫–∏ - 15 –∞–≤–≥—É—Å—Ç–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≥–æ–¥–∞
                                        harvest_date = datetime(year, 8, 15).date()

                                        yield_t_ha = float(row['–£—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å (—Ç/–≥–∞)'])
                                        area = row.get('–ü–ª–æ—â–∞–¥—å (–≥–∞)') if not pd.isna(row.get('–ü–ª–æ—â–∞–¥—å (–≥–∞)')) else field.area_ha
                                        total_yield = yield_t_ha * area

                                        # –°–æ–∑–¥–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
                                        operation = Operation(
                                            farm_id=farm.id,
                                            field_id=field.id,
                                            operation_type="harvest",
                                            operation_date=harvest_date,
                                            area_processed_ha=area
                                        )
                                        db.add(operation)
                                        db.flush()

                                        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —É–±–æ—Ä–∫–∏
                                        harvest = HarvestData(
                                            operation_id=operation.id,
                                            crop=row.get('–ö—É–ª—å—Ç—É—Ä–∞') if not pd.isna(row.get('–ö—É–ª—å—Ç—É—Ä–∞')) else "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
                                            variety=row.get('–°–æ—Ä—Ç') if not pd.isna(row.get('–°–æ—Ä—Ç')) else None,
                                            yield_t_ha=yield_t_ha,
                                            total_yield_t=total_yield,
                                            moisture_percent=row.get('–í–ª–∞–∂–Ω–æ—Å—Ç—å (%)') if not pd.isna(row.get('–í–ª–∞–∂–Ω–æ—Å—Ç—å (%)')) else None,
                                            protein_percent=row.get('–ë–µ–ª–æ–∫ (%)') if not pd.isna(row.get('–ë–µ–ª–æ–∫ (%)')) else None,
                                            gluten_percent=row.get('–ö–ª–µ–π–∫–æ–≤–∏–Ω–∞ (%)') if not pd.isna(row.get('–ö–ª–µ–π–∫–æ–≤–∏–Ω–∞ (%)')) else None
                                        )
                                        db.add(harvest)
                                        imported_count += 1

                                    db.commit()
                                    st.success(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {imported_count} –∑–∞–ø–∏—Å–µ–π —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç–∏!")
                                    st.balloons()

                                except Exception as e:
                                    db.rollback()
                                    st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ: {str(e)}")

                else:
                    # –û–±—â–∏–π –∏–º–ø–æ—Ä—Ç –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤
                    df = pd.read_excel(uploaded_file)

                    st.success(f"‚úÖ –§–∞–π–ª –ø—Ä–æ—á–∏—Ç–∞–Ω! –ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫: {len(df)}, –∫–æ–ª–æ–Ω–æ–∫: {len(df.columns)}")

                    # –ü—Ä–µ–≤—å—é
                    st.markdown("#### –ü—Ä–µ–≤—å—é –¥–∞–Ω–Ω—ã—Ö:")
                    st.dataframe(df.head(20), use_container_width=True)

                    st.info("""
                    üí° **–ü–æ–ª–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏.**

                    –°–µ–π—á–∞—Å –¥–æ—Å—Ç—É–ø–µ–Ω –∏–º–ø–æ—Ä—Ç:
                    - ‚úÖ –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Ö–æ–∑—è–π—Å—Ç–≤–∞ (—Ç–∏–ø 01)
                    - ‚úÖ –ü–∞—Å–ø–æ—Ä—Ç –ø–æ–ª–µ–π (—Ç–∏–ø 02)
                    - ‚úÖ –ê–≥—Ä–æ—Ö–∏–º–∏—á–µ—Å–∫–∏–µ –∞–Ω–∞–ª–∏–∑—ã (—Ç–∏–ø 03)
                    - ‚úÖ –ñ—É—Ä–Ω–∞–ª –ø–æ–ª–µ–≤—ã—Ö —Ä–∞–±–æ—Ç (—Ç–∏–ø 04)
                    - ‚úÖ –£—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å (—Ç–∏–ø 05)

                    –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.
                    """)

        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}")
            st.exception(e)

    st.markdown("---")

    # ============================================================================
    # –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –®–ê–ë–õ–û–ù–ê–•
    # ============================================================================

    st.markdown("### üìö –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —à–∞–±–ª–æ–Ω–∞—Ö")

    with st.expander("–ì–¥–µ –Ω–∞–π—Ç–∏ —à–∞–±–ª–æ–Ω—ã?"):
        st.markdown("""
        –®–∞–±–ª–æ–Ω—ã Excel –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –ø–∞–ø–∫–µ `examples/` –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞:

        ```
        fsai/examples/
        ‚îú‚îÄ‚îÄ 01_–û–±—â–∞—è_–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è_—Ö–æ–∑—è–π—Å—Ç–≤–∞.xlsx
        ‚îú‚îÄ‚îÄ 02_–ü–∞—Å–ø–æ—Ä—Ç_–ø–æ–ª–µ–π.xlsx
        ‚îú‚îÄ‚îÄ 03_–ê–≥—Ä–æ—Ö–∏–º–∏—á–µ—Å–∫–∏–µ_–∞–Ω–∞–ª–∏–∑—ã.xlsx
        ‚îî‚îÄ‚îÄ ... (–≤—Å–µ–≥–æ 10 —Ñ–∞–π–ª–æ–≤)
        ```

        **–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –ø–æ—Ä—è–¥–æ–∫ –∏–º–ø–æ—Ä—Ç–∞:**
        1. –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Ö–æ–∑—è–π—Å—Ç–≤–∞ (01)
        2. –ü–∞—Å–ø–æ—Ä—Ç –ø–æ–ª–µ–π (02)
        3. –ê–≥—Ä–æ—Ö–∏–º–∏—á–µ—Å–∫–∏–µ –∞–Ω–∞–ª–∏–∑—ã (03)
        4. –ñ—É—Ä–Ω–∞–ª –ø–æ–ª–µ–≤—ã—Ö —Ä–∞–±–æ—Ç (04)
        5. –û—Å—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        """)

    with st.expander("–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ñ–∞–π–ª–∞–º"):
        st.markdown("""
        **–§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–æ–≤:**
        - Excel 2007+ (.xlsx) –∏–ª–∏ Excel 97-2003 (.xls)
        - –ö–æ–¥–∏—Ä–æ–≤–∫–∞: UTF-8
        - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 50 –ú–ë

        **–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö:**
        - –ù–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫ –¥–æ–ª–∂–Ω—ã —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å —à–∞–±–ª–æ–Ω–æ–º
        - –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ - –∑–∞–≥–æ–ª–æ–≤–∫–∏
        - –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –Ω–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏
        - –î–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD –∏–ª–∏ DD.MM.YYYY

        **–í–∞–ª–∏–¥–∞—Ü–∏—è:**
        - –ë–ò–ù: 12 —Ü–∏—Ñ—Ä
        - –¢–µ–ª–µ—Ñ–æ–Ω: +7XXXXXXXXXX
        - –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞
        - –ü–ª–æ—â–∞–¥–∏: –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —á–∏—Å–ª–∞
        - pH: 4.0-9.5
        """)

finally:
    db.close()

# Sidebar
with st.sidebar:
    st.markdown("### ‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞")
    st.info("""
    **–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö** –ø–æ–∑–≤–æ–ª—è–µ—Ç –±—ã—Å—Ç—Ä–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Excel.

    **–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã:**
    - ‚úÖ –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (01)
    - ‚úÖ –ü–∞—Å–ø–æ—Ä—Ç –ø–æ–ª–µ–π (02)
    - ‚úÖ –ê–≥—Ä–æ—Ö–∏–º–∏—è (03)
    - ‚úÖ –ñ—É—Ä–Ω–∞–ª —Ä–∞–±–æ—Ç (04)
    - ‚úÖ –£—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å (05)
    - ‚è≥ –û—Å—Ç–∞–ª—å–Ω—ã–µ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ

    **–ü—Ä–æ—Ü–µ—Å—Å –∏–º–ø–æ—Ä—Ç–∞:**
    1. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö
    2. –ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel —Ñ–∞–π–ª
    3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞–ª–∏–¥–∞—Ü–∏—é
    4. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ
    """)

    st.markdown("### üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
    st.markdown("""
    - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã
    - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –∏–º–ø–æ—Ä—Ç–æ–º
    - –î–µ–ª–∞–π—Ç–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏
    - –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –ø–æ—ç—Ç–∞–ø–Ω–æ
    """)

    st.markdown("### üìû –ü–æ–º–æ—â—å")
    st.markdown("""
    –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –∏–º–ø–æ—Ä—Ç–æ–º:
    - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞
    - –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
    - –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É
    """)
