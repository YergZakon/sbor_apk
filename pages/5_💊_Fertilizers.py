"""
Fertilizers - –£—á–µ—Ç –≤–Ω–µ—Å–µ–Ω–∏—è —É–¥–æ–±—Ä–µ–Ω–∏–π
"""
import streamlit as st
import pandas as pd
import json
from datetime import datetime, date
from pathlib import Path
import plotly.express as px
import plotly.graph_objects as go

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
import sys
sys.path.append(str(Path(__file__).parent.parent))

from modules.database import get_db, Farm, Field, Operation, FertilizerApplication
from modules.auth import (
    require_auth,
    require_farm_binding,
    filter_query_by_farm,
    get_user_display_name,
    can_edit_data,
    can_delete_data
)
from modules.validators import DataValidator
from utils.formatters import format_date, format_area, format_number, format_npk

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(page_title="–£–¥–æ–±—Ä–µ–Ω–∏—è", page_icon="üíä", layout="wide")

# –¢—Ä–µ–±—É–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∏ –ø—Ä–∏–≤—è–∑–∫—É –∫ —Ö–æ–∑—è–π—Å—Ç–≤—É
require_auth()
require_farm_binding()

st.title("üíä –£—á–µ—Ç –≤–Ω–µ—Å–µ–Ω–∏—è —É–¥–æ–±—Ä–µ–Ω–∏–π")
st.caption(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: **{get_user_display_name()}**")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞
validator = DataValidator()

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ —É–¥–æ–±—Ä–µ–Ω–∏–π
def load_fertilizers_reference():
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ —É–¥–æ–±—Ä–µ–Ω–∏–π –∏–∑ JSON"""
    reference_path = Path(__file__).parent.parent / "data" / "fertilizers.json"
    try:
        with open(reference_path, "r", encoding="utf-8") as f:
            return json.load(f)
    except FileNotFoundError:
        st.error("–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ —É–¥–æ–±—Ä–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return {}

fertilizers_ref = load_fertilizers_reference()

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
db = next(get_db())

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ö–æ–∑—è–π—Å—Ç–≤–∞
farm = filter_query_by_farm(db.query(Farm), Farm).first()
if not farm:
    st.warning("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∏–º–ø–æ—Ä—Ç–∞!")
    st.stop()

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª–µ–π
fields = filter_query_by_farm(db.query(Field), Field).all()
if not fields:
    st.warning("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –ø–æ–ª—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ '–ü–æ–ª—è'!")
    st.stop()

# –¢–∞–±—ã
tab1, tab2, tab3 = st.tabs(["üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤–Ω–µ—Å–µ–Ω–∏—è", "üìä –ò—Å—Ç–æ—Ä–∏—è –≤–Ω–µ—Å–µ–Ω–∏–π", "üìö –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ —É–¥–æ–±—Ä–µ–Ω–∏–π"])

# ========================================
# TAB 1: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤–Ω–µ—Å–µ–Ω–∏—è —É–¥–æ–±—Ä–µ–Ω–∏–π
# ========================================
with tab1:
    st.subheader("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤–Ω–µ—Å–µ–Ω–∏—è —É–¥–æ–±—Ä–µ–Ω–∏–π")

    with st.form("fertilizer_application_form"):
        col1, col2 = st.columns(2)

        with col1:
            # –í—ã–±–æ—Ä –ø–æ–ª—è
            field_options = {f"{f.field_code} - {f.name}": f for f in fields}
            selected_field_name = st.selectbox(
                "–ü–æ–ª–µ *",
                options=list(field_options.keys()),
                help="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è –≤–Ω–µ—Å–µ–Ω–∏—è —É–¥–æ–±—Ä–µ–Ω–∏–π"
            )
            selected_field = field_options[selected_field_name]

            # –î–∞—Ç–∞ –≤–Ω–µ—Å–µ–Ω–∏—è
            application_date = st.date_input(
                "–î–∞—Ç–∞ –≤–Ω–µ—Å–µ–Ω–∏—è *",
                value=date.today(),
                help="–î–∞—Ç–∞ –≤–Ω–µ—Å–µ–Ω–∏—è —É–¥–æ–±—Ä–µ–Ω–∏–π"
            )

            # –¢–∏–ø —É–¥–æ–±—Ä–µ–Ω–∏–π
            fertilizer_categories = list(fertilizers_ref.keys())
            selected_category = st.selectbox(
                "–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–¥–æ–±—Ä–µ–Ω–∏–π *",
                options=fertilizer_categories,
                help="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —É–¥–æ–±—Ä–µ–Ω–∏–π"
            )

            # –ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —É–¥–æ–±—Ä–µ–Ω–∏–µ
            fertilizer_names = list(fertilizers_ref[selected_category].keys()) if selected_category in fertilizers_ref else []
            selected_fertilizer = st.selectbox(
                "–£–¥–æ–±—Ä–µ–Ω–∏–µ *",
                options=fertilizer_names,
                help="–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —É–¥–æ–±—Ä–µ–Ω–∏–µ"
            )

        with col2:
            # –ù–æ—Ä–º–∞ –≤–Ω–µ—Å–µ–Ω–∏—è
            rate_kg_ha = st.number_input(
                "–ù–æ—Ä–º–∞ –≤–Ω–µ—Å–µ–Ω–∏—è (–∫–≥/–≥–∞) *",
                min_value=0.0,
                max_value=2000.0,
                value=100.0,
                step=10.0,
                help="–ù–æ—Ä–º–∞ –≤–Ω–µ—Å–µ–Ω–∏—è –≤ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–º –≤–µ—Å–µ"
            )

            # –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –ø–ª–æ—â–∞–¥—å
            area_processed = st.number_input(
                "–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –ø–ª–æ—â–∞–¥—å (–≥–∞) *",
                min_value=0.1,
                max_value=selected_field.area_ha,
                value=selected_field.area_ha,
                step=0.1,
                help=f"–ü–ª–æ—â–∞–¥—å –ø–æ–ª—è: {format_area(selected_field.area_ha)}"
            )

            # –°–ø–æ—Å–æ–± –≤–Ω–µ—Å–µ–Ω–∏—è
            application_method = st.selectbox(
                "–°–ø–æ—Å–æ–± –≤–Ω–µ—Å–µ–Ω–∏—è *",
                options=[
                    "–†–∞–∑–±—Ä–∞—Å—ã–≤–∞–Ω–∏–µ",
                    "–õ–æ–∫–∞–ª—å–Ω–æ–µ –≤–Ω–µ—Å–µ–Ω–∏–µ",
                    "–§–µ—Ä—Ç–∏–≥–∞—Ü–∏—è",
                    "–õ–∏—Å—Ç–æ–≤–∞—è –ø–æ–¥–∫–æ—Ä–º–∫–∞",
                    "–í–Ω–µ—Å–µ–Ω–∏–µ —Å –ø–æ—Å–µ–≤–æ–º"
                ],
                help="–°–ø–æ—Å–æ–± –≤–Ω–µ—Å–µ–Ω–∏—è —É–¥–æ–±—Ä–µ–Ω–∏–π"
            )

            # –¶–µ–ª—å –≤–Ω–µ—Å–µ–Ω–∏—è
            application_purpose = st.selectbox(
                "–¶–µ–ª—å –≤–Ω–µ—Å–µ–Ω–∏—è",
                options=[
                    "–û—Å–Ω–æ–≤–Ω–æ–µ —É–¥–æ–±—Ä–µ–Ω–∏–µ",
                    "–ü—Ä–∏–ø–æ—Å–µ–≤–Ω–æ–µ —É–¥–æ–±—Ä–µ–Ω–∏–µ",
                    "–ü–æ–¥–∫–æ—Ä–º–∫–∞",
                    "–ö–æ—Ä—Ä–µ–∫—Ü–∏—è –¥–µ—Ñ–∏—Ü–∏—Ç–∞"
                ],
                help="–¶–µ–ª—å –≤–Ω–µ—Å–µ–Ω–∏—è —É–¥–æ–±—Ä–µ–Ω–∏–π"
            )

        # –†–∞—Å—á–µ—Ç –¥.–≤. (–¥–µ–π—Å—Ç–≤—É—é—â–µ–≥–æ –≤–µ—â–µ—Å—Ç–≤–∞)
        st.markdown("---")
        st.markdown("### üßÆ –†–∞—Å—á–µ—Ç –¥–µ–π—Å—Ç–≤—É—é—â–µ–≥–æ –≤–µ—â–µ—Å—Ç–≤–∞ (NPK)")

        if selected_fertilizer and selected_category in fertilizers_ref:
            fertilizer_data = fertilizers_ref[selected_category][selected_fertilizer]

            col3, col4, col5, col6 = st.columns(4)

            # –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ NPK –≤ —É–¥–æ–±—Ä–µ–Ω–∏–∏
            n_content = fertilizer_data.get("N", 0)
            p_content = fertilizer_data.get("P", 0)
            k_content = fertilizer_data.get("K", 0)

            with col3:
                st.metric("–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ N", f"{n_content}%")
            with col4:
                st.metric("–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ P", f"{p_content}%")
            with col5:
                st.metric("–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ K", f"{k_content}%")
            with col6:
                st.metric("–§–æ—Ä–º—É–ª–∞ NPK", format_npk(n_content, p_content, k_content))

            # –†–∞—Å—á–µ—Ç –≤–Ω–µ—Å–µ–Ω–Ω–æ–≥–æ –¥.–≤.
            total_fertilizer_kg = rate_kg_ha * area_processed
            n_applied = total_fertilizer_kg * n_content / 100
            p_applied = total_fertilizer_kg * p_content / 100
            k_applied = total_fertilizer_kg * k_content / 100

            st.markdown("#### –í–Ω–µ—Å–µ–Ω–æ –¥–µ–π—Å—Ç–≤—É—é—â–µ–≥–æ –≤–µ—â–µ—Å—Ç–≤–∞:")
            col7, col8, col9, col10 = st.columns(4)

            with col7:
                st.metric("–í—Å–µ–≥–æ —É–¥–æ–±—Ä–µ–Ω–∏–π", f"{format_number(total_fertilizer_kg, 0)} –∫–≥")
            with col8:
                st.metric("–ê–∑–æ—Ç (N)", f"{format_number(n_applied, 1)} –∫–≥ –¥.–≤.")
            with col9:
                st.metric("–§–æ—Å—Ñ–æ—Ä (P)", f"{format_number(p_applied, 1)} –∫–≥ –¥.–≤.")
            with col10:
                st.metric("–ö–∞–ª–∏–π (K)", f"{format_number(k_applied, 1)} –∫–≥ –¥.–≤.")

            # –†–∞—Å—á–µ—Ç –Ω–∞ 1 –≥–∞
            n_per_ha = n_applied / area_processed if area_processed > 0 else 0
            p_per_ha = p_applied / area_processed if area_processed > 0 else 0
            k_per_ha = k_applied / area_processed if area_processed > 0 else 0

            st.info(f"üìä –ù–∞ 1 –≥–∞ –≤–Ω–µ—Å–µ–Ω–æ: {format_npk(n_per_ha, p_per_ha, k_per_ha)}")

        # –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ
        notes = st.text_area(
            "–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ",
            height=80,
            help="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–Ω–µ—Å–µ–Ω–∏–∏ —É–¥–æ–±—Ä–µ–Ω–∏–π"
        )

        # –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
        submitted = st.form_submit_button("‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–Ω–µ—Å–µ–Ω–∏–µ", use_container_width=True)

        if submitted:
            # –í–∞–ª–∏–¥–∞—Ü–∏—è
            errors = []

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞—Ç—ã
            is_valid, msg = validator.validate_date(application_date)
            if not is_valid:
                errors.append(f"–î–∞—Ç–∞: {msg}")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–æ—â–∞–¥–∏
            is_valid, msg = validator.validate_area(area_processed)
            if not is_valid:
                errors.append(f"–ü–ª–æ—â–∞–¥—å: {msg}")

            if area_processed > selected_field.area_ha:
                errors.append(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –ø–ª–æ—â–∞–¥—å ({area_processed} –≥–∞) –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ø–ª–æ—â–∞–¥—å –ø–æ–ª—è ({selected_field.area_ha} –≥–∞)")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ—Ä–º—ã –≤–Ω–µ—Å–µ–Ω–∏—è
            if rate_kg_ha <= 0:
                errors.append("–ù–æ—Ä–º–∞ –≤–Ω–µ—Å–µ–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")

            if errors:
                st.error("‚ùå –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:\n" + "\n".join(f"- {e}" for e in errors))
            else:
                try:
                    # –°–æ–∑–¥–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
                    operation = Operation(
                        farm_id=farm.id,
                        field_id=selected_field.id,
                        operation_type="fertilizing",
                        operation_date=application_date,
                        area_processed_ha=area_processed,
                        notes=notes
                    )
                    db.add(operation)
                    db.flush()  # –ü–æ–ª—É—á–∞–µ–º ID –æ–ø–µ—Ä–∞—Ü–∏–∏

                    # –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–∞–ª–∏ –≤–Ω–µ—Å–µ–Ω–∏—è —É–¥–æ–±—Ä–µ–Ω–∏–π
                    fertilizer_application = FertilizerApplication(
                        operation_id=operation.id,
                        fertilizer_name=selected_fertilizer,
                        fertilizer_type=selected_category,
                        rate_kg_ha=rate_kg_ha,
                        total_fertilizer_kg=total_fertilizer_kg,
                        n_content_percent=n_content,
                        p_content_percent=p_content,
                        k_content_percent=k_content,
                        n_applied_kg=n_applied,
                        p_applied_kg=p_applied,
                        k_applied_kg=k_applied,
                        application_method=application_method,
                        application_purpose=application_purpose
                    )
                    db.add(fertilizer_application)

                    db.commit()

                    st.success(f"‚úÖ –í–Ω–µ—Å–µ–Ω–∏–µ —É–¥–æ–±—Ä–µ–Ω–∏–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ! –í–Ω–µ—Å–µ–Ω–æ {format_number(total_fertilizer_kg, 0)} –∫–≥ —É–¥–æ–±—Ä–µ–Ω–∏–π")
                    st.balloons()

                except Exception as e:
                    db.rollback()
                    st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {str(e)}")

# ========================================
# TAB 2: –ò—Å—Ç–æ—Ä–∏—è –≤–Ω–µ—Å–µ–Ω–∏–π
# ========================================
with tab2:
    st.subheader("–ò—Å—Ç–æ—Ä–∏—è –≤–Ω–µ—Å–µ–Ω–∏–π —É–¥–æ–±—Ä–µ–Ω–∏–π")

    # –§–∏–ª—å—Ç—Ä—ã
    col1, col2, col3 = st.columns(3)

    with col1:
        filter_field = st.selectbox(
            "–§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–ª—é",
            options=["–í—Å–µ –ø–æ–ª—è"] + [f"{f.field_code} - {f.name}" for f in fields],
            key="filter_field_history"
        )

    with col2:
        filter_category = st.selectbox(
            "–§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
            options=["–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"] + fertilizer_categories,
            key="filter_category_history"
        )

    with col3:
        filter_year = st.selectbox(
            "–§–∏–ª—å—Ç—Ä –ø–æ –≥–æ–¥—É",
            options=["–í—Å–µ –≥–æ–¥—ã"] + list(range(datetime.now().year, datetime.now().year - 10, -1)),
            key="filter_year_history"
        )

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    query = db.query(Operation, FertilizerApplication, Field).join(
        FertilizerApplication, Operation.id == FertilizerApplication.operation_id
    ).join(
        Field, Operation.field_id == Field.id
    ).filter(
        Operation.operation_type == "fertilizing"
    )

    # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    if filter_field != "–í—Å–µ –ø–æ–ª—è":
        field_code = filter_field.split(" - ")[0]
        query = query.filter(Field.field_code == field_code)

    if filter_category != "–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏":
        query = query.filter(FertilizerApplication.fertilizer_type == filter_category)

    if filter_year != "–í—Å–µ –≥–æ–¥—ã":
        from sqlalchemy import extract
        query = query.filter(extract('year', Operation.operation_date) == filter_year)

    applications = query.order_by(Operation.operation_date.desc()).all()

    if applications:
        st.metric("–í—Å–µ–≥–æ –≤–Ω–µ—Å–µ–Ω–∏–π", len(applications))

        # –¢–∞–±–ª–∏—Ü–∞
        data = []
        for op, fert_app, field in applications:
            data.append({
                "–î–∞—Ç–∞": format_date(op.operation_date),
                "–ü–æ–ª–µ": f"{field.field_code} - {field.name}",
                "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": fert_app.fertilizer_type,
                "–£–¥–æ–±—Ä–µ–Ω–∏–µ": fert_app.fertilizer_name,
                "–ù–æ—Ä–º–∞ (–∫–≥/–≥–∞)": format_number(fert_app.rate_kg_ha, 1),
                "–ü–ª–æ—â–∞–¥—å (–≥–∞)": format_area(op.area_processed_ha),
                "–í—Å–µ–≥–æ (–∫–≥)": format_number(fert_app.total_fertilizer_kg, 0),
                "NPK –¥.–≤. (–∫–≥)": f"N:{format_number(fert_app.n_applied_kg, 1)} P:{format_number(fert_app.p_applied_kg, 1)} K:{format_number(fert_app.k_applied_kg, 1)}",
                "–°–ø–æ—Å–æ–±": fert_app.application_method
            })

        df = pd.DataFrame(data)
        st.dataframe(df, use_container_width=True, hide_index=True)

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        st.markdown("---")
        st.markdown("### üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")

        col1, col2, col3, col4 = st.columns(4)

        total_fertilizer = sum(fert_app.total_fertilizer_kg for _, fert_app, _ in applications)
        total_n = sum(fert_app.n_applied_kg for _, fert_app, _ in applications)
        total_p = sum(fert_app.p_applied_kg for _, fert_app, _ in applications)
        total_k = sum(fert_app.k_applied_kg for _, fert_app, _ in applications)

        with col1:
            st.metric("–í—Å–µ–≥–æ –≤–Ω–µ—Å–µ–Ω–æ —É–¥–æ–±—Ä–µ–Ω–∏–π", f"{format_number(total_fertilizer, 0)} –∫–≥")
        with col2:
            st.metric("–ê–∑–æ—Ç (N) –¥.–≤.", f"{format_number(total_n, 1)} –∫–≥")
        with col3:
            st.metric("–§–æ—Å—Ñ–æ—Ä (P) –¥.–≤.", f"{format_number(total_p, 1)} –∫–≥")
        with col4:
            st.metric("–ö–∞–ª–∏–π (K) –¥.–≤.", f"{format_number(total_k, 1)} –∫–≥")

        # –ì—Ä–∞—Ñ–∏–∫–∏
        col1, col2 = st.columns(2)

        with col1:
            # –ì—Ä–∞—Ñ–∏–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            category_data = {}
            for _, fert_app, _ in applications:
                category = fert_app.fertilizer_type
                category_data[category] = category_data.get(category, 0) + fert_app.total_fertilizer_kg

            fig_category = px.pie(
                values=list(category_data.values()),
                names=list(category_data.keys()),
                title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —É–¥–æ–±—Ä–µ–Ω–∏–π (–∫–≥)"
            )
            st.plotly_chart(fig_category, use_container_width=True)

        with col2:
            # –ì—Ä–∞—Ñ–∏–∫ NPK
            npk_data = {
                "–≠–ª–µ–º–µ–Ω—Ç": ["–ê–∑–æ—Ç (N)", "–§–æ—Å—Ñ–æ—Ä (P)", "–ö–∞–ª–∏–π (K)"],
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ (–∫–≥ –¥.–≤.)": [total_n, total_p, total_k]
            }
            fig_npk = px.bar(
                npk_data,
                x="–≠–ª–µ–º–µ–Ω—Ç",
                y="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ (–∫–≥ –¥.–≤.)",
                title="–í–Ω–µ—Å–µ–Ω–æ –¥–µ–π—Å—Ç–≤—É—é—â–µ–≥–æ –≤–µ—â–µ—Å—Ç–≤–∞ NPK",
                color="–≠–ª–µ–º–µ–Ω—Ç",
                color_discrete_map={
                    "–ê–∑–æ—Ç (N)": "#1f77b4",
                    "–§–æ—Å—Ñ–æ—Ä (P)": "#ff7f0e",
                    "–ö–∞–ª–∏–π (K)": "#2ca02c"
                }
            )
            st.plotly_chart(fig_npk, use_container_width=True)

        # –ì—Ä–∞—Ñ–∏–∫ –ø–æ –ø–æ–ª—è–º
        field_data = {}
        for op, fert_app, field in applications:
            field_name = f"{field.field_code} - {field.name}"
            if field_name not in field_data:
                field_data[field_name] = {"N": 0, "P": 0, "K": 0}
            field_data[field_name]["N"] += fert_app.n_applied_kg
            field_data[field_name]["P"] += fert_app.p_applied_kg
            field_data[field_name]["K"] += fert_app.k_applied_kg

        if field_data:
            fields_list = list(field_data.keys())
            n_values = [field_data[f]["N"] for f in fields_list]
            p_values = [field_data[f]["P"] for f in fields_list]
            k_values = [field_data[f]["K"] for f in fields_list]

            fig_fields = go.Figure(data=[
                go.Bar(name='–ê–∑–æ—Ç (N)', x=fields_list, y=n_values),
                go.Bar(name='–§–æ—Å—Ñ–æ—Ä (P)', x=fields_list, y=p_values),
                go.Bar(name='–ö–∞–ª–∏–π (K)', x=fields_list, y=k_values)
            ])
            fig_fields.update_layout(
                barmode='group',
                title="–í–Ω–µ—Å–µ–Ω–∏–µ NPK –ø–æ –ø–æ–ª—è–º (–∫–≥ –¥.–≤.)",
                xaxis_title="–ü–æ–ª—è",
                yaxis_title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ (–∫–≥ –¥.–≤.)"
            )
            st.plotly_chart(fig_fields, use_container_width=True)

    else:
        st.info("üì≠ –ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ –≤–Ω–µ—Å–µ–Ω–∏–∏ —É–¥–æ–±—Ä–µ–Ω–∏–π")

# ========================================
# TAB 3: –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ —É–¥–æ–±—Ä–µ–Ω–∏–π
# ========================================
with tab3:
    st.subheader("–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ —É–¥–æ–±—Ä–µ–Ω–∏–π")

    if fertilizers_ref:
        # –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        selected_cat = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é",
            options=fertilizer_categories,
            key="reference_category"
        )

        if selected_cat in fertilizers_ref:
            st.markdown(f"### {selected_cat}")

            # –¢–∞–±–ª–∏—Ü–∞ —É–¥–æ–±—Ä–µ–Ω–∏–π
            ref_data = []
            for fert_name, fert_info in fertilizers_ref[selected_cat].items():
                ref_data.append({
                    "–ù–∞–∑–≤–∞–Ω–∏–µ": fert_name,
                    "N (%)": fert_info.get("N", 0),
                    "P (%)": fert_info.get("P", 0),
                    "K (%)": fert_info.get("K", 0),
                    "–§–æ—Ä–º—É–ª–∞": format_npk(fert_info.get("N", 0), fert_info.get("P", 0), fert_info.get("K", 0)),
                    "–§–æ—Ä–º–∞": fert_info.get("—Ñ–æ—Ä–º–∞", "-"),
                    "–†–∞—Å—Ç–≤–æ—Ä–∏–º–æ—Å—Ç—å": fert_info.get("—Ä–∞—Å—Ç–≤–æ—Ä–∏–º–æ—Å—Ç—å", "-")
                })

            df_ref = pd.DataFrame(ref_data)
            st.dataframe(df_ref, use_container_width=True, hide_index=True)

            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            st.markdown("---")
            st.markdown("### üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—é")

            st.info("""
            **–û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**
            - –û—Å–Ω–æ–≤–Ω–æ–µ –≤–Ω–µ—Å–µ–Ω–∏–µ: –æ—Å–µ–Ω—å—é –ø–æ–¥ –≤—Å–ø–∞—à–∫—É (—Ñ–æ—Å—Ñ–æ—Ä–Ω–æ-–∫–∞–ª–∏–π–Ω—ã–µ) –∏–ª–∏ –≤–µ—Å–Ω–æ–π –ø–æ–¥ –∫—É–ª—å—Ç–∏–≤–∞—Ü–∏—é (–∞–∑–æ—Ç–Ω—ã–µ)
            - –ü—Ä–∏–ø–æ—Å–µ–≤–Ω–æ–µ: –ª–æ–∫–∞–ª—å–Ω–æ –≤ —Ä—è–¥–∫–∏ –ø—Ä–∏ –ø–æ—Å–µ–≤–µ (–∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ —É–¥–æ–±—Ä–µ–Ω–∏—è)
            - –ü–æ–¥–∫–æ—Ä–º–∫–∞: –≤ –ø–µ—Ä–∏–æ–¥ –≤–µ–≥–µ—Ç–∞—Ü–∏–∏ (–∞–∑–æ—Ç–Ω—ã–µ —É–¥–æ–±—Ä–µ–Ω–∏—è)
            - –õ–∏—Å—Ç–æ–≤–∞—è –ø–æ–¥–∫–æ—Ä–º–∫–∞: –º–∏–∫—Ä–æ—ç–ª–µ–º–µ–Ω—Ç—ã –≤ —Ñ–∞–∑—ã –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞

            **–ù–æ—Ä–º—ã –≤–Ω–µ—Å–µ–Ω–∏—è –¥–ª—è –ø—à–µ–Ω–∏—Ü—ã –≤ –ê–∫–º–æ–ª–∏–Ω—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏:**
            - –ê–∑–æ—Ç (N): 60-90 –∫–≥ –¥.–≤./–≥–∞
            - –§–æ—Å—Ñ–æ—Ä (P): 40-60 –∫–≥ –¥.–≤./–≥–∞
            - –ö–∞–ª–∏–π (K): 20-40 –∫–≥ –¥.–≤./–≥–∞
            """)
    else:
        st.warning("–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ —É–¥–æ–±—Ä–µ–Ω–∏–π –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω")

# –§—É—Ç–µ—Ä
st.markdown("---")
st.markdown("üíä **–£—á–µ—Ç –≤–Ω–µ—Å–µ–Ω–∏—è —É–¥–æ–±—Ä–µ–Ω–∏–π** | –í–µ—Ä—Å–∏—è 1.0")
