"""
Reference Data Management - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞–º–∏
–î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º–∏ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞–º–∏ —Å–∏—Å—Ç–µ–º—ã
"""
import streamlit as st
import pandas as pd
import json
from pathlib import Path
from modules.database import SessionLocal
from modules.auth import require_admin, get_user_display_name
from datetime import datetime

st.set_page_config(page_title="–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏", page_icon="üìö", layout="wide")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
require_admin()

st.title("üìö –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞–º–∏")
st.markdown("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø—Ä–∞–≤–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º—ã")

# –ü—É—Ç—å –∫ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞–º
DATA_DIR = Path("data")

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤
REFERENCES = {
    "crops": {
        "name": "üåæ –ö—É–ª—å—Ç—É—Ä—ã –∏ —Å–æ—Ä—Ç–∞",
        "file": "crops.json",
        "description": "–°–µ–ª—å—Å–∫–æ—Ö–æ–∑—è–π—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫—É–ª—å—Ç—É—Ä—ã, —Å–æ—Ä—Ç–∞, –Ω–æ—Ä–º—ã –≤—ã—Å–µ–≤–∞",
        "icon": "üåæ"
    },
    "tractors": {
        "name": "üöú –¢—Ä–∞–∫—Ç–æ—Ä—ã",
        "file": "tractors.json",
        "description": "–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ —Ç—Ä–∞–∫—Ç–æ—Ä–æ–≤ –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è–º –∏ –º–æ–¥–µ–ª—è–º",
        "icon": "üöú"
    },
    "combines": {
        "name": "üåæ –ö–æ–º–±–∞–π–Ω—ã",
        "file": "combines.json",
        "description": "–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –∑–µ—Ä–Ω–æ—É–±–æ—Ä–æ—á–Ω—ã—Ö –∫–æ–º–±–∞–π–Ω–æ–≤",
        "icon": "üåæ"
    },
    "implements": {
        "name": "üîß –ê–≥—Ä–µ–≥–∞—Ç—ã",
        "file": "implements.json",
        "description": "–ü—Ä–∏—Ü–µ–ø–Ω–æ–µ –∏ –Ω–∞–≤–µ—Å–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ",
        "icon": "üîß"
    },
    "pesticides": {
        "name": "üõ°Ô∏è –ü–µ—Å—Ç–∏—Ü–∏–¥—ã",
        "file": "pesticides.json",
        "description": "–°—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞—â–∏—Ç—ã —Ä–∞—Å—Ç–µ–Ω–∏–π (–ø–µ—Å—Ç–∏—Ü–∏–¥—ã, —Ñ—É–Ω–≥–∏—Ü–∏–¥—ã, –≥–µ—Ä–±–∏—Ü–∏–¥—ã)",
        "icon": "üõ°Ô∏è"
    },
    "fertilizers": {
        "name": "üíä –£–¥–æ–±—Ä–µ–Ω–∏—è",
        "file": "fertilizers.json",
        "description": "–ú–∏–Ω–µ—Ä–∞–ª—å–Ω—ã–µ –∏ –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏–µ —É–¥–æ–±—Ä–µ–Ω–∏—è",
        "icon": "üíä"
    },
    "diseases": {
        "name": "ü¶† –ë–æ–ª–µ–∑–Ω–∏ —Ä–∞—Å—Ç–µ–Ω–∏–π",
        "file": "diseases.json",
        "description": "–ë–æ–ª–µ–∑–Ω–∏ —Å–µ–ª—å—Å–∫–æ—Ö–æ–∑—è–π—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫—É–ª—å—Ç—É—Ä",
        "icon": "ü¶†"
    },
    "pests": {
        "name": "üêõ –í—Ä–µ–¥–∏—Ç–µ–ª–∏",
        "file": "pests.json",
        "description": "–í—Ä–µ–¥–∏—Ç–µ–ª–∏ —Å–µ–ª—å—Å–∫–æ—Ö–æ–∑—è–π—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫—É–ª—å—Ç—É—Ä",
        "icon": "üêõ"
    },
    "weeds": {
        "name": "üåø –°–æ—Ä–Ω—è–∫–∏",
        "file": "weeds.json",
        "description": "–°–æ—Ä–Ω—ã–µ —Ä–∞—Å—Ç–µ–Ω–∏—è",
        "icon": "üåø"
    }
}

# Sidebar - –≤—ã–±–æ—Ä —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞
with st.sidebar:
    st.markdown(f"### üë§ {get_user_display_name()}")
    st.markdown("---")
    st.markdown("### üìö –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫")

    selected_ref = st.radio(
        "–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫:",
        options=list(REFERENCES.keys()),
        format_func=lambda x: f"{REFERENCES[x]['icon']} {REFERENCES[x]['name'].split(' ', 1)[1]}"
    )

    st.markdown("---")
    st.markdown("### üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")

    # –ü–æ–¥—Å—á–µ—Ç –∑–∞–ø–∏—Å–µ–π –≤ –∫–∞–∂–¥–æ–º —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ
    for ref_key, ref_info in REFERENCES.items():
        file_path = DATA_DIR / ref_info['file']
        if file_path.exists():
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    count = len(data)
                    st.metric(ref_info['icon'], count, label=ref_info['name'].split(' ', 1)[1][:15])
            except:
                st.metric(ref_info['icon'], "–û—à–∏–±–∫–∞")

# –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å
if selected_ref:
    ref_info = REFERENCES[selected_ref]
    file_path = DATA_DIR / ref_info['file']

    st.markdown(f"## {ref_info['name']}")
    st.markdown(f"*{ref_info['description']}*")
    st.markdown("---")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
    if not file_path.exists():
        st.error(f"‚ùå –§–∞–π–ª —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")

        if st.button("‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫"):
            with open(file_path, 'w', encoding='utf-8') as f:
                json.dump({}, f, ensure_ascii=False, indent=2)
            st.success("‚úÖ –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ —Å–æ–∑–¥–∞–Ω!")
            st.rerun()
    else:
        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                reference_data = json.load(f)
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}")
            reference_data = {}

        # –í–∫–ª–∞–¥–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
        tabs = st.tabs(["üìã –ü—Ä–æ—Å–º–æ—Ç—Ä", "‚ûï –î–æ–±–∞–≤–∏—Ç—å", "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", "üì• –ò–º–ø–æ—Ä—Ç/–≠–∫—Å–ø–æ—Ä—Ç"])

        # ========================================================================
        # –í–ö–õ–ê–î–ö–ê: –ü–†–û–°–ú–û–¢–†
        # ========================================================================
        with tabs[0]:
            st.markdown("### üìã –¢–µ–∫—É—â–∏–µ –∑–∞–ø–∏—Å–∏")

            if not reference_data:
                st.info("üì≠ –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å –≤–æ –≤–∫–ª–∞–¥–∫–µ '–î–æ–±–∞–≤–∏—Ç—å'.")
            else:
                st.markdown(f"**–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π:** {len(reference_data)}")

                # –ü–æ–∏—Å–∫
                search_query = st.text_input("üîç –ü–æ–∏—Å–∫", placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞...")

                # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è
                filtered_data = reference_data
                if search_query:
                    filtered_data = {k: v for k, v in reference_data.items()
                                   if search_query.lower() in k.lower()}

                if not filtered_data:
                    st.warning(f"–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É: {search_query}")
                else:
                    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –≤–∏–¥–µ expandable –∫–∞—Ä—Ç–æ—á–µ–∫
                    for idx, (key, value) in enumerate(filtered_data.items()):
                        with st.expander(f"{ref_info['icon']} **{key}**", expanded=idx < 3):
                            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–≤–æ–¥ JSON
                            st.json(value)

                            col1, col2 = st.columns(2)
                            with col1:
                                if st.button("üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å JSON", key=f"copy_{idx}"):
                                    st.code(json.dumps(value, ensure_ascii=False, indent=2), language="json")

                            with col2:
                                if st.button("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", key=f"delete_{idx}"):
                                    if st.session_state.get(f"confirm_delete_{idx}"):
                                        del reference_data[key]
                                        with open(file_path, 'w', encoding='utf-8') as f:
                                            json.dump(reference_data, f, ensure_ascii=False, indent=2)
                                        st.success(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ: {key}")
                                        st.rerun()
                                    else:
                                        st.session_state[f"confirm_delete_{idx}"] = True
                                        st.warning("‚ö†Ô∏è –ù–∞–∂–º–∏—Ç–µ –µ—â–µ —Ä–∞–∑ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")

        # ========================================================================
        # –í–ö–õ–ê–î–ö–ê: –î–û–ë–ê–í–ò–¢–¨
        # ========================================================================
        with tabs[1]:
            st.markdown("### ‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å")

            with st.form("add_reference_form"):
                st.markdown("**–°–ø–æ—Å–æ–± –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:**")
                add_method = st.radio(
                    "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–±",
                    ["–ß–µ—Ä–µ–∑ —Ñ–æ—Ä–º—É (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π)", "JSON (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π)"],
                    horizontal=True
                )

                if add_method == "–ß–µ—Ä–µ–∑ —Ñ–æ—Ä–º—É (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π)":
                    new_key = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ (–∫–ª—é—á) *", placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ü—à–µ–Ω–∏—Ü–∞ —è—Ä–æ–≤–∞—è")

                    # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ñ–æ—Ä–º–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞
                    if selected_ref == "crops":
                        new_type = st.text_input("–¢–∏–ø –∫—É–ª—å—Ç—É—Ä—ã", placeholder="–ó–µ—Ä–Ω–æ–≤–∞—è")
                        new_varieties = st.text_area("–°–æ—Ä—Ç–∞ (–ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫—É)", placeholder="–û–º—Å–∫–∞—è 36\n–ê—Å—Ç–∞–Ω–∞ 2")

                        new_data = {
                            "—Ç–∏–ø": new_type,
                            "—Å–æ—Ä—Ç–∞": [v.strip() for v in new_varieties.split('\n') if v.strip()]
                        }

                    elif selected_ref in ["tractors", "combines"]:
                        new_manufacturer = st.text_input("–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å *")
                        new_model = st.text_input("–ú–æ–¥–µ–ª—å *")
                        new_power = st.number_input("–ú–æ—â–Ω–æ—Å—Ç—å (–ª.—Å.)", min_value=0, step=10)

                        new_data = {
                            "–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å": new_manufacturer,
                            "–º–æ–¥–µ–ª—å": new_model,
                            "–º–æ—â–Ω–æ—Å—Ç—å_–ª—Å": new_power
                        }

                    else:
                        st.info("üí° –î–ª—è —ç—Ç–æ–≥–æ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ JSON-–≤–≤–æ–¥")
                        new_data = {}

                else:  # JSON –≤–≤–æ–¥
                    new_key = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ (–∫–ª—é—á) *", placeholder="–£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏")
                    new_json = st.text_area(
                        "JSON –¥–∞–Ω–Ω—ã–µ *",
                        height=200,
                        placeholder='{\n  "–ø–æ–ª–µ1": "–∑–Ω–∞—á–µ–Ω–∏–µ1",\n  "–ø–æ–ª–µ2": 123\n}'
                    )

                    # –ü–æ–ø—ã—Ç–∫–∞ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON
                    try:
                        new_data = json.loads(new_json) if new_json else {}
                    except json.JSONDecodeError as e:
                        st.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ JSON: {str(e)}")
                        new_data = None

                submitted = st.form_submit_button("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å", type="primary", use_container_width=True)

                if submitted:
                    if not new_key:
                        st.error("‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏")
                    elif new_key in reference_data:
                        st.error(f"‚ùå –ó–∞–ø–∏—Å—å '{new_key}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–∫–ª–∞–¥–∫—É '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å'")
                    elif new_data is None:
                        st.error("‚ùå –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –≤ JSON")
                    elif not new_data:
                        st.error("‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏")
                    else:
                        try:
                            reference_data[new_key] = new_data
                            with open(file_path, 'w', encoding='utf-8') as f:
                                json.dump(reference_data, f, ensure_ascii=False, indent=2)
                            st.success(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {new_key}")
                            st.balloons()
                            st.rerun()
                        except Exception as e:
                            st.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {str(e)}")

        # ========================================================================
        # –í–ö–õ–ê–î–ö–ê: –†–ï–î–ê–ö–¢–ò–†–û–í–ê–¢–¨
        # ========================================================================
        with tabs[2]:
            st.markdown("### ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø–∏—Å—å")

            if not reference_data:
                st.info("üì≠ –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            else:
                edit_key = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å", options=list(reference_data.keys()))

                if edit_key:
                    st.markdown(f"**–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:** `{edit_key}`")

                    current_data = reference_data[edit_key]

                    with st.form("edit_reference_form"):
                        # JSON —Ä–µ–¥–∞–∫—Ç–æ—Ä
                        edited_json = st.text_area(
                            "JSON –¥–∞–Ω–Ω—ã–µ",
                            value=json.dumps(current_data, ensure_ascii=False, indent=2),
                            height=300
                        )

                        col1, col2 = st.columns(2)

                        with col1:
                            update_submitted = st.form_submit_button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è", type="primary", use_container_width=True)

                        with col2:
                            delete_submitted = st.form_submit_button("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å", use_container_width=True)

                        if update_submitted:
                            try:
                                new_data = json.loads(edited_json)
                                reference_data[edit_key] = new_data

                                with open(file_path, 'w', encoding='utf-8') as f:
                                    json.dump(reference_data, f, ensure_ascii=False, indent=2)

                                st.success(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {edit_key}")
                                st.rerun()
                            except json.JSONDecodeError as e:
                                st.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ JSON: {str(e)}")
                            except Exception as e:
                                st.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {str(e)}")

                        if delete_submitted:
                            try:
                                del reference_data[edit_key]
                                with open(file_path, 'w', encoding='utf-8') as f:
                                    json.dump(reference_data, f, ensure_ascii=False, indent=2)
                                st.success(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ: {edit_key}")
                                st.rerun()
                            except Exception as e:
                                st.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {str(e)}")

        # ========================================================================
        # –í–ö–õ–ê–î–ö–ê: –ò–ú–ü–û–†–¢/–≠–ö–°–ü–û–†–¢
        # ========================================================================
        with tabs[3]:
            st.markdown("### üì• –ò–º–ø–æ—Ä—Ç/–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö")

            col1, col2 = st.columns(2)

            with col1:
                st.markdown("#### üì• –ò–º–ø–æ—Ä—Ç")
                st.info("–ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON —Ñ–∞–π–ª–∞. –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –æ–±—ä–µ–¥–∏–Ω–µ–Ω—ã.")

                uploaded_file = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ JSON —Ñ–∞–π–ª", type=['json'])

                if uploaded_file:
                    try:
                        imported_data = json.load(uploaded_file)

                        st.json(imported_data)
                        st.markdown(f"**–ó–∞–ø–∏—Å–µ–π –≤ —Ñ–∞–π–ª–µ:** {len(imported_data)}")

                        import_mode = st.radio(
                            "–†–µ–∂–∏–º –∏–º–ø–æ—Ä—Ç–∞:",
                            ["–û–±—ä–µ–¥–∏–Ω–∏—Ç—å —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏", "–ó–∞–º–µ–Ω–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ"],
                            help="–û–±—ä–µ–¥–∏–Ω–∏—Ç—å - –¥–æ–±–∞–≤–∏—Ç –Ω–æ–≤—ã–µ –∏ –æ–±–Ω–æ–≤–∏—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ. –ó–∞–º–µ–Ω–∏—Ç—å - —É–¥–∞–ª–∏—Ç –≤—Å–µ —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ."
                        )

                        if st.button("üîÑ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å", type="primary"):
                            if import_mode == "–ó–∞–º–µ–Ω–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ":
                                reference_data = imported_data
                            else:
                                reference_data.update(imported_data)

                            with open(file_path, 'w', encoding='utf-8') as f:
                                json.dump(reference_data, f, ensure_ascii=False, indent=2)

                            st.success(f"‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(imported_data)} –∑–∞–ø–∏—Å–µ–π!")
                            st.rerun()

                    except Exception as e:
                        st.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {str(e)}")

            with col2:
                st.markdown("#### üì§ –≠–∫—Å–ø–æ—Ä—Ç")
                st.info("–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ —Ç–µ–∫—É—â–∏–π —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –≤ JSON —Ñ–∞–π–ª –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –æ–±–º–µ–Ω–∞.")

                if reference_data:
                    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ JSON –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                    json_str = json.dumps(reference_data, ensure_ascii=False, indent=2)

                    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                    filename = f"{selected_ref}_{timestamp}.json"

                    st.download_button(
                        label="üì• –°–∫–∞—á–∞—Ç—å JSON",
                        data=json_str.encode('utf-8'),
                        file_name=filename,
                        mime="application/json",
                        use_container_width=True
                    )

                    st.markdown(f"**–ó–∞–ø–∏—Å–µ–π:** {len(reference_data)}")
                    st.markdown(f"**–†–∞–∑–º–µ—Ä:** {len(json_str.encode('utf-8')) / 1024:.1f} KB")
                else:
                    st.warning("üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")

# Footer
st.markdown("---")
st.markdown("üí° **–°–æ–≤–µ—Ç:** –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–∫–ª–∞–¥–∫—É '–ò–º–ø–æ—Ä—Ç/–≠–∫—Å–ø–æ—Ä—Ç' –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–¥ –º–∞—Å—Å–æ–≤—ã–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏")
