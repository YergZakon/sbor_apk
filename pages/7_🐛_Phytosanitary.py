"""
Phytosanitary - –§–∏—Ç–æ—Å–∞–Ω–∏—Ç–∞—Ä–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ (–±–æ–ª–µ–∑–Ω–∏, –≤—Ä–µ–¥–∏—Ç–µ–ª–∏, —Å–æ—Ä–Ω—è–∫–∏)
"""
import streamlit as st
import pandas as pd
import json
from datetime import datetime, date
from pathlib import Path
import plotly.express as px
import plotly.graph_objects as go

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
import sys
sys.path.append(str(Path(__file__).parent.parent))

from modules.database import get_db, Farm, Field, PhytosanitaryMonitoring
from modules.validators import DataValidator
from utils.formatters import format_date, format_area

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(page_title="–§–∏—Ç–æ—Å–∞–Ω–∏—Ç–∞—Ä–∏—è", page_icon="üêõ", layout="wide")

st.title("üêõ –§–∏—Ç–æ—Å–∞–Ω–∏—Ç–∞—Ä–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞
validator = DataValidator()

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤
def load_reference(filename):
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ –∏–∑ JSON"""
    reference_path = Path(__file__).parent.parent / "data" / filename
    try:
        with open(reference_path, "r", encoding="utf-8") as f:
            return json.load(f)
    except FileNotFoundError:
        st.error(f"–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return {}

diseases_ref = load_reference("diseases.json")
pests_ref = load_reference("pests.json")
weeds_ref = load_reference("weeds.json")

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
db = next(get_db())

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ö–æ–∑—è–π—Å—Ç–≤–∞
farm = db.query(Farm).first()
if not farm:
    st.warning("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ Farm Setup!")
    st.stop()

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª–µ–π
fields = db.query(Field).filter(Field.farm_id == farm.id).all()
if not fields:
    st.warning("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –ø–æ–ª—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ '–ü–æ–ª—è'!")
    st.stop()

# –¢–∞–±—ã
tab1, tab2, tab3, tab4 = st.tabs(["üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞", "üìä –ò—Å—Ç–æ—Ä–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞", "üìö –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏", "‚ö†Ô∏è –ü–æ—Ä–æ–≥–∏ –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω–æ—Å—Ç–∏"])

# ========================================
# TAB 1: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
# ========================================
with tab1:
    st.subheader("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ñ–∏—Ç–æ—Å–∞–Ω–∏—Ç–∞—Ä–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")

    with st.form("phytosanitary_form"):
        col1, col2 = st.columns(2)

        with col1:
            # –í—ã–±–æ—Ä –ø–æ–ª—è
            field_options = {f"{f.field_code} - {f.name}": f for f in fields}
            selected_field_name = st.selectbox(
                "–ü–æ–ª–µ *",
                options=list(field_options.keys()),
                help="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"
            )
            selected_field = field_options[selected_field_name]

            # –î–∞—Ç–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            monitoring_date = st.date_input(
                "–î–∞—Ç–∞ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è *",
                value=date.today(),
                help="–î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ñ–∏—Ç–æ—Å–∞–Ω–∏—Ç–∞—Ä–Ω–æ–≥–æ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è"
            )

            # –¢–∏–ø –ø—Ä–æ–±–ª–µ–º—ã
            problem_type = st.selectbox(
                "–¢–∏–ø –ø—Ä–æ–±–ª–µ–º—ã *",
                options=["–ë–æ–ª–µ–∑–Ω—å", "–í—Ä–µ–¥–∏—Ç–µ–ª—å", "–°–æ—Ä–Ω—è–∫"],
                help="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ñ–∏—Ç–æ—Å–∞–Ω–∏—Ç–∞—Ä–Ω–æ–π –ø—Ä–æ–±–ª–µ–º—ã"
            )

        with col2:
            # –ö—É–ª—å—Ç—É—Ä–∞
            crop = st.text_input(
                "–ö—É–ª—å—Ç—É—Ä–∞ *",
                help="–ö–∞–∫–∞—è –∫—É–ª—å—Ç—É—Ä–∞ —Ä–∞—Å—Ç–µ—Ç –Ω–∞ –ø–æ–ª–µ"
            )

            # –§–∞–∑–∞ —Ä–∞–∑–≤–∏—Ç–∏—è
            growth_stage = st.selectbox(
                "–§–∞–∑–∞ —Ä–∞–∑–≤–∏—Ç–∏—è –∫—É–ª—å—Ç—É—Ä—ã *",
                options=[
                    "–í—Å—Ö–æ–¥—ã",
                    "–ö—É—â–µ–Ω–∏–µ",
                    "–í—ã—Ö–æ–¥ –≤ —Ç—Ä—É–±–∫—É",
                    "–ö–æ–ª–æ—à–µ–Ω–∏–µ",
                    "–¶–≤–µ—Ç–µ–Ω–∏–µ",
                    "–ù–∞–ª–∏–≤ –∑–µ—Ä–Ω–∞",
                    "–ú–æ–ª–æ—á–Ω–∞—è —Å–ø–µ–ª–æ—Å—Ç—å",
                    "–í–æ—Å–∫–æ–≤–∞—è —Å–ø–µ–ª–æ—Å—Ç—å",
                    "–ü–æ–ª–Ω–∞—è —Å–ø–µ–ª–æ—Å—Ç—å"
                ],
                help="–§–∞–∑–∞ —Ä–∞–∑–≤–∏—Ç–∏—è –∫—É–ª—å—Ç—É—Ä—ã"
            )

            # –ü–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
            weather_conditions = st.text_input(
                "–ü–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è",
                placeholder="–Ø—Å–Ω–æ, +22¬∞C, –≤–ª–∞–∂–Ω–æ—Å—Ç—å 60%",
                help="–ü–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –≤ –º–æ–º–µ–Ω—Ç –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è"
            )

        # –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø—Ä–æ–±–ª–µ–º—ã –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ –ø–æ–ª—è
        st.markdown("---")
        st.markdown(f"### üîç –î–µ—Ç–∞–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã: {problem_type}")

        col3, col4 = st.columns(2)

        with col3:
            if problem_type == "–ë–æ–ª–µ–∑–Ω—å":
                # –í—ã–±–æ—Ä –±–æ–ª–µ–∑–Ω–∏ –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞
                all_diseases = []
                for crop_diseases in diseases_ref.values():
                    all_diseases.extend(list(crop_diseases.keys()))

                disease_name = st.selectbox(
                    "–ù–∞–∑–≤–∞–Ω–∏–µ –±–æ–ª–µ–∑–Ω–∏ *",
                    options=sorted(set(all_diseases)),
                    help="–í—ã–±–µ—Ä–∏—Ç–µ –±–æ–ª–µ–∑–Ω—å –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞"
                )
                problem_name = disease_name

            elif problem_type == "–í—Ä–µ–¥–∏—Ç–µ–ª—å":
                # –í—ã–±–æ—Ä –≤—Ä–µ–¥–∏—Ç–µ–ª—è –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞
                all_pests = list(pests_ref.keys())

                pest_name = st.selectbox(
                    "–ù–∞–∑–≤–∞–Ω–∏–µ –≤—Ä–µ–¥–∏—Ç–µ–ª—è *",
                    options=sorted(all_pests),
                    help="–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–¥–∏—Ç–µ–ª—è –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞"
                )
                problem_name = pest_name

            else:  # –°–æ—Ä–Ω—è–∫
                # –í—ã–±–æ—Ä —Å–æ—Ä–Ω—è–∫–∞ –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞
                all_weeds = []
                for weed_category in weeds_ref.values():
                    all_weeds.extend(list(weed_category.keys()))

                weed_name = st.selectbox(
                    "–ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ—Ä–Ω—è–∫–∞ *",
                    options=sorted(set(all_weeds)),
                    help="–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ä–Ω—è–∫ –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞"
                )
                problem_name = weed_name

            # –°—Ç–µ–ø–µ–Ω—å –ø–æ—Ä–∞–∂–µ–Ω–∏—è
            severity = st.selectbox(
                "–°—Ç–µ–ø–µ–Ω—å –ø–æ—Ä–∞–∂–µ–Ω–∏—è/–∑–∞—Å–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ *",
                options=["–°–ª–∞–±–∞—è", "–°—Ä–µ–¥–Ω—è—è", "–°–∏–ª—å–Ω–∞—è", "–û—á–µ–Ω—å —Å–∏–ª—å–Ω–∞—è"],
                help="–û—Ü–µ–Ω–∏—Ç–µ —Å—Ç–µ–ø–µ–Ω—å –ø–æ—Ä–∞–∂–µ–Ω–∏—è"
            )

        with col4:
            # –†–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ
            affected_area_percent = st.slider(
                "–†–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ (% –ø–ª–æ—â–∞–¥–∏) *",
                min_value=0,
                max_value=100,
                value=10,
                step=5,
                help="–ü—Ä–æ—Ü–µ–Ω—Ç –ø–ª–æ—â–∞–¥–∏ –ø–æ–ª—è —Å –ø—Ä–æ–±–ª–µ–º–æ–π"
            )

            # –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å
            intensity = st.number_input(
                "–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å (–±–∞–ª–ª 1-5)",
                min_value=1,
                max_value=5,
                value=2,
                help="1 - –µ–¥–∏–Ω–∏—á–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã, 5 - –º–∞—Å—Å–æ–≤–æ–µ –ø–æ—Ä–∞–∂–µ–Ω–∏–µ"
            )

            # –¢—Ä–µ–±—É–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
            treatment_required = st.checkbox(
                "–¢—Ä–µ–±—É–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∫–∞",
                value=False,
                help="–ü—Ä–µ–≤—ã—à–µ–Ω –ø–æ—Ä–æ–≥ –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω–æ—Å—Ç–∏"
            )

        # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç–æ—á–∫–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è
        st.markdown("---")
        st.markdown("### üìç –¢–æ—á–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è")

        col5, col6 = st.columns(2)

        with col5:
            gps_lat = st.number_input(
                "–®–∏—Ä–æ—Ç–∞ (GPS)",
                min_value=-90.0,
                max_value=90.0,
                value=51.1694 if selected_field.center_lat is None else selected_field.center_lat,
                step=0.000001,
                format="%.6f",
                help="GPS –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç–æ—á–∫–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è"
            )

        with col6:
            gps_lon = st.number_input(
                "–î–æ–ª–≥–æ—Ç–∞ (GPS)",
                min_value=-180.0,
                max_value=180.0,
                value=71.4491 if selected_field.center_lon is None else selected_field.center_lon,
                step=0.000001,
                format="%.6f",
                help="GPS –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç–æ—á–∫–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è"
            )

        # –§–æ—Ç–æ
        st.markdown("---")
        st.markdown("### üì∑ –§–æ—Ç–æ–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è")

        photo_url = st.text_input(
            "URL —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏",
            placeholder="https://example.com/photo.jpg –∏–ª–∏ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É",
            help="–°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–æ—Ç–æ –∏–ª–∏ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É"
        )

        # –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ –∏ –ø—Ä–æ–≥–Ω–æ–∑
        col7, col8 = st.columns(2)

        with col7:
            notes = st.text_area(
                "–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ",
                height=100,
                help="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
            )

        with col8:
            forecast = st.text_area(
                "–ü—Ä–æ–≥–Ω–æ–∑ —Ä–∞–∑–≤–∏—Ç–∏—è",
                height=100,
                placeholder="–ü—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–≥–æ–¥–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π –æ–∂–∏–¥–∞–µ—Ç—Å—è...",
                help="–ü—Ä–æ–≥–Ω–æ–∑ —Ä–∞–∑–≤–∏—Ç–∏—è —Å–∏—Ç—É–∞—Ü–∏–∏"
            )

        # –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
        submitted = st.form_submit_button("‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ", use_container_width=True)

        if submitted:
            # –í–∞–ª–∏–¥–∞—Ü–∏—è
            errors = []

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞—Ç—ã
            is_valid, msg = validator.validate_date(monitoring_date)
            if not is_valid:
                errors.append(f"–î–∞—Ç–∞: {msg}")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—É–ª—å—Ç—É—Ä—ã
            if not crop or len(crop) < 2:
                errors.append("–ö—É–ª—å—Ç—É—Ä–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
            if gps_lat and gps_lon:
                is_valid, msg = validator.validate_coordinates(gps_lat, gps_lon)
                if not is_valid:
                    errors.append(f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {msg}")

            if errors:
                st.error("‚ùå –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:\n" + "\n".join(f"- {e}" for e in errors))
            else:
                try:
                    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
                    monitoring = PhytosanitaryMonitoring(
                        field_id=selected_field.id,
                        inspection_date=monitoring_date,
                        pest_type=problem_type,
                        pest_name=problem_name,
                        severity_pct=affected_area_percent,
                        prevalence_pct=affected_area_percent,
                        intensity_score=intensity,
                        threshold_exceeded=treatment_required,
                        crop_stage=growth_stage,
                        photo_url=photo_url if photo_url else None,
                        gps_lat=gps_lat if gps_lat else None,
                        gps_lon=gps_lon if gps_lon else None,
                        forecast=forecast if forecast else None,
                        notes=notes if notes else None
                    )
                    db.add(monitoring)
                    db.commit()

                    st.success(f"‚úÖ –û–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ! {problem_type}: {problem_name}")
                    if treatment_required:
                        st.warning("‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∫–∞! –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É 'Pesticides' –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
                    st.balloons()

                except Exception as e:
                    db.rollback()
                    st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {str(e)}")

# ========================================
# TAB 2: –ò—Å—Ç–æ—Ä–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
# ========================================
with tab2:
    st.subheader("–ò—Å—Ç–æ—Ä–∏—è —Ñ–∏—Ç–æ—Å–∞–Ω–∏—Ç–∞—Ä–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")

    # –§–∏–ª—å—Ç—Ä—ã
    col1, col2, col3 = st.columns(3)

    with col1:
        filter_field = st.selectbox(
            "–§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–ª—é",
            options=["–í—Å–µ –ø–æ–ª—è"] + [f"{f.field_code} - {f.name}" for f in fields],
            key="filter_field_history"
        )

    with col2:
        filter_type = st.selectbox(
            "–¢–∏–ø –ø—Ä–æ–±–ª–µ–º—ã",
            options=["–í—Å–µ —Ç–∏–ø—ã", "–ë–æ–ª–µ–∑–Ω—å", "–í—Ä–µ–¥–∏—Ç–µ–ª—å", "–°–æ—Ä–Ω—è–∫"],
            key="filter_type_history"
        )

    with col3:
        filter_year = st.selectbox(
            "–§–∏–ª—å—Ç—Ä –ø–æ –≥–æ–¥—É",
            options=["–í—Å–µ –≥–æ–¥—ã"] + list(range(datetime.now().year, datetime.now().year - 5, -1)),
            key="filter_year_history"
        )

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    query = db.query(PhytosanitaryMonitoring, Field).join(
        Field, PhytosanitaryMonitoring.field_id == Field.id
    )

    # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    if filter_field != "–í—Å–µ –ø–æ–ª—è":
        field_code = filter_field.split(" - ")[0]
        query = query.filter(Field.field_code == field_code)

    if filter_type != "–í—Å–µ —Ç–∏–ø—ã":
        query = query.filter(PhytosanitaryMonitoring.pest_type == filter_type)

    if filter_year != "–í—Å–µ –≥–æ–¥—ã":
        from sqlalchemy import extract
        query = query.filter(extract('year', PhytosanitaryMonitoring.inspection_date) == filter_year)

    monitorings = query.order_by(PhytosanitaryMonitoring.inspection_date.desc()).all()

    if monitorings:
        st.metric("–í—Å–µ–≥–æ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π", len(monitorings))

        # –¢–∞–±–ª–∏—Ü–∞
        data = []
        for mon, field in monitorings:
            data.append({
                "–î–∞—Ç–∞": format_date(mon.inspection_date),
                "–ü–æ–ª–µ": f"{field.field_code} - {field.name}",
                "–§–∞–∑–∞": mon.crop_stage or "-",
                "–¢–∏–ø": mon.pest_type,
                "–ü—Ä–æ–±–ª–µ–º–∞": mon.pest_name,
                "–°—Ç–µ–ø–µ–Ω—å –ø–æ—Ä–∞–∂. (%)": f"{mon.severity_pct or 0:.1f}",
                "–†–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ (%)": f"{mon.prevalence_pct or 0:.1f}",
                "–ü—Ä–µ–≤—ã—à–µ–Ω –ø–æ—Ä–æ–≥": "‚ö†Ô∏è –î–∞" if mon.threshold_exceeded else "‚úÖ –ù–µ—Ç"
            })

        df = pd.DataFrame(data)
        st.dataframe(df, use_container_width=True, hide_index=True)

        # –≠–∫—Å–ø–æ—Ä—Ç
        csv = df.to_csv(index=False).encode('utf-8-sig')
        st.download_button(
            "üì• –°–∫–∞—á–∞—Ç—å CSV",
            csv,
            "phytosanitary_history.csv",
            "text/csv"
        )

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        st.markdown("---")
        st.markdown("### üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")

        col1, col2, col3, col4 = st.columns(4)

        diseases_count = sum(1 for m, _ in monitorings if m.pest_type == "–ë–æ–ª–µ–∑–Ω—å")
        pests_count = sum(1 for m, _ in monitorings if m.pest_type == "–í—Ä–µ–¥–∏—Ç–µ–ª—å")
        weeds_count = sum(1 for m, _ in monitorings if m.pest_type == "–°–æ—Ä–Ω—è–∫")
        treatment_needed = sum(1 for m, _ in monitorings if m.threshold_exceeded)

        with col1:
            st.metric("–ë–æ–ª–µ–∑–Ω–∏", diseases_count)
        with col2:
            st.metric("–í—Ä–µ–¥–∏—Ç–µ–ª–∏", pests_count)
        with col3:
            st.metric("–°–æ—Ä–Ω—è–∫–∏", weeds_count)
        with col4:
            st.metric("–¢—Ä–µ–±—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏", treatment_needed, delta="‚ö†Ô∏è" if treatment_needed > 0 else None)

        # –ì—Ä–∞—Ñ–∏–∫–∏
        col1, col2 = st.columns(2)

        with col1:
            # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º
            type_data = {
                "–ë–æ–ª–µ–∑–Ω–∏": diseases_count,
                "–í—Ä–µ–¥–∏—Ç–µ–ª–∏": pests_count,
                "–°–æ—Ä–Ω—è–∫–∏": weeds_count
            }
            fig_types = px.pie(
                values=list(type_data.values()),
                names=list(type_data.keys()),
                title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º –ø—Ä–æ–±–ª–µ–º"
            )
            st.plotly_chart(fig_types, use_container_width=True)

        with col2:
            # –¢–æ–ø –ø—Ä–æ–±–ª–µ–º
            problem_counts = {}
            for mon, _ in monitorings:
                problem_counts[mon.pest_name] = problem_counts.get(mon.pest_name, 0) + 1

            top_problems = sorted(problem_counts.items(), key=lambda x: x[1], reverse=True)[:10]

            if top_problems:
                fig_top = px.bar(
                    x=[p[1] for p in top_problems],
                    y=[p[0] for p in top_problems],
                    orientation='h',
                    title="–¢–æ–ø-10 –ø—Ä–æ–±–ª–µ–º",
                    labels={"x": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª—É—á–∞–µ–≤", "y": "–ü—Ä–æ–±–ª–µ–º–∞"}
                )
                st.plotly_chart(fig_top, use_container_width=True)

        # –ö–∞—Ä—Ç–∞ –ø—Ä–æ–±–ª–µ–º
        if any(m.gps_lat and m.gps_lon for m, _ in monitorings):
            st.markdown("---")
            st.markdown("### üó∫Ô∏è –ö–∞—Ä—Ç–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–π")

            map_data = []
            for mon, field in monitorings:
                if mon.gps_lat and mon.gps_lon:
                    map_data.append({
                        "lat": mon.gps_lat,
                        "lon": mon.gps_lon,
                        "–ü—Ä–æ–±–ª–µ–º–∞": f"{mon.pest_type}: {mon.pest_name}",
                        "–ü–æ–ª–µ": field.name
                    })

            if map_data:
                df_map = pd.DataFrame(map_data)
                st.map(df_map[['lat', 'lon']])

    else:
        st.info("üì≠ –ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π —Ñ–∏—Ç–æ—Å–∞–Ω–∏—Ç–∞—Ä–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")

# ========================================
# TAB 3: –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏
# ========================================
with tab3:
    st.subheader("–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ –ø–æ —Ñ–∏—Ç–æ—Å–∞–Ω–∏—Ç–∞—Ä–∏–∏")

    ref_tab1, ref_tab2, ref_tab3 = st.tabs(["ü¶† –ë–æ–ª–µ–∑–Ω–∏", "üêõ –í—Ä–µ–¥–∏—Ç–µ–ª–∏", "üåø –°–æ—Ä–Ω—è–∫–∏"])

    with ref_tab1:
        st.markdown("### ü¶† –ë–æ–ª–µ–∑–Ω–∏ —Å–µ–ª—å—Å–∫–æ—Ö–æ–∑—è–π—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫—É–ª—å—Ç—É—Ä")

        if diseases_ref:
            for crop, crop_diseases in diseases_ref.items():
                with st.expander(f"**{crop}** ({len(crop_diseases)} –±–æ–ª–µ–∑–Ω–µ–π)"):
                    for disease_name, disease_info in crop_diseases.items():
                        st.markdown(f"**{disease_name}**")
                        if isinstance(disease_info, dict):
                            st.write(f"- –í–æ–∑–±—É–¥–∏—Ç–µ–ª—å: {disease_info.get('–≤–æ–∑–±—É–¥–∏—Ç–µ–ª—å', '-')}")
                            st.write(f"- –ü—Ä–∏–∑–Ω–∞–∫–∏: {disease_info.get('–ø—Ä–∏–∑–Ω–∞–∫–∏', '-')}")
                            st.write(f"- –í—Ä–µ–¥–æ–Ω–æ—Å–Ω–æ—Å—Ç—å: {disease_info.get('–≤—Ä–µ–¥–æ–Ω–æ—Å–Ω–æ—Å—Ç—å', '-')}")

    with ref_tab2:
        st.markdown("### üêõ –í—Ä–µ–¥–∏—Ç–µ–ª–∏")

        if pests_ref:
            for pest_name, pest_info in pests_ref.items():
                with st.expander(f"**{pest_name}**"):
                    if isinstance(pest_info, dict):
                        st.write(f"- –ö—É–ª—å—Ç—É—Ä–∞: {pest_info.get('–∫—É–ª—å—Ç—É—Ä–∞', '-')}")
                        st.write(f"- –§–∞–∑—ã –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω–æ—Å—Ç–∏: {pest_info.get('—Ñ–∞–∑—ã_–≤—Ä–µ–¥–æ–Ω–æ—Å–Ω–æ—Å—Ç–∏', '-')}")
                        st.write(f"- –ü–æ—Ä–æ–≥ –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω–æ—Å—Ç–∏: {pest_info.get('–ø–æ—Ä–æ–≥_–≤—Ä–µ–¥–æ–Ω–æ—Å–Ω–æ—Å—Ç–∏', '-')}")
                        st.write(f"- –ú–µ—Ä—ã –±–æ—Ä—å–±—ã: {pest_info.get('–º–µ—Ä—ã_–±–æ—Ä—å–±—ã', '-')}")

    with ref_tab3:
        st.markdown("### üåø –°–æ—Ä–Ω—è–∫–∏")

        if weeds_ref:
            for category, category_weeds in weeds_ref.items():
                with st.expander(f"**{category}** ({len(category_weeds)} –≤–∏–¥–æ–≤)"):
                    for weed_name, weed_info in category_weeds.items():
                        st.markdown(f"**{weed_name}**")
                        if isinstance(weed_info, dict):
                            st.write(f"- –ë–∏–æ–≥—Ä—É–ø–ø–∞: {weed_info.get('–±–∏–æ–≥—Ä—É–ø–ø–∞', '-')}")
                            st.write(f"- –í—Ä–µ–¥–æ–Ω–æ—Å–Ω–æ—Å—Ç—å: {weed_info.get('–≤—Ä–µ–¥–æ–Ω–æ—Å–Ω–æ—Å—Ç—å', '-')}")
                            st.write(f"- –ú–µ—Ä—ã –±–æ—Ä—å–±—ã: {weed_info.get('–º–µ—Ä—ã_–±–æ—Ä—å–±—ã', '-')}")

# ========================================
# TAB 4: –ü–æ—Ä–æ–≥–∏ –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω–æ—Å—Ç–∏
# ========================================
with tab4:
    st.subheader("–ü–æ—Ä–æ–≥–∏ –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω–æ—Å—Ç–∏")

    st.info("""
    **–ü–æ—Ä–æ–≥ –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω–æ—Å—Ç–∏** - —ç—Ç–æ –ø–ª–æ—Ç–Ω–æ—Å—Ç—å –ø–æ–ø—É–ª—è—Ü–∏–∏ –≤—Ä–µ–¥–Ω–æ–≥–æ –æ—Ä–≥–∞–Ω–∏–∑–º–∞ –∏–ª–∏ —Å—Ç–µ–ø–µ–Ω—å –ø–æ—Ä–∞–∂–µ–Ω–∏—è,
    –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –∑–∞—â–∏—Ç–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö –ø–æ—Ç–µ—Ä—å.
    """)

    st.markdown("### ü¶† –ë–æ–ª–µ–∑–Ω–∏ (–ø–æ—Ä–æ–≥–∏ –¥–ª—è —Ö–∏–º–æ–±—Ä–∞–±–æ—Ç–∫–∏)")

    disease_thresholds = pd.DataFrame({
        "–ö—É–ª—å—Ç—É—Ä–∞": ["–ü—à–µ–Ω–∏—Ü–∞", "–ü—à–µ–Ω–∏—Ü–∞", "–ü—à–µ–Ω–∏—Ü–∞", "–Ø—á–º–µ–Ω—å", "–†–∞–ø—Å"],
        "–ë–æ–ª–µ–∑–Ω—å": ["–ë—É—Ä–∞—è —Ä–∂–∞–≤—á–∏–Ω–∞", "–°–µ–ø—Ç–æ—Ä–∏–æ–∑ –ª–∏—Å—Ç—å–µ–≤", "–ú—É—á–Ω–∏—Å—Ç–∞—è —Ä–æ—Å–∞", "–ü—è—Ç–Ω–∏—Å—Ç–æ—Å—Ç—å –ª–∏—Å—Ç—å–µ–≤", "–ê–ª—å—Ç–µ—Ä–Ω–∞—Ä–∏–æ–∑"],
        "–§–∞–∑–∞ –∫—É–ª—å—Ç—É—Ä—ã": ["–ö—É—â–µ–Ω–∏–µ-–∫–æ–ª–æ—à–µ–Ω–∏–µ", "–§–ª–∞–≥-–ª–∏—Å—Ç–∞", "–í—ã—Ö–æ–¥ –≤ —Ç—Ä—É–±–∫—É", "–ö—É—â–µ–Ω–∏–µ", "–¶–≤–µ—Ç–µ–Ω–∏–µ"],
        "–ü–æ—Ä–æ–≥ (% –ø–æ—Ä–∞–∂–µ–Ω–∏—è)": ["5-10%", "25-30%", "10-15%", "15-20%", "10-15%"]
    })
    st.dataframe(disease_thresholds, use_container_width=True, hide_index=True)

    st.markdown("---")
    st.markdown("### üêõ –í—Ä–µ–¥–∏—Ç–µ–ª–∏ (–ø–æ—Ä–æ–≥–∏ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏)")

    pest_thresholds = pd.DataFrame({
        "–ö—É–ª—å—Ç—É—Ä–∞": ["–ü—à–µ–Ω–∏—Ü–∞", "–ü—à–µ–Ω–∏—Ü–∞", "–ü—à–µ–Ω–∏—Ü–∞", "–†–∞–ø—Å", "–ü–æ–¥—Å–æ–ª–Ω–µ—á–Ω–∏–∫"],
        "–í—Ä–µ–¥–∏—Ç–µ–ª—å": ["–•–ª–µ–±–Ω–∞—è –∂—É–∂–µ–ª–∏—Ü–∞", "–ü—å—è–≤–∏—Ü–∞", "–ö–ª–æ–ø –≤—Ä–µ–¥–Ω–∞—è —á–µ—Ä–µ–ø–∞—à–∫–∞", "–ö—Ä–µ—Å—Ç–æ—Ü–≤–µ—Ç–Ω—ã–µ –±–ª–æ—à–∫–∏", "–õ—É–≥–æ–≤–æ–π –º–æ—Ç—ã–ª–µ–∫"],
        "–§–∞–∑–∞ –∫—É–ª—å—Ç—É—Ä—ã": ["–í—Å—Ö–æ–¥—ã", "–ö—É—â–µ–Ω–∏–µ-–∫–æ–ª–æ—à–µ–Ω–∏–µ", "–ù–∞–ª–∏–≤ –∑–µ—Ä–Ω–∞", "–í—Å—Ö–æ–¥—ã", "–ë—É—Ç–æ–Ω–∏–∑–∞—Ü–∏—è"],
        "–ü–æ—Ä–æ–≥ (—à—Ç/–º¬≤)": ["3-5 –∂—É–∫/–º¬≤", "0.5-1 –ª–∏—á/—Å—Ç–µ–±–µ–ª—å", "5-10 –∫–ª–æ–ø/–º¬≤", "10-15 –∂—É–∫/–º¬≤", "10-15 –≥—É—Å/–º¬≤"]
    })
    st.dataframe(pest_thresholds, use_container_width=True, hide_index=True)

    st.markdown("---")
    st.markdown("### üåø –°–æ—Ä–Ω—è–∫–∏ (–ø–æ—Ä–æ–≥–∏ –∑–∞—Å–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏)")

    weed_thresholds = pd.DataFrame({
        "–¢–∏–ø —Å–æ—Ä–Ω—è–∫–∞": ["–ú–∞–ª–æ–ª–µ—Ç–Ω–∏–µ —è—Ä–æ–≤—ã–µ", "–ú–Ω–æ–≥–æ–ª–µ—Ç–Ω–∏–µ –∫–æ—Ä–Ω–µ–æ—Ç–ø—Ä—ã—Å–∫–æ–≤—ã–µ", "–ú–Ω–æ–≥–æ–ª–µ—Ç–Ω–∏–µ –∫–æ—Ä–Ω–µ–≤–∏—â–Ω—ã–µ", "–ü–∞—Ä–∞–∑–∏—Ç–Ω—ã–µ"],
        "–ü–æ—Ä–æ–≥ (—à—Ç/–º¬≤)": ["15-20 —à—Ç/–º¬≤", "1-3 —à—Ç/–º¬≤", "5-10 –ø–æ–±–µ–≥–æ–≤/–º¬≤", "1-2 —à—Ç/–º¬≤"],
        "–ü—Ä–∏–º–µ—Ä—ã": ["–û–≤—Å—é–≥, —â–∏—Ä–∏—Ü–∞, –º–∞—Ä—å", "–û—Å–æ—Ç, –≤—å—é–Ω–æ–∫ –ø–æ–ª–µ–≤–æ–π", "–ü—ã—Ä–µ–π –ø–æ–ª–∑—É—á–∏–π", "–ó–∞—Ä–∞–∑–∏—Ö–∞"],
        "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–∏–æ–¥": ["–§–∞–∑–∞ –∫—É—â–µ–Ω–∏—è", "–î–æ –≤—ã—Ö–æ–¥–∞ –≤ —Ç—Ä—É–±–∫—É", "–û—Ç –≤—Å—Ö–æ–¥–æ–≤ –¥–æ –∫—É—â–µ–Ω–∏—è", "–í—Å—Ö–æ–¥—ã-—Ü–≤–µ—Ç–µ–Ω–∏–µ"]
    })
    st.dataframe(weed_thresholds, use_container_width=True, hide_index=True)

    st.markdown("---")
    st.warning("""
    **‚ö†Ô∏è –í–∞–∂–Ω–æ:**
    - –ü–æ—Ä–æ–≥–∏ –º–æ–≥—É—Ç –≤–∞—Ä—å–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–≥–∏–æ–Ω–∞ –∏ –ø–æ–≥–æ–¥–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
    - –ü—Ä–∏ –≤—ã—Å–æ–∫–æ–π –≤–ª–∞–∂–Ω–æ—Å—Ç–∏ –ø–æ—Ä–æ–≥–∏ –¥–ª—è –±–æ–ª–µ–∑–Ω–µ–π —Å–Ω–∏–∂–∞—é—Ç—Å—è
    - –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π –ø–æ—Ä–æ–≥ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —É—Ä–æ–∂–∞—è –∏ –∑–∞—Ç—Ä–∞—Ç –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É
    - –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≤–æ–¥–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞–∂–¥—ã–µ 5-7 –¥–Ω–µ–π –≤ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–µ—Ä–∏–æ–¥—ã
    """)

# –§—É—Ç–µ—Ä
st.markdown("---")
st.markdown("üêõ **–§–∏—Ç–æ—Å–∞–Ω–∏—Ç–∞—Ä–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥** | –í–µ—Ä—Å–∏—è 1.0")
