"""
Tillage - –£—á–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—á–≤—ã
–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π –º–µ—Ö–∞–Ω–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—á–≤—ã: –≤—Å–ø–∞—à–∫–∞, –∫—É–ª—å—Ç–∏–≤–∞—Ü–∏—è, –±–æ—Ä–æ–Ω–æ–≤–∞–Ω–∏–µ –∏ –¥—Ä.
"""
import streamlit as st
import pandas as pd
from datetime import datetime, date
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
import sys
sys.path.append(str(Path(__file__).parent.parent))

from modules.database import get_db, Farm, Field, Operation, TillageDetails, Machinery, Implements
from modules.auth import (
    require_auth,
    require_farm_binding,
    filter_query_by_farm,
    get_user_display_name,
    get_current_user,
    is_admin,
    can_edit_data,
    can_delete_data
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(page_title="–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—á–≤—ã", page_icon="üöú", layout="wide")

# –¢—Ä–µ–±—É–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∏ –ø—Ä–∏–≤—è–∑–∫—É –∫ —Ö–æ–∑—è–π—Å—Ç–≤—É
require_auth()
require_farm_binding()

st.title("üöú –£—á–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—á–≤—ã")
st.caption(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: **{get_user_display_name()}**")

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
db = next(get_db())

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ö–æ–∑—è–π—Å—Ç–≤–∞
user = get_current_user()

if is_admin():
    farm = db.query(Farm).first()
else:
    user_farm_id = user.get("farm_id") if user else None
    farm = db.query(Farm).filter(Farm.id == user_farm_id).first() if user_farm_id else None

if not farm:
    st.warning("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ!")
    st.stop()

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª–µ–π
fields = filter_query_by_farm(db.query(Field), Field).all()
if not fields:
    st.warning("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –ø–æ–ª—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ '–ü–æ–ª—è'!")
    st.stop()

# –¢–∞–±—ã
tab1, tab2 = st.tabs(["üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏", "üìä –ò—Å—Ç–æ—Ä–∏—è –æ–±—Ä–∞–±–æ—Ç–æ–∫"])

# ========================================
# TAB 1: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—á–≤—ã
# ========================================
with tab1:
    st.subheader("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—á–≤—ã")

    with st.form("tillage_form"):
        col1, col2 = st.columns(2)

        with col1:
            # –í—ã–±–æ—Ä –ø–æ–ª—è
            field_options = {f"{f.field_code} - {f.name}": f for f in fields}
            selected_field_name = st.selectbox(
                "–ü–æ–ª–µ *",
                options=list(field_options.keys()),
                help="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"
            )
            selected_field = field_options[selected_field_name]

            # –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞
            operation_date = st.date_input(
                "–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ *",
                value=date.today(),
                help="–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—á–≤—ã"
            )

            # –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è
            end_date = st.date_input(
                "–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è",
                value=None,
                help="–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è (–¥–ª—è –º–Ω–æ–≥–æ–¥–Ω–µ–≤–Ω—ã—Ö —Ä–∞–±–æ—Ç)"
            )

            # –¢–∏–ø –æ–±—Ä–∞–±–æ—Ç–∫–∏
            tillage_type = st.selectbox(
                "–¢–∏–ø –æ–±—Ä–∞–±–æ—Ç–∫–∏ *",
                options=[
                    'plowing',           # –í—Å–ø–∞—à–∫–∞
                    'cultivation',       # –ö—É–ª—å—Ç–∏–≤–∞—Ü–∏—è
                    'harrowing',        # –ë–æ—Ä–æ–Ω–æ–≤–∞–Ω–∏–µ
                    'discing',          # –î–∏—Å–∫–æ–≤–∞–Ω–∏–µ
                    'deep_loosening',   # –ì–ª—É–±–æ–∫–æ–µ —Ä—ã—Ö–ª–µ–Ω–∏–µ
                    'rolling',          # –ü—Ä–∏–∫–∞—Ç—ã–≤–∞–Ω–∏–µ
                    'stubble_breaking', # –õ—É—â–µ–Ω–∏–µ —Å—Ç–µ—Ä–Ω–∏
                    'chiseling'         # –ß–∏–∑–µ–ª–µ–≤–∞–Ω–∏–µ
                ],
                format_func=lambda x: {
                    'plowing': '–í—Å–ø–∞—à–∫–∞',
                    'cultivation': '–ö—É–ª—å—Ç–∏–≤–∞—Ü–∏—è',
                    'harrowing': '–ë–æ—Ä–æ–Ω–æ–≤–∞–Ω–∏–µ',
                    'discing': '–î–∏—Å–∫–æ–≤–∞–Ω–∏–µ',
                    'deep_loosening': '–ì–ª—É–±–æ–∫–æ–µ —Ä—ã—Ö–ª–µ–Ω–∏–µ',
                    'rolling': '–ü—Ä–∏–∫–∞—Ç—ã–≤–∞–Ω–∏–µ',
                    'stubble_breaking': '–õ—É—â–µ–Ω–∏–µ —Å—Ç–µ—Ä–Ω–∏',
                    'chiseling': '–ß–∏–∑–µ–ª–µ–≤–∞–Ω–∏–µ'
                }[x],
                help="–í–∏–¥ –º–µ—Ö–∞–Ω–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—á–≤—ã"
            )

        with col2:
            # –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –ø–ª–æ—â–∞–¥—å
            area_processed = st.number_input(
                "–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –ø–ª–æ—â–∞–¥—å (–≥–∞) *",
                min_value=0.1,
                max_value=selected_field.area_ha,
                value=selected_field.area_ha,
                step=0.1,
                help=f"–ü–ª–æ—â–∞–¥—å –ø–æ–ª—è: {selected_field.area_ha} –≥–∞"
            )

            # –ì–ª—É–±–∏–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            depth_cm = st.number_input(
                "–ì–ª—É–±–∏–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ (—Å–º)",
                min_value=0.0,
                max_value=50.0,
                value=20.0,
                step=1.0,
                help="–ì–ª—É–±–∏–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—á–≤—ã"
            )

            # –¶–µ–ª—å –æ–±—Ä–∞–±–æ—Ç–∫–∏
            tillage_purpose = st.selectbox(
                "–¶–µ–ª—å –æ–±—Ä–∞–±–æ—Ç–∫–∏",
                options=[
                    'primary',      # –û—Å–Ω–æ–≤–Ω–∞—è
                    'pre_sowing',   # –ü—Ä–µ–¥–ø–æ—Å–µ–≤–Ω–∞—è
                    'post_harvest', # –ü–æ—Å–ª–µ—É–±–æ—Ä–æ—á–Ω–∞—è
                    'weed_control', # –ë–æ—Ä—å–±–∞ —Å —Å–æ—Ä–Ω—è–∫–∞–º–∏
                    'moisture_conservation', # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–ª–∞–≥–∏
                    'other'
                ],
                format_func=lambda x: {
                    'primary': '–û—Å–Ω–æ–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞',
                    'pre_sowing': '–ü—Ä–µ–¥–ø–æ—Å–µ–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞',
                    'post_harvest': '–ü–æ—Å–ª–µ—É–±–æ—Ä–æ—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞',
                    'weed_control': '–ë–æ—Ä—å–±–∞ —Å —Å–æ—Ä–Ω—è–∫–∞–º–∏',
                    'moisture_conservation': '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–ª–∞–≥–∏',
                    'other': '–î—Ä—É–≥–æ–µ'
                }.get(x, x),
                help="–¶–µ–ª—å –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏",
                index=None
            )

        # –¢–µ—Ö–Ω–∏–∫–∞ –∏ –∞–≥—Ä–µ–≥–∞—Ç—ã
        st.markdown("---")
        st.markdown("### üöú –¢–µ—Ö–Ω–∏–∫–∞ –∏ –∞–≥—Ä–µ–≥–∞—Ç—ã")

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–µ—Ö–Ω–∏–∫–∏ –∏ –∞–≥—Ä–µ–≥–∞—Ç–æ–≤
        machinery_list = filter_query_by_farm(db.query(Machinery).filter(Machinery.status == 'active'), Machinery).all()
        implements_list = filter_query_by_farm(db.query(Implements).filter(Implements.status == 'active'), Implements).all()

        col_tech1, col_tech2, col_tech3 = st.columns(3)

        with col_tech1:
            # –¢—Ä–∞–∫—Ç–æ—Ä—ã
            tractors = [m for m in machinery_list if m.machinery_type == 'tractor']

            selected_machinery = st.selectbox(
                "–¢—Ä–∞–∫—Ç–æ—Ä",
                options=[None] + tractors,
                format_func=lambda m: "–ù–µ –≤—ã–±—Ä–∞–Ω–æ" if m is None else f"{m.brand or ''} {m.model} ({m.year or '-'})",
                help="–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–∞–∫—Ç–æ—Ä",
                key="tillage_machinery"
            )

            machine_year = selected_machinery.year if selected_machinery else None

        with col_tech2:
            # –§–∏–ª—å—Ç—Ä—É–µ–º –∞–≥—Ä–µ–≥–∞—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            implement_types_map = {
                'plowing': ['plow'],
                'cultivation': ['cultivator'],
                'harrowing': ['harrow'],
                'discing': ['disc'],
                'deep_loosening': ['deep_loosener'],
                'rolling': ['roller'],
                'stubble_breaking': ['stubble_breaker', 'disc'],
                'chiseling': ['cultivator', 'deep_loosener']
            }

            suitable_types = implement_types_map.get(tillage_type, [])
            suitable_implements = [impl for impl in implements_list if impl.implement_type in suitable_types]

            selected_implement = st.selectbox(
                "–ê–≥—Ä–µ–≥–∞—Ç",
                options=[None] + suitable_implements,
                format_func=lambda i: "–ù–µ –≤—ã–±—Ä–∞–Ω–æ" if i is None else f"{i.brand or ''} {i.model} ({i.working_width_m or '-'}–º)",
                help="–í—ã–±–µ—Ä–∏—Ç–µ –∞–≥—Ä–µ–≥–∞—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏",
                key="tillage_implement"
            )

            implement_year = selected_implement.year if selected_implement else None

            if selected_implement:
                st.caption(f"–®–∏—Ä–∏–Ω–∞ –∑–∞—Ö–≤–∞—Ç–∞: {selected_implement.working_width_m or '-'}–º")

        with col_tech3:
            work_speed_kmh = st.number_input(
                "–†–∞–±–æ—á–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å (–∫–º/—á)",
                min_value=0.0,
                max_value=15.0,
                value=None,
                step=0.5,
                help="–°–∫–æ—Ä–æ—Å—Ç—å –¥–≤–∏–∂–µ–Ω–∏—è –∞–≥—Ä–µ–≥–∞—Ç–∞",
                key="tillage_speed"
            )

        # –£—Å–ª–æ–≤–∏—è –∏ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è
        st.markdown("---")
        st.markdown("### üìù –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")

        col3, col4 = st.columns(2)

        with col3:
            soil_moisture = st.selectbox(
                "–í–ª–∞–∂–Ω–æ—Å—Ç—å –ø–æ—á–≤—ã",
                options=['dry', 'optimal', 'wet', 'very_wet'],
                format_func=lambda x: {
                    'dry': '–°—É—Ö–∞—è',
                    'optimal': '–û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è',
                    'wet': '–í–ª–∞–∂–Ω–∞—è',
                    'very_wet': '–ü–µ—Ä–µ—É–≤–ª–∞–∂–Ω–µ–Ω–Ω–∞—è'
                }[x],
                help="–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—á–≤—ã –ø–æ –≤–ª–∞–∂–Ω–æ—Å—Ç–∏",
                index=None
            )

        with col4:
            weather_conditions = st.text_input(
                "–ü–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è",
                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –Ø—Å–Ω–æ, +15¬∞C",
                help="–û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–≥–æ–¥—ã –≤–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"
            )

        notes = st.text_area(
            "–ü—Ä–∏–º–µ—á–∞–Ω–∏—è",
            height=80,
            help="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±—Ä–∞–±–æ—Ç–∫–µ"
        )

        # –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
        submitted = st.form_submit_button("‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É", use_container_width=True, type="primary")

        if submitted:
            # –í–∞–ª–∏–¥–∞—Ü–∏—è
            errors = []

            if area_processed > selected_field.area_ha:
                errors.append(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –ø–ª–æ—â–∞–¥—å ({area_processed} –≥–∞) –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ø–ª–æ—â–∞–¥—å –ø–æ–ª—è ({selected_field.area_ha} –≥–∞)")

            if errors:
                st.error("‚ùå –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:\n" + "\n".join(f"- {e}" for e in errors))
            else:
                try:
                    # –°–æ–∑–¥–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
                    operation = Operation(
                        farm_id=farm.id,
                        field_id=selected_field.id,
                        operation_type="tillage",
                        operation_date=operation_date,
                        end_date=end_date if end_date else None,
                        area_processed_ha=area_processed,
                        machine_id=selected_machinery.id if selected_machinery else None,
                        implement_id=selected_implement.id if selected_implement else None,
                        machine_year=machine_year,
                        implement_year=implement_year,
                        work_speed_kmh=work_speed_kmh if work_speed_kmh else None,
                        weather_conditions=weather_conditions if weather_conditions else None,
                        notes=notes if notes else None
                    )
                    db.add(operation)
                    db.flush()

                    # –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–∞–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—á–≤—ã
                    tillage_details = TillageDetails(
                        operation_id=operation.id,
                        tillage_type=tillage_type,
                        depth_cm=depth_cm if depth_cm else None,
                        tillage_purpose=tillage_purpose if tillage_purpose else None,
                        soil_moisture=soil_moisture if soil_moisture else None
                    )
                    db.add(tillage_details)

                    db.commit()

                    st.success(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—á–≤—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {area_processed} –≥–∞")
                    st.balloons()

                except Exception as e:
                    db.rollback()
                    st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {str(e)}")

# ========================================
# TAB 2: –ò—Å—Ç–æ—Ä–∏—è –æ–±—Ä–∞–±–æ—Ç–æ–∫
# ========================================
with tab2:
    st.subheader("–ò—Å—Ç–æ—Ä–∏—è –æ–±—Ä–∞–±–æ—Ç–æ–∫ –ø–æ—á–≤—ã")

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–æ–∫
    tillage_operations = db.query(
        Operation.id,
        Operation.operation_date,
        Field.name.label('field_name'),
        Field.field_code,
        Operation.area_processed_ha,
        TillageDetails.tillage_type,
        TillageDetails.depth_cm,
        TillageDetails.tillage_purpose
    ).join(Field).outerjoin(TillageDetails).filter(
        Operation.operation_type == "tillage",
        Field.farm_id == farm.id
    ).order_by(Operation.operation_date.desc()).all()

    if tillage_operations:
        # –°–æ–∑–¥–∞–Ω–∏–µ DataFrame
        tillage_data = []
        for op in tillage_operations:
            tillage_data.append({
                'ID': op.id,
                '–î–∞—Ç–∞': op.operation_date.strftime('%Y-%m-%d') if op.operation_date else '-',
                '–ü–æ–ª–µ': op.field_name or op.field_code,
                '–¢–∏–ø –æ–±—Ä–∞–±–æ—Ç–∫–∏': {
                    'plowing': '–í—Å–ø–∞—à–∫–∞',
                    'cultivation': '–ö—É–ª—å—Ç–∏–≤–∞—Ü–∏—è',
                    'harrowing': '–ë–æ—Ä–æ–Ω–æ–≤–∞–Ω–∏–µ',
                    'discing': '–î–∏—Å–∫–æ–≤–∞–Ω–∏–µ',
                    'deep_loosening': '–ì–ª—É–±–æ–∫–æ–µ —Ä—ã—Ö–ª–µ–Ω–∏–µ',
                    'rolling': '–ü—Ä–∏–∫–∞—Ç—ã–≤–∞–Ω–∏–µ',
                    'stubble_breaking': '–õ—É—â–µ–Ω–∏–µ —Å—Ç–µ—Ä–Ω–∏',
                    'chiseling': '–ß–∏–∑–µ–ª–µ–≤–∞–Ω–∏–µ'
                }.get(op.tillage_type, op.tillage_type or '-'),
                '–ì–ª—É–±–∏–Ω–∞ (—Å–º)': op.depth_cm or '-',
                '–ü–ª–æ—â–∞–¥—å (–≥–∞)': op.area_processed_ha or '-',
                '–¶–µ–ª—å': {
                    'primary': '–û—Å–Ω–æ–≤–Ω–∞—è',
                    'pre_sowing': '–ü—Ä–µ–¥–ø–æ—Å–µ–≤–Ω–∞—è',
                    'post_harvest': '–ü–æ—Å–ª–µ—É–±–æ—Ä–æ—á–Ω–∞—è',
                    'weed_control': '–ë–æ—Ä—å–±–∞ —Å —Å–æ—Ä–Ω—è–∫–∞–º–∏',
                    'moisture_conservation': '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–ª–∞–≥–∏',
                    'other': '–î—Ä—É–≥–æ–µ'
                }.get(op.tillage_purpose, op.tillage_purpose or '-')
            })

        df_tillage = pd.DataFrame(tillage_data)
        st.dataframe(df_tillage, use_container_width=True, hide_index=True)

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        col1, col2, col3 = st.columns(3)

        with col1:
            st.metric("–í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–æ–∫", len(tillage_operations))

        with col2:
            total_area = sum([op.area_processed_ha for op in tillage_operations if op.area_processed_ha])
            st.metric("–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤—Å–µ–≥–æ", f"{total_area:,.1f} –≥–∞")

        with col3:
            unique_types = len(set([op.tillage_type for op in tillage_operations if op.tillage_type]))
            st.metric("–¢–∏–ø–æ–≤ –æ–±—Ä–∞–±–æ—Ç–æ–∫", unique_types)

    else:
        st.info("üì≠ –ò—Å—Ç–æ—Ä–∏—è –æ–±—Ä–∞–±–æ—Ç–æ–∫ –ø—É—Å—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –≤—ã—à–µ.")

# Sidebar
with st.sidebar:
    st.markdown("### ‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞")
    st.info("""
    **–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—á–≤—ã** - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –ø–æ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ—á–≤—ã.

    **–¢–∏–ø—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏:**
    - –í—Å–ø–∞—à–∫–∞ - –æ–±–æ—Ä–æ—Ç –ø–ª–∞—Å—Ç–∞
    - –ö—É–ª—å—Ç–∏–≤–∞—Ü–∏—è - —Ä—ã—Ö–ª–µ–Ω–∏–µ –±–µ–∑ –æ–±–æ—Ä–æ—Ç–∞
    - –ë–æ—Ä–æ–Ω–æ–≤–∞–Ω–∏–µ - –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ, –∫—Ä–æ—à–µ–Ω–∏–µ
    - –î–∏—Å–∫–æ–≤–∞–Ω–∏–µ - –∏–∑–º–µ–ª—å—á–µ–Ω–∏–µ —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤
    - –ì–ª—É–±–æ–∫–æ–µ —Ä—ã—Ö–ª–µ–Ω–∏–µ - –±–µ–∑ –æ–±–æ—Ä–æ—Ç–∞ –ø–ª–∞—Å—Ç–∞
    - –ü—Ä–∏–∫–∞—Ç—ã–≤–∞–Ω–∏–µ - —É–ø–ª–æ—Ç–Ω–µ–Ω–∏–µ –ø–æ—á–≤—ã
    - –õ—É—â–µ–Ω–∏–µ —Å—Ç–µ—Ä–Ω–∏ - –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
    - –ß–∏–∑–µ–ª–µ–≤–∞–Ω–∏–µ - –≥–ª—É–±–æ–∫–æ–µ —Ä—ã—Ö–ª–µ–Ω–∏–µ —á–∏–∑–µ–ª–µ–º
    """)

    st.markdown("### üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
    st.markdown("""
    - –°–æ–±–ª—é–¥–∞–π—Ç–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é –≤–ª–∞–∂–Ω–æ—Å—Ç—å –ø–æ—á–≤—ã
    - –í—ã–±–∏—Ä–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –≥–ª—É–±–∏–Ω—É –æ–±—Ä–∞–±–æ—Ç–∫–∏
    - –£—á–∏—Ç—ã–≤–∞–π—Ç–µ —Ç–∏–ø –ø–æ—á–≤—ã –∏ –∫—É–ª—å—Ç—É—Ä—É
    - –ò–∑–±–µ–≥–∞–π—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä–µ—É–≤–ª–∞–∂–Ω–µ–Ω–Ω–æ–π –ø–æ—á–≤—ã
    """)
