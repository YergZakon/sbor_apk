"""
Equipment - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏–∫–æ–π –∏ –∞–≥—Ä–µ–≥–∞—Ç–∞–º–∏
–î–æ–±–∞–≤–ª–µ–Ω–∏–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –ø—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ—Ö–Ω–∏–∫–∏ (—Ç—Ä–∞–∫—Ç–æ—Ä—ã, –∫–æ–º–±–∞–π–Ω—ã) –∏ –∞–≥—Ä–µ–≥–∞—Ç–æ–≤ (—Å–µ—è–ª–∫–∏, –∫—É–ª—å—Ç–∏–≤–∞—Ç–æ—Ä—ã)
"""
import streamlit as st
import pandas as pd
from sqlalchemy.orm import Session
from modules.database import SessionLocal, Farm, Machinery, Implements
from modules.auth import (
    require_auth,
    require_farm_binding,
    filter_query_by_farm,
    get_user_display_name,
    can_edit_data,
    can_delete_data
)
from modules.validators import validator
from modules.config import settings
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(page_title="–¢–µ—Ö–Ω–∏–∫–∞", page_icon="üöú", layout="wide")

# –¢—Ä–µ–±—É–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∏ –ø—Ä–∏–≤—è–∑–∫—É –∫ —Ö–æ–∑—è–π—Å—Ç–≤—É
require_auth()
require_farm_binding()

# –ó–∞–≥–æ–ª–æ–≤–æ–∫
st.title("üöú –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏–∫–æ–π –∏ –∞–≥—Ä–µ–≥–∞—Ç–∞–º–∏")
st.caption(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: **{get_user_display_name()}**")

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ë–î
db = SessionLocal()

try:
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ö–æ–∑—è–π—Å—Ç–≤–∞
    from modules.auth import get_current_user, is_admin
    user = get_current_user()

    if is_admin():
        farm = db.query(Farm).first()
    else:
        user_farm_id = user.get("farm_id") if user else None
        if user_farm_id:
            farm = db.query(Farm).filter(Farm.id == user_farm_id).first()
        else:
            farm = None

    if not farm:
        st.error("‚ùå –•–æ–∑—è–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∫ —Ö–æ–∑—è–π—Å—Ç–≤—É.")
        st.stop()

    # ============================================================================
    # –í–ö–õ–ê–î–ö–ò –î–õ–Ø –¢–ï–•–ù–ò–ö–ò –ò –ê–ì–†–ï–ì–ê–¢–û–í
    # ============================================================================

    tab1, tab2 = st.tabs(["üöú –¢–µ—Ö–Ω–∏–∫–∞", "üîß –ê–≥—Ä–µ–≥–∞—Ç—ã"])

    # ============================================================================
    # –í–ö–õ–ê–î–ö–ê 1: –¢–ï–•–ù–ò–ö–ê (MACHINERY)
    # ============================================================================

    with tab1:
        st.markdown("### üöú –¢–µ—Ö–Ω–∏–∫–∞")
        st.caption("–¢—Ä–∞–∫—Ç–æ—Ä—ã, –∫–æ–º–±–∞–π–Ω—ã, —Å–∞–º–æ—Ö–æ–¥–Ω—ã–µ –æ–ø—Ä—ã—Å–∫–∏–≤–∞—Ç–µ–ª–∏, –¥—Ä–æ–Ω—ã, —Å–∏—Å—Ç–µ–º—ã –æ—Ä–æ—à–µ–Ω–∏—è")

        # –°–ø–∏—Å–æ–∫ —Ç–µ—Ö–Ω–∏–∫–∏
        machinery_list = filter_query_by_farm(db.query(Machinery), Machinery).all()

        if machinery_list:
            # –°–æ–∑–¥–∞–Ω–∏–µ DataFrame
            machinery_data = []
            for m in machinery_list:
                machinery_data.append({
                    'ID': m.id,
                    '–¢–∏–ø': {
                        'tractor': '–¢—Ä–∞–∫—Ç–æ—Ä',
                        'combine': '–ö–æ–º–±–∞–π–Ω',
                        'self_propelled_sprayer': '–°–∞–º–æ—Ö–æ–¥–Ω—ã–π –æ–ø—Ä—ã—Å–∫–∏–≤–∞—Ç–µ–ª—å',
                        'drone': '–î—Ä–æ–Ω',
                        'irrigation_system': '–°–∏—Å—Ç–µ–º–∞ –æ—Ä–æ—à–µ–Ω–∏—è',
                        'other': '–î—Ä—É–≥–æ–µ'
                    }.get(m.machinery_type, m.machinery_type),
                    '–ú–∞—Ä–∫–∞': m.brand or '-',
                    '–ú–æ–¥–µ–ª—å': m.model,
                    '–ì–æ–¥': m.year or '-',
                    '–†–µ–≥. –Ω–æ–º–µ—Ä': m.registration_number or '-',
                    '–ú–æ—â–Ω–æ—Å—Ç—å (–ª.—Å.)': m.engine_power_hp or '-',
                    '–¢–æ–ø–ª–∏–≤–æ': m.fuel_type or '-',
                    '–°—Ç–∞—Ç—É—Å': {
                        'active': '‚úÖ –ê–∫—Ç–∏–≤–Ω–∞',
                        'maintenance': 'üîß –†–µ–º–æ–Ω—Ç',
                        'inactive': '‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∞',
                        'sold': 'üí∞ –ü—Ä–æ–¥–∞–Ω–∞'
                    }.get(m.status, m.status),
                    '–°—Ç–æ–∏–º–æ—Å—Ç—å': f"{m.current_value:,.0f} —Ç–≥" if m.current_value else '-'
                })

            df_machinery = pd.DataFrame(machinery_data)
            st.dataframe(df_machinery, use_container_width=True, hide_index=True)

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            col1, col2, col3, col4 = st.columns(4)
            with col1:
                st.metric("–í—Å–µ–≥–æ –µ–¥–∏–Ω–∏—Ü", len(machinery_list))
            with col2:
                active_count = len([m for m in machinery_list if m.status == 'active'])
                st.metric("–ê–∫—Ç–∏–≤–Ω—ã—Ö", active_count)
            with col3:
                total_value = sum([m.current_value for m in machinery_list if m.current_value])
                st.metric("–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å", f"{total_value:,.0f} —Ç–≥")
            with col4:
                total_power = sum([m.engine_power_hp for m in machinery_list if m.engine_power_hp])
                st.metric("–û–±—â–∞—è –º–æ—â–Ω–æ—Å—Ç—å", f"{total_power:,.0f} –ª.—Å.")
        else:
            st.info("–¢–µ—Ö–Ω–∏–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é –µ–¥–∏–Ω–∏—Ü—É —Ç–µ—Ö–Ω–∏–∫–∏ –Ω–∏–∂–µ.")

        st.markdown("---")

        # ============================================================================
        # –§–û–†–ú–ê –î–û–ë–ê–í–õ–ï–ù–ò–Ø/–†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–Ø –¢–ï–•–ù–ò–ö–ò
        # ============================================================================

        st.markdown("### ‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–µ—Ö–Ω–∏–∫—É")

        with st.form("add_machinery_form", clear_on_submit=True):
            col1, col2 = st.columns(2)

            with col1:
                machinery_type = st.selectbox(
                    "–¢–∏–ø —Ç–µ—Ö–Ω–∏–∫–∏ *",
                    options=['tractor', 'combine', 'self_propelled_sprayer', 'drone', 'irrigation_system', 'other'],
                    format_func=lambda x: {
                        'tractor': '–¢—Ä–∞–∫—Ç–æ—Ä',
                        'combine': '–ö–æ–º–±–∞–π–Ω',
                        'self_propelled_sprayer': '–°–∞–º–æ—Ö–æ–¥–Ω—ã–π –æ–ø—Ä—ã—Å–∫–∏–≤–∞—Ç–µ–ª—å',
                        'drone': '–î—Ä–æ–Ω',
                        'irrigation_system': '–°–∏—Å—Ç–µ–º–∞ –æ—Ä–æ—à–µ–Ω–∏—è',
                        'other': '–î—Ä—É–≥–æ–µ'
                    }[x]
                )

                brand = st.text_input("–ú–∞—Ä–∫–∞", placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: John Deere, Case IH, –ú–¢–ó")
                model = st.text_input("–ú–æ–¥–µ–ª—å *", placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 8R 370, Axial-Flow 9250")
                year = st.number_input("–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞", min_value=1950, max_value=datetime.now().year, value=None, step=1)
                registration_number = st.text_input("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä", placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ê123–í–° 01")

            with col2:
                engine_power_hp = st.number_input("–ú–æ—â–Ω–æ—Å—Ç—å –¥–≤–∏–≥–∞—Ç–µ–ª—è (–ª.—Å.)", min_value=0.0, value=None, step=10.0)
                fuel_type = st.selectbox(
                    "–¢–∏–ø —Ç–æ–ø–ª–∏–≤–∞",
                    options=['diesel', 'gasoline', 'electric', 'hybrid', 'gas', 'other'],
                    format_func=lambda x: {
                        'diesel': '–î–∏–∑–µ–ª—å',
                        'gasoline': '–ë–µ–Ω–∑–∏–Ω',
                        'electric': '–≠–ª–µ–∫—Ç—Ä–æ',
                        'hybrid': '–ì–∏–±—Ä–∏–¥',
                        'gas': '–ì–∞–∑',
                        'other': '–î—Ä—É–≥–æ–µ'
                    }.get(x, x),
                    index=None
                )

                purchase_date = st.date_input("–î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏", value=None)
                purchase_price = st.number_input("–¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏ (—Ç–µ–Ω–≥–µ)", min_value=0.0, value=None, step=100000.0)
                current_value = st.number_input("–¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å (—Ç–µ–Ω–≥–µ)", min_value=0.0, value=None, step=100000.0)

                status = st.selectbox(
                    "–°—Ç–∞—Ç—É—Å",
                    options=['active', 'maintenance', 'inactive', 'sold'],
                    format_func=lambda x: {
                        'active': '‚úÖ –ê–∫—Ç–∏–≤–Ω–∞',
                        'maintenance': 'üîß –ù–∞ —Ä–µ–º–æ–Ω—Ç–µ',
                        'inactive': '‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∞',
                        'sold': 'üí∞ –ü—Ä–æ–¥–∞–Ω–∞'
                    }[x]
                )

            notes = st.text_area("–ü—Ä–∏–º–µ—á–∞–Ω–∏—è", placeholder="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ—Ö–Ω–∏–∫–µ")

            submitted = st.form_submit_button("‚úÖ –î–æ–±–∞–≤–∏—Ç—å —Ç–µ—Ö–Ω–∏–∫—É", use_container_width=True, type="primary")

            if submitted:
                if not model:
                    st.error("‚ùå –£–∫–∞–∂–∏—Ç–µ –º–æ–¥–µ–ª—å —Ç–µ—Ö–Ω–∏–∫–∏")
                elif not can_edit_data():
                    st.error("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö")
                else:
                    try:
                        new_machinery = Machinery(
                            farm_id=farm.id,
                            machinery_type=machinery_type,
                            brand=brand if brand else None,
                            model=model,
                            year=year if year else None,
                            registration_number=registration_number if registration_number else None,
                            engine_power_hp=engine_power_hp if engine_power_hp else None,
                            fuel_type=fuel_type if fuel_type else None,
                            purchase_date=purchase_date if purchase_date else None,
                            purchase_price=purchase_price if purchase_price else None,
                            current_value=current_value if current_value else None,
                            status=status,
                            notes=notes if notes else None
                        )

                        db.add(new_machinery)
                        db.commit()

                        st.success(f"‚úÖ –¢–µ—Ö–Ω–∏–∫–∞ {brand} {model} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
                        st.rerun()
                    except Exception as e:
                        db.rollback()
                        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–µ—Ö–Ω–∏–∫–∏: {e}")

        st.markdown("---")

        # ============================================================================
        # –£–î–ê–õ–ï–ù–ò–ï –¢–ï–•–ù–ò–ö–ò
        # ============================================================================

        if machinery_list and can_delete_data():
            st.markdown("### üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ç–µ—Ö–Ω–∏–∫—É")

            machinery_to_delete = st.selectbox(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Ö–Ω–∏–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è",
                options=machinery_list,
                format_func=lambda m: f"{m.brand or ''} {m.model} ({m.year or '-'}) - {m.registration_number or '–±–µ–∑ –Ω–æ–º–µ—Ä–∞'}"
            )

            if st.button("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ç–µ—Ö–Ω–∏–∫—É", type="secondary"):
                try:
                    db.delete(machinery_to_delete)
                    db.commit()
                    st.success("‚úÖ –¢–µ—Ö–Ω–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∞")
                    st.rerun()
                except Exception as e:
                    db.rollback()
                    st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}")

    # ============================================================================
    # –í–ö–õ–ê–î–ö–ê 2: –ê–ì–†–ï–ì–ê–¢–´ (IMPLEMENTS)
    # ============================================================================

    with tab2:
        st.markdown("### üîß –ê–≥—Ä–µ–≥–∞—Ç—ã")
        st.caption("–°–µ—è–ª–∫–∏, –ø–ª—É–≥–∏, –∫—É–ª—å—Ç–∏–≤–∞—Ç–æ—Ä—ã, –±–æ—Ä–æ–Ω—ã, –ø—Ä–∏—Ü–µ–ø–Ω—ã–µ –æ–ø—Ä—ã—Å–∫–∏–≤–∞—Ç–µ–ª–∏ –∏ –¥—Ä—É–≥–∏–µ –Ω–∞–≤–µ—Å–Ω—ã–µ –æ—Ä—É–¥–∏—è")

        # –°–ø–∏—Å–æ–∫ –∞–≥—Ä–µ–≥–∞—Ç–æ–≤
        implements_list = filter_query_by_farm(db.query(Implements), Implements).all()

        if implements_list:
            # –°–æ–∑–¥–∞–Ω–∏–µ DataFrame
            implements_data = []
            for impl in implements_list:
                implements_data.append({
                    'ID': impl.id,
                    '–¢–∏–ø': {
                        'seeder': '–°–µ—è–ª–∫–∞',
                        'planter': '–°–∞–∂–∞–ª–∫–∞',
                        'plow': '–ü–ª—É–≥',
                        'cultivator': '–ö—É–ª—å—Ç–∏–≤–∞—Ç–æ—Ä',
                        'harrow': '–ë–æ—Ä–æ–Ω–∞',
                        'disc': '–î–∏—Å–∫–æ–≤–∞—è –±–æ—Ä–æ–Ω–∞',
                        'deep_loosener': '–ì–ª—É–±–æ–∫–æ—Ä—ã—Ö–ª–∏—Ç–µ–ª—å',
                        'roller': '–ö–∞—Ç–æ–∫',
                        'sprayer_trailer': '–ü—Ä–∏—Ü–µ–ø–Ω–æ–π –æ–ø—Ä—ã—Å–∫–∏–≤–∞—Ç–µ–ª—å',
                        'fertilizer_spreader': '–†–∞–∑–±—Ä–∞—Å—ã–≤–∞—Ç–µ–ª—å —É–¥–æ–±—Ä–µ–Ω–∏–π',
                        'stubble_breaker': '–°—Ç–µ—Ä–Ω–µ–≤–∞—è –±–æ—Ä–æ–Ω–∞',
                        'snow_plow': '–°–Ω–µ–≥–æ–∑–∞–¥–µ—Ä–∂–∞—Ç–µ–ª—å',
                        'other': '–î—Ä—É–≥–æ–µ'
                    }.get(impl.implement_type, impl.implement_type),
                    '–ú–∞—Ä–∫–∞': impl.brand or '-',
                    '–ú–æ–¥–µ–ª—å': impl.model,
                    '–ì–æ–¥': impl.year or '-',
                    '–®–∏—Ä–∏–Ω–∞ –∑–∞—Ö–≤–∞—Ç–∞ (–º)': impl.working_width_m or '-',
                    '–°—Ç–∞—Ç—É—Å': {
                        'active': '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω',
                        'maintenance': 'üîß –†–µ–º–æ–Ω—Ç',
                        'inactive': '‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω',
                        'sold': 'üí∞ –ü—Ä–æ–¥–∞–Ω'
                    }.get(impl.status, impl.status),
                    '–°—Ç–æ–∏–º–æ—Å—Ç—å': f"{impl.current_value:,.0f} —Ç–≥" if impl.current_value else '-'
                })

            df_implements = pd.DataFrame(implements_data)
            st.dataframe(df_implements, use_container_width=True, hide_index=True)

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("–í—Å–µ–≥–æ –µ–¥–∏–Ω–∏—Ü", len(implements_list))
            with col2:
                active_count = len([i for i in implements_list if i.status == 'active'])
                st.metric("–ê–∫—Ç–∏–≤–Ω—ã—Ö", active_count)
            with col3:
                total_value = sum([i.current_value for i in implements_list if i.current_value])
                st.metric("–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å", f"{total_value:,.0f} —Ç–≥")
        else:
            st.info("–ê–≥—Ä–µ–≥–∞—Ç—ã –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π –∞–≥—Ä–µ–≥–∞—Ç –Ω–∏–∂–µ.")

        st.markdown("---")

        # ============================================================================
        # –§–û–†–ú–ê –î–û–ë–ê–í–õ–ï–ù–ò–Ø/–†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–Ø –ê–ì–†–ï–ì–ê–¢–û–í
        # ============================================================================

        st.markdown("### ‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–≥—Ä–µ–≥–∞—Ç")

        with st.form("add_implement_form", clear_on_submit=True):
            col1, col2 = st.columns(2)

            with col1:
                implement_type = st.selectbox(
                    "–¢–∏–ø –∞–≥—Ä–µ–≥–∞—Ç–∞ *",
                    options=['seeder', 'planter', 'plow', 'cultivator', 'harrow', 'disc',
                            'deep_loosener', 'roller', 'sprayer_trailer', 'fertilizer_spreader',
                            'stubble_breaker', 'snow_plow', 'other'],
                    format_func=lambda x: {
                        'seeder': '–°–µ—è–ª–∫–∞',
                        'planter': '–°–∞–∂–∞–ª–∫–∞',
                        'plow': '–ü–ª—É–≥',
                        'cultivator': '–ö—É–ª—å—Ç–∏–≤–∞—Ç–æ—Ä',
                        'harrow': '–ë–æ—Ä–æ–Ω–∞',
                        'disc': '–î–∏—Å–∫–æ–≤–∞—è –±–æ—Ä–æ–Ω–∞',
                        'deep_loosener': '–ì–ª—É–±–æ–∫–æ—Ä—ã—Ö–ª–∏—Ç–µ–ª—å',
                        'roller': '–ö–∞—Ç–æ–∫',
                        'sprayer_trailer': '–ü—Ä–∏—Ü–µ–ø–Ω–æ–π –æ–ø—Ä—ã—Å–∫–∏–≤–∞—Ç–µ–ª—å',
                        'fertilizer_spreader': '–†–∞–∑–±—Ä–∞—Å—ã–≤–∞—Ç–µ–ª—å —É–¥–æ–±—Ä–µ–Ω–∏–π',
                        'stubble_breaker': '–°—Ç–µ—Ä–Ω–µ–≤–∞—è –±–æ—Ä–æ–Ω–∞',
                        'snow_plow': '–°–Ω–µ–≥–æ–∑–∞–¥–µ—Ä–∂–∞—Ç–µ–ª—å',
                        'other': '–î—Ä—É–≥–æ–µ'
                    }[x]
                )

                impl_brand = st.text_input("–ú–∞—Ä–∫–∞", placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: Amazone, Horsch, –ë–î–¢")
                impl_model = st.text_input("–ú–æ–¥–µ–ª—å *", placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: Cirrus 6003, Pronto 9 DC")
                impl_year = st.number_input("–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞", min_value=1950, max_value=datetime.now().year, value=None, step=1, key="impl_year")
                working_width_m = st.number_input("–®–∏—Ä–∏–Ω–∞ –∑–∞—Ö–≤–∞—Ç–∞ (–º)", min_value=0.0, value=None, step=0.5)

            with col2:
                impl_purchase_date = st.date_input("–î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏", value=None, key="impl_purchase_date")
                impl_purchase_price = st.number_input("–¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏ (—Ç–µ–Ω–≥–µ)", min_value=0.0, value=None, step=50000.0, key="impl_purchase_price")
                impl_current_value = st.number_input("–¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å (—Ç–µ–Ω–≥–µ)", min_value=0.0, value=None, step=50000.0, key="impl_current_value")

                impl_status = st.selectbox(
                    "–°—Ç–∞—Ç—É—Å",
                    options=['active', 'maintenance', 'inactive', 'sold'],
                    format_func=lambda x: {
                        'active': '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω',
                        'maintenance': 'üîß –ù–∞ —Ä–µ–º–æ–Ω—Ç–µ',
                        'inactive': '‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω',
                        'sold': 'üí∞ –ü—Ä–æ–¥–∞–Ω'
                    }[x],
                    key="impl_status"
                )

            impl_notes = st.text_area("–ü—Ä–∏–º–µ—á–∞–Ω–∏—è", placeholder="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≥—Ä–µ–≥–∞—Ç–µ", key="impl_notes")

            impl_submitted = st.form_submit_button("‚úÖ –î–æ–±–∞–≤–∏—Ç—å –∞–≥—Ä–µ–≥–∞—Ç", use_container_width=True, type="primary")

            if impl_submitted:
                if not impl_model:
                    st.error("‚ùå –£–∫–∞–∂–∏—Ç–µ –º–æ–¥–µ–ª—å –∞–≥—Ä–µ–≥–∞—Ç–∞")
                elif not can_edit_data():
                    st.error("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö")
                else:
                    try:
                        new_implement = Implements(
                            farm_id=farm.id,
                            implement_type=implement_type,
                            brand=impl_brand if impl_brand else None,
                            model=impl_model,
                            year=impl_year if impl_year else None,
                            working_width_m=working_width_m if working_width_m else None,
                            purchase_date=impl_purchase_date if impl_purchase_date else None,
                            purchase_price=impl_purchase_price if impl_purchase_price else None,
                            current_value=impl_current_value if impl_current_value else None,
                            status=impl_status,
                            notes=impl_notes if impl_notes else None
                        )

                        db.add(new_implement)
                        db.commit()

                        st.success(f"‚úÖ –ê–≥—Ä–µ–≥–∞—Ç {impl_brand} {impl_model} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
                        st.rerun()
                    except Exception as e:
                        db.rollback()
                        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–≥—Ä–µ–≥–∞—Ç–∞: {e}")

        st.markdown("---")

        # ============================================================================
        # –£–î–ê–õ–ï–ù–ò–ï –ê–ì–†–ï–ì–ê–¢–û–í
        # ============================================================================

        if implements_list and can_delete_data():
            st.markdown("### üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∞–≥—Ä–µ–≥–∞—Ç")

            implement_to_delete = st.selectbox(
                "–í—ã–±–µ—Ä–∏—Ç–µ –∞–≥—Ä–µ–≥–∞—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è",
                options=implements_list,
                format_func=lambda i: f"{i.brand or ''} {i.model} ({i.year or '-'}) - {i.working_width_m or '-'}–º"
            )

            if st.button("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∞–≥—Ä–µ–≥–∞—Ç", type="secondary"):
                try:
                    db.delete(implement_to_delete)
                    db.commit()
                    st.success("‚úÖ –ê–≥—Ä–µ–≥–∞—Ç —É–¥–∞–ª—ë–Ω")
                    st.rerun()
                except Exception as e:
                    db.rollback()
                    st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}")

finally:
    db.close()
