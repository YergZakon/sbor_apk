"""
Agrochemistry - –ê–≥—Ä–æ—Ö–∏–º–∏—á–µ—Å–∫–∏–µ –∞–Ω–∞–ª–∏–∑—ã –ø–æ—á–≤—ã
"""
import streamlit as st
import pandas as pd
from datetime import datetime, date
from pathlib import Path
import plotly.express as px
import plotly.graph_objects as go

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
import sys
sys.path.append(str(Path(__file__).parent.parent))

from modules.database import get_db, Farm, Field, Operation, AgrochemicalAnalysis
from modules.validators import DataValidator
from modules.config import Settings
from utils.formatters import format_date, format_area, format_number
from utils.charts import create_heatmap, create_grouped_bar_chart

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(page_title="–ê–≥—Ä–æ—Ö–∏–º–∏—è", page_icon="üß™", layout="wide")

st.title("üß™ –ê–≥—Ä–æ—Ö–∏–º–∏—á–µ—Å–∫–∏–µ –∞–Ω–∞–ª–∏–∑—ã –ø–æ—á–≤—ã")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
validator = DataValidator()
settings = Settings()

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
db = next(get_db())

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ö–æ–∑—è–π—Å—Ç–≤–∞
farm = db.query(Farm).first()
if not farm:
    st.warning("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∏–º–ø–æ—Ä—Ç–∞!")
    st.stop()

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª–µ–π
fields = db.query(Field).filter(Field.farm_id == farm.id).all()
if not fields:
    st.warning("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –ø–æ–ª—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ '–ü–æ–ª—è'!")
    st.stop()

# –¢–∞–±—ã
tab1, tab2, tab3, tab4 = st.tabs(["üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞", "üìä –ò—Å—Ç–æ—Ä–∏—è –∞–Ω–∞–ª–∏–∑–æ–≤", "üó∫Ô∏è –ö–∞—Ä—Ç–∞ –ø–ª–æ–¥–æ—Ä–æ–¥–∏—è", "üìö –ù–æ—Ä–º–∞—Ç–∏–≤—ã"])

# ========================================
# TAB 1: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞
# ========================================
with tab1:
    st.subheader("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∞–≥—Ä–æ—Ö–∏–º–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")

    with st.form("agrochemical_form"):
        col1, col2 = st.columns(2)

        with col1:
            # –í—ã–±–æ—Ä –ø–æ–ª—è
            field_options = {f"{f.field_code} - {f.name}": f for f in fields}
            selected_field_name = st.selectbox(
                "–ü–æ–ª–µ *",
                options=list(field_options.keys()),
                help="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
            )
            selected_field = field_options[selected_field_name]

            # –î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞
            analysis_date = st.date_input(
                "–î–∞—Ç–∞ –æ—Ç–±–æ—Ä–∞ –ø—Ä–æ–± *",
                value=date.today(),
                help="–î–∞—Ç–∞ –æ—Ç–±–æ—Ä–∞ –ø–æ—á–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±"
            )

            # –ì–ª—É–±–∏–Ω–∞ –æ—Ç–±–æ—Ä–∞
            sample_depth = st.number_input(
                "–ì–ª—É–±–∏–Ω–∞ –æ—Ç–±–æ—Ä–∞ (—Å–º) *",
                min_value=0,
                max_value=100,
                value=20,
                step=5,
                help="–ì–ª—É–±–∏–Ω–∞ –æ—Ç–±–æ—Ä–∞ –ø–æ—á–≤–µ–Ω–Ω–æ–≥–æ –æ–±—Ä–∞–∑—Ü–∞"
            )

            # pH
            st.markdown("#### –ö–∏—Å–ª–æ—Ç–Ω–æ—Å—Ç—å –ø–æ—á–≤—ã")

            ph_water = st.number_input(
                "pH –≤–æ–¥–Ω—ã–π",
                min_value=3.0,
                max_value=10.0,
                value=7.0,
                step=0.1,
                help="pH –≤–æ–¥–Ω–æ–π –≤—ã—Ç—è–∂–∫–∏"
            )

            ph_salt = st.number_input(
                "pH —Å–æ–ª–µ–≤–æ–π",
                min_value=3.0,
                max_value=10.0,
                value=6.5,
                step=0.1,
                help="pH —Å–æ–ª–µ–≤–æ–π –≤—ã—Ç—è–∂–∫–∏ (KCl)"
            )

        with col2:
            # –ì—É–º—É—Å
            st.markdown("#### –û—Ä–≥–∞–Ω–∏—á–µ—Å–∫–æ–µ –≤–µ—â–µ—Å—Ç–≤–æ")

            humus_percent = st.number_input(
                "–ì—É–º—É—Å (%)",
                min_value=0.0,
                max_value=15.0,
                value=3.0,
                step=0.1,
                help="–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –≥—É–º—É—Å–∞ –≤ –ø–æ—á–≤–µ"
            )

            # –ê–∑–æ—Ç
            st.markdown("#### –≠–ª–µ–º–µ–Ω—Ç—ã –ø–∏—Ç–∞–Ω–∏—è")

            nitrogen_total = st.number_input(
                "–ê–∑–æ—Ç –æ–±—â–∏–π (%)",
                min_value=0.0,
                max_value=1.0,
                value=0.15,
                step=0.01,
                help="–û–±—â–∏–π –∞–∑–æ—Ç –≤ –ø–æ—á–≤–µ"
            )

            # –§–æ—Å—Ñ–æ—Ä
            p2o5_mg_kg = st.number_input(
                "P‚ÇÇO‚ÇÖ (–º–≥/–∫–≥)",
                min_value=0.0,
                max_value=500.0,
                value=50.0,
                step=5.0,
                help="–ü–æ–¥–≤–∏–∂–Ω—ã–π —Ñ–æ—Å—Ñ–æ—Ä"
            )

            # –ö–∞–ª–∏–π
            k2o_mg_kg = st.number_input(
                "K‚ÇÇO (–º–≥/–∫–≥)",
                min_value=0.0,
                max_value=1000.0,
                value=200.0,
                step=10.0,
                help="–û–±–º–µ–Ω–Ω—ã–π –∫–∞–ª–∏–π"
            )

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        st.markdown("---")
        st.markdown("### üî¨ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã")

        col3, col4, col5, col6 = st.columns(4)

        with col3:
            mobile_s = st.number_input(
                "–°–µ—Ä–∞ –ø–æ–¥–≤–∏–∂–Ω–∞—è (–º–≥/–∫–≥)",
                min_value=0.0,
                max_value=100.0,
                value=10.0,
                step=1.0
            )

        with col4:
            ca_mg_kg = st.number_input(
                "–ö–∞–ª—å—Ü–∏–π (–º–≥/–∫–≥)",
                min_value=0.0,
                max_value=5000.0,
                value=1500.0,
                step=50.0
            )

        with col5:
            mg_mg_kg = st.number_input(
                "–ú–∞–≥–Ω–∏–π (–º–≥/–∫–≥)",
                min_value=0.0,
                max_value=500.0,
                value=100.0,
                step=10.0
            )

        with col6:
            na_mg_kg = st.number_input(
                "–ù–∞—Ç—Ä–∏–π (–º–≥/–∫–≥)",
                min_value=0.0,
                max_value=500.0,
                value=50.0,
                step=5.0
            )

        # –û—Ü–µ–Ω–∫–∞ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        st.markdown("---")
        st.markdown("### üìä –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ü–µ–Ω–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")

        col7, col8, col9 = st.columns(3)

        with col7:
            # –û—Ü–µ–Ω–∫–∞ pH
            if ph_water < 5.5:
                ph_assessment = "üî¥ –ö–∏—Å–ª–∞—è (—Ç—Ä–µ–±—É–µ—Ç—Å—è –∏–∑–≤–µ—Å—Ç–∫–æ–≤–∞–Ω–∏–µ)"
            elif ph_water < 6.5:
                ph_assessment = "üü° –°–ª–∞–±–æ–∫–∏—Å–ª–∞—è"
            elif ph_water <= 7.5:
                ph_assessment = "üü¢ –ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è (–æ–ø—Ç–∏–º–∞–ª—å–Ω–æ)"
            else:
                ph_assessment = "üü° –°–ª–∞–±–æ—â–µ–ª–æ—á–Ω–∞—è"

            st.metric("–û—Ü–µ–Ω–∫–∞ pH", ph_assessment)

        with col8:
            # –û—Ü–µ–Ω–∫–∞ –≥—É–º—É—Å–∞
            if humus_percent < 2.0:
                humus_assessment = "üî¥ –û—á–µ–Ω—å –Ω–∏–∑–∫–æ–µ"
            elif humus_percent < 3.0:
                humus_assessment = "üü° –ù–∏–∑–∫–æ–µ"
            elif humus_percent <= 5.0:
                humus_assessment = "üü¢ –°—Ä–µ–¥–Ω–µ–µ"
            else:
                humus_assessment = "üü¢ –í—ã—Å–æ–∫–æ–µ"

            st.metric("–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –≥—É–º—É—Å–∞", humus_assessment)

        with col9:
            # –û—Ü–µ–Ω–∫–∞ –æ–±–µ—Å–ø–µ—á–µ–Ω–Ω–æ—Å—Ç–∏ —Ñ–æ—Å—Ñ–æ—Ä–æ–º
            if p2o5_mg_kg < 20:
                p_assessment = "üî¥ –û—á–µ–Ω—å –Ω–∏–∑–∫–∞—è"
            elif p2o5_mg_kg < 40:
                p_assessment = "üü° –ù–∏–∑–∫–∞—è"
            elif p2o5_mg_kg <= 80:
                p_assessment = "üü¢ –°—Ä–µ–¥–Ω—è—è"
            else:
                p_assessment = "üü¢ –ü–æ–≤—ã—à–µ–Ω–Ω–∞—è"

            st.metric("–û–±–µ—Å–ø–µ—á–µ–Ω–Ω–æ—Å—Ç—å P‚ÇÇO‚ÇÖ", p_assessment)

        # –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ
        notes = st.text_area(
            "–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ",
            height=80,
            help="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–Ω–∞–ª–∏–∑–µ"
        )

        # –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
        submitted = st.form_submit_button("‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑", use_container_width=True)

        if submitted:
            # –í–∞–ª–∏–¥–∞—Ü–∏—è
            errors = []

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞—Ç—ã
            is_valid, msg = validator.validate_date(analysis_date)
            if not is_valid:
                errors.append(f"–î–∞—Ç–∞: {msg}")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ pH
            is_valid, msg = validator.validate_ph(ph_water)
            if not is_valid:
                errors.append(f"pH –≤–æ–¥–Ω—ã–π: {msg}")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—É–º—É—Å–∞
            is_valid, msg = validator.validate_percentage(humus_percent)
            if not is_valid:
                errors.append(f"–ì—É–º—É—Å: {msg}")

            if errors:
                st.error("‚ùå –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:\n" + "\n".join(f"- {e}" for e in errors))
            else:
                try:
                    # –°–æ–∑–¥–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
                    operation = Operation(
                        farm_id=farm.id,
                        field_id=selected_field.id,
                        operation_type="soil_analysis",
                        operation_date=analysis_date,
                        area_processed_ha=selected_field.area_ha,
                        notes=notes
                    )
                    db.add(operation)
                    db.flush()

                    # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑
                    analysis = AgrochemicalAnalysis(
                        operation_id=operation.id,
                        sample_depth_cm=sample_depth,
                        ph_water=ph_water,
                        ph_salt=ph_salt,
                        humus_percent=humus_percent,
                        nitrogen_total_percent=nitrogen_total,
                        p2o5_mg_kg=p2o5_mg_kg,
                        k2o_mg_kg=k2o_mg_kg,
                        mobile_s_mg_kg=mobile_s if mobile_s > 0 else None,
                        ca_mg_kg=ca_mg_kg if ca_mg_kg > 0 else None,
                        mg_mg_kg=mg_mg_kg if mg_mg_kg > 0 else None,
                        na_mg_kg=na_mg_kg if na_mg_kg > 0 else None
                    )
                    db.add(analysis)

                    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—è
                    selected_field.ph_water = ph_water
                    selected_field.humus_pct = humus_percent
                    selected_field.p2o5_mg_kg = p2o5_mg_kg
                    selected_field.k2o_mg_kg = k2o_mg_kg

                    db.commit()

                    st.success("‚úÖ –ê–Ω–∞–ª–∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω! –î–∞–Ω–Ω—ã–µ –ø–æ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")
                    st.balloons()

                except Exception as e:
                    db.rollback()
                    st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {str(e)}")

# ========================================
# TAB 2: –ò—Å—Ç–æ—Ä–∏—è –∞–Ω–∞–ª–∏–∑–æ–≤
# ========================================
with tab2:
    st.subheader("–ò—Å—Ç–æ—Ä–∏—è –∞–≥—Ä–æ—Ö–∏–º–∏—á–µ—Å–∫–∏—Ö –∞–Ω–∞–ª–∏–∑–æ–≤")

    # –§–∏–ª—å—Ç—Ä—ã
    col1, col2 = st.columns(2)

    with col1:
        filter_field = st.selectbox(
            "–§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–ª—é",
            options=["–í—Å–µ –ø–æ–ª—è"] + [f"{f.field_code} - {f.name}" for f in fields],
            key="filter_field_history"
        )

    with col2:
        filter_year = st.selectbox(
            "–§–∏–ª—å—Ç—Ä –ø–æ –≥–æ–¥—É",
            options=["–í—Å–µ –≥–æ–¥—ã"] + list(range(datetime.now().year, datetime.now().year - 10, -1)),
            key="filter_year_history"
        )

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    query = db.query(Operation, AgrochemicalAnalysis, Field).join(
        AgrochemicalAnalysis, Operation.id == AgrochemicalAnalysis.operation_id
    ).join(
        Field, Operation.field_id == Field.id
    ).filter(
        Operation.operation_type == "soil_analysis"
    )

    # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    if filter_field != "–í—Å–µ –ø–æ–ª—è":
        field_code = filter_field.split(" - ")[0]
        query = query.filter(Field.field_code == field_code)

    if filter_year != "–í—Å–µ –≥–æ–¥—ã":
        from sqlalchemy import extract
        query = query.filter(extract('year', Operation.operation_date) == filter_year)

    analyses = query.order_by(Operation.operation_date.desc()).all()

    if analyses:
        st.metric("–í—Å–µ–≥–æ –∞–Ω–∞–ª–∏–∑–æ–≤", len(analyses))

        # –¢–∞–±–ª–∏—Ü–∞
        data = []
        for op, analysis, field in analyses:
            data.append({
                "–î–∞—Ç–∞": format_date(op.operation_date),
                "–ü–æ–ª–µ": f"{field.field_code} - {field.name}",
                "pH –≤–æ–¥–Ω": format_number(analysis.ph_water, 1),
                "–ì—É–º—É—Å (%)": format_number(analysis.humus_percent, 2),
                "P‚ÇÇO‚ÇÖ (–º–≥/–∫–≥)": format_number(analysis.p2o5_mg_kg, 1),
                "K‚ÇÇO (–º–≥/–∫–≥)": format_number(analysis.k2o_mg_kg, 1),
                "–ì–ª—É–±–∏–Ω–∞ (—Å–º)": analysis.sample_depth_cm
            })

        df = pd.DataFrame(data)
        st.dataframe(df, use_container_width=True, hide_index=True)

        # –≠–∫—Å–ø–æ—Ä—Ç
        csv = df.to_csv(index=False).encode('utf-8-sig')
        st.download_button(
            "üì• –°–∫–∞—á–∞—Ç—å CSV",
            csv,
            "agrochemistry_history.csv",
            "text/csv"
        )

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        st.markdown("---")
        st.markdown("### üìä –°—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏")

        col1, col2, col3, col4 = st.columns(4)

        avg_ph = sum(a.ph_water for _, a, _ in analyses) / len(analyses)
        avg_humus = sum(a.humus_percent for _, a, _ in analyses) / len(analyses)
        avg_p = sum(a.p2o5_mg_kg for _, a, _ in analyses) / len(analyses)
        avg_k = sum(a.k2o_mg_kg for _, a, _ in analyses) / len(analyses)

        with col1:
            st.metric("pH –≤–æ–¥–Ω—ã–π", f"{avg_ph:.1f}")
        with col2:
            st.metric("–ì—É–º—É—Å", f"{avg_humus:.2f}%")
        with col3:
            st.metric("P‚ÇÇO‚ÇÖ", f"{avg_p:.1f} –º–≥/–∫–≥")
        with col4:
            st.metric("K‚ÇÇO", f"{avg_k:.1f} –º–≥/–∫–≥")

        # –ì—Ä–∞—Ñ–∏–∫–∏
        st.markdown("---")
        st.markdown("### üìà –î–∏–Ω–∞–º–∏–∫–∞ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π")

        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –ø–æ–ª—è–º
        field_data = {}
        for op, analysis, field in analyses:
            field_name = f"{field.field_code}"
            if field_name not in field_data:
                field_data[field_name] = {
                    "pH": [],
                    "–ì—É–º—É—Å": [],
                    "P‚ÇÇO‚ÇÖ": [],
                    "K‚ÇÇO": []
                }
            field_data[field_name]["pH"].append(analysis.ph_water)
            field_data[field_name]["–ì—É–º—É—Å"].append(analysis.humus_percent)
            field_data[field_name]["P‚ÇÇO‚ÇÖ"].append(analysis.p2o5_mg_kg)
            field_data[field_name]["K‚ÇÇO"].append(analysis.k2o_mg_kg)

        # –°—Ä–µ–¥–Ω–∏–µ –ø–æ –ø–æ–ª—è–º
        field_averages = {}
        for field_name, data in field_data.items():
            field_averages[field_name] = {
                "pH": sum(data["pH"]) / len(data["pH"]),
                "–ì—É–º—É—Å": sum(data["–ì—É–º—É—Å"]) / len(data["–ì—É–º—É—Å"]),
                "P‚ÇÇO‚ÇÖ": sum(data["P‚ÇÇO‚ÇÖ"]) / len(data["P‚ÇÇO‚ÇÖ"]),
                "K‚ÇÇO": sum(data["K‚ÇÇO"]) / len(data["K‚ÇÇO"])
            }

        col1, col2 = st.columns(2)

        with col1:
            # –ì—Ä–∞—Ñ–∏–∫ pH –ø–æ –ø–æ–ª—è–º
            fig_ph = px.bar(
                x=list(field_averages.keys()),
                y=[field_averages[f]["pH"] for f in field_averages.keys()],
                title="pH –ø–æ –ø–æ–ª—è–º",
                labels={"x": "–ü–æ–ª—è", "y": "pH –≤–æ–¥–Ω—ã–π"},
                color=[field_averages[f]["pH"] for f in field_averages.keys()],
                color_continuous_scale="RdYlGn"
            )
            st.plotly_chart(fig_ph, use_container_width=True)

        with col2:
            # –ì—Ä–∞—Ñ–∏–∫ –≥—É–º—É—Å–∞ –ø–æ –ø–æ–ª—è–º
            fig_humus = px.bar(
                x=list(field_averages.keys()),
                y=[field_averages[f]["–ì—É–º—É—Å"] for f in field_averages.keys()],
                title="–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –≥—É–º—É—Å–∞ –ø–æ –ø–æ–ª—è–º (%)",
                labels={"x": "–ü–æ–ª—è", "y": "–ì—É–º—É—Å (%)"},
                color=[field_averages[f]["–ì—É–º—É—Å"] for f in field_averages.keys()],
                color_continuous_scale="Greens"
            )
            st.plotly_chart(fig_humus, use_container_width=True)

        # –ì—Ä–∞—Ñ–∏–∫ NPK
        fields_list = list(field_averages.keys())
        p_values = [field_averages[f]["P‚ÇÇO‚ÇÖ"] for f in fields_list]
        k_values = [field_averages[f]["K‚ÇÇO"] for f in fields_list]

        fig_npk = go.Figure(data=[
            go.Bar(name='P‚ÇÇO‚ÇÖ', x=fields_list, y=p_values, marker_color='orange'),
            go.Bar(name='K‚ÇÇO', x=fields_list, y=k_values, marker_color='green')
        ])
        fig_npk.update_layout(
            title="–û–±–µ—Å–ø–µ—á–µ–Ω–Ω–æ—Å—Ç—å P‚ÇÇO‚ÇÖ –∏ K‚ÇÇO –ø–æ –ø–æ–ª—è–º (–º–≥/–∫–≥)",
            xaxis_title="–ü–æ–ª—è",
            yaxis_title="–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ (–º–≥/–∫–≥)",
            barmode='group'
        )
        st.plotly_chart(fig_npk, use_container_width=True)

    else:
        st.info("üì≠ –ü–æ–∫–∞ –Ω–µ—Ç –∞–≥—Ä–æ—Ö–∏–º–∏—á–µ—Å–∫–∏—Ö –∞–Ω–∞–ª–∏–∑–æ–≤")

# ========================================
# TAB 3: –ö–∞—Ä—Ç–∞ –ø–ª–æ–¥–æ—Ä–æ–¥–∏—è
# ========================================
with tab3:
    st.subheader("–ö–∞—Ä—Ç–∞ –ø–ª–æ–¥–æ—Ä–æ–¥–∏—è –ø–æ–ª–µ–π")

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∞–Ω–∞–ª–∏–∑–æ–≤ –ø–æ –ø–æ–ª—è–º
    latest_analyses = {}
    for field in fields:
        last_analysis = db.query(Operation, AgrochemicalAnalysis).join(
            AgrochemicalAnalysis, Operation.id == AgrochemicalAnalysis.operation_id
        ).filter(
            Operation.field_id == field.id,
            Operation.operation_type == "soil_analysis"
        ).order_by(Operation.operation_date.desc()).first()

        if last_analysis:
            latest_analyses[field.field_code] = {
                "field": field,
                "analysis": last_analysis[1],
                "date": last_analysis[0].operation_date
            }

    if latest_analyses:
        # –¢–∞–±–ª–∏—Ü–∞ —Å –∫–∞—Ä—Ç–æ–π
        st.markdown("### üó∫Ô∏è –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª–µ–π")

        map_data = []
        for field_code, data in latest_analyses.items():
            field = data["field"]
            analysis = data["analysis"]

            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±–∞–ª–ª–∞ –ø–ª–æ–¥–æ—Ä–æ–¥–∏—è (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π)
            fertility_score = 0

            # pH (–æ–ø—Ç–∏–º—É–º 6.5-7.5)
            if 6.5 <= analysis.ph_water <= 7.5:
                fertility_score += 25
            elif 6.0 <= analysis.ph_water <= 8.0:
                fertility_score += 15
            else:
                fertility_score += 5

            # –ì—É–º—É—Å (–æ–ø—Ç–∏–º—É–º >3%)
            if analysis.humus_percent >= 4.0:
                fertility_score += 30
            elif analysis.humus_percent >= 3.0:
                fertility_score += 20
            elif analysis.humus_percent >= 2.0:
                fertility_score += 10
            else:
                fertility_score += 5

            # P‚ÇÇO‚ÇÖ (–æ–ø—Ç–∏–º—É–º >40)
            if analysis.p2o5_mg_kg >= 80:
                fertility_score += 25
            elif analysis.p2o5_mg_kg >= 40:
                fertility_score += 15
            elif analysis.p2o5_mg_kg >= 20:
                fertility_score += 10
            else:
                fertility_score += 5

            # K‚ÇÇO (–æ–ø—Ç–∏–º—É–º >200)
            if analysis.k2o_mg_kg >= 300:
                fertility_score += 20
            elif analysis.k2o_mg_kg >= 200:
                fertility_score += 15
            elif analysis.k2o_mg_kg >= 100:
                fertility_score += 10
            else:
                fertility_score += 5

            map_data.append({
                "–ü–æ–ª–µ": f"{field.field_code} - {field.name}",
                "pH": format_number(analysis.ph_water, 1),
                "–ì—É–º—É—Å (%)": format_number(analysis.humus_percent, 2),
                "P‚ÇÇO‚ÇÖ": format_number(analysis.p2o5_mg_kg, 0),
                "K‚ÇÇO": format_number(analysis.k2o_mg_kg, 0),
                "–ë–∞–ª–ª –ø–ª–æ–¥–æ—Ä–æ–¥–∏—è": fertility_score,
                "–î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞": format_date(data["date"])
            })

        df_map = pd.DataFrame(map_data)
        st.dataframe(df_map, use_container_width=True, hide_index=True)

        # –ì—Ä–∞—Ñ–∏–∫ –ø–ª–æ–¥–æ—Ä–æ–¥–∏—è
        fig_fertility = px.bar(
            df_map,
            x="–ü–æ–ª–µ",
            y="–ë–∞–ª–ª –ø–ª–æ–¥–æ—Ä–æ–¥–∏—è",
            title="–ë–∞–ª–ª –ø–ª–æ–¥–æ—Ä–æ–¥–∏—è –ø–æ –ø–æ–ª—è–º (0-100)",
            color="–ë–∞–ª–ª –ø–ª–æ–¥–æ—Ä–æ–¥–∏—è",
            color_continuous_scale="RdYlGn",
            range_color=[0, 100]
        )
        st.plotly_chart(fig_fertility, use_container_width=True)

    else:
        st.info("üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∞–≥—Ä–æ—Ö–∏–º–∏—á–µ—Å–∫–∏—Ö –∞–Ω–∞–ª–∏–∑–æ–≤ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –∫–∞—Ä—Ç—ã")

# ========================================
# TAB 4: –ù–æ—Ä–º–∞—Ç–∏–≤—ã
# ========================================
with tab4:
    st.subheader("–ù–æ—Ä–º–∞—Ç–∏–≤—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")

    st.markdown("### üìã –ì—Ä–∞–¥–∞—Ü–∏–∏ –∞–≥—Ä–æ—Ö–∏–º–∏—á–µ—Å–∫–∏—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π")

    # pH
    st.markdown("#### 1. –ö–∏—Å–ª–æ—Ç–Ω–æ—Å—Ç—å –ø–æ—á–≤—ã (pH)")
    ph_norms = pd.DataFrame({
        "pH –≤–æ–¥–Ω—ã–π": ["< 4.5", "4.5 - 5.5", "5.5 - 6.5", "6.5 - 7.5", "7.5 - 8.5", "> 8.5"],
        "–ì—Ä–∞–¥–∞—Ü–∏—è": [
            "–°–∏–ª—å–Ω–æ–∫–∏—Å–ª–∞—è",
            "–°—Ä–µ–¥–Ω–µ–∫–∏—Å–ª–∞—è",
            "–°–ª–∞–±–æ–∫–∏—Å–ª–∞—è",
            "–ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è (–æ–ø—Ç–∏–º—É–º)",
            "–°–ª–∞–±–æ—â–µ–ª–æ—á–Ω–∞—è",
            "–©–µ–ª–æ—á–Ω–∞—è"
        ],
        "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏": [
            "–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –∏–∑–≤–µ—Å—Ç–∫–æ–≤–∞–Ω–∏–µ",
            "–ò–∑–≤–µ—Å—Ç–∫–æ–≤–∞–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è",
            "–ò–∑–≤–µ—Å—Ç–∫–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏",
            "–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è",
            "–í–æ–∑–º–æ–∂–Ω–æ –ø–æ–¥–∫–∏—Å–ª–µ–Ω–∏–µ",
            "–ü–æ–¥–∫–∏—Å–ª–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ"
        ]
    })
    st.dataframe(ph_norms, use_container_width=True, hide_index=True)

    st.markdown("---")

    # –ì—É–º—É—Å
    st.markdown("#### 2. –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –≥—É–º—É—Å–∞")
    humus_norms = pd.DataFrame({
        "–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ (%)": ["< 2.0", "2.0 - 3.0", "3.0 - 5.0", "5.0 - 7.0", "> 7.0"],
        "–ì—Ä–∞–¥–∞—Ü–∏—è": ["–û—á–µ–Ω—å –Ω–∏–∑–∫–æ–µ", "–ù–∏–∑–∫–æ–µ", "–°—Ä–µ–¥–Ω–µ–µ", "–ü–æ–≤—ã—à–µ–Ω–Ω–æ–µ", "–í—ã—Å–æ–∫–æ–µ"],
        "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏": [
            "–í–Ω–µ—Å–µ–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∫–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ",
            "–†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤–Ω–µ—Å–µ–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∫–∏",
            "–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è",
            "–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å",
            "–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å"
        ]
    })
    st.dataframe(humus_norms, use_container_width=True, hide_index=True)

    st.markdown("---")

    # –§–æ—Å—Ñ–æ—Ä
    st.markdown("#### 3. –ü–æ–¥–≤–∏–∂–Ω—ã–π —Ñ–æ—Å—Ñ–æ—Ä (P‚ÇÇO‚ÇÖ)")
    p_norms = pd.DataFrame({
        "–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ (–º–≥/–∫–≥)": ["< 20", "20 - 40", "40 - 80", "80 - 150", "> 150"],
        "–ì—Ä–∞–¥–∞—Ü–∏—è": ["–û—á–µ–Ω—å –Ω–∏–∑–∫–∞—è", "–ù–∏–∑–∫–∞—è", "–°—Ä–µ–¥–Ω—è—è", "–ü–æ–≤—ã—à–µ–Ω–Ω–∞—è", "–í—ã—Å–æ–∫–∞—è"],
        "–î–æ–∑–∞ P‚ÇÇO‚ÇÖ (–∫–≥/–≥–∞)": ["60-90", "45-60", "30-45", "15-30", "0-15"]
    })
    st.dataframe(p_norms, use_container_width=True, hide_index=True)

    st.markdown("---")

    # –ö–∞–ª–∏–π
    st.markdown("#### 4. –û–±–º–µ–Ω–Ω—ã–π –∫–∞–ª–∏–π (K‚ÇÇO)")
    k_norms = pd.DataFrame({
        "–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ (–º–≥/–∫–≥)": ["< 100", "100 - 200", "200 - 300", "300 - 500", "> 500"],
        "–ì—Ä–∞–¥–∞—Ü–∏—è": ["–û—á–µ–Ω—å –Ω–∏–∑–∫–∞—è", "–ù–∏–∑–∫–∞—è", "–°—Ä–µ–¥–Ω—è—è", "–ü–æ–≤—ã—à–µ–Ω–Ω–∞—è", "–í—ã—Å–æ–∫–∞—è"],
        "–î–æ–∑–∞ K‚ÇÇO (–∫–≥/–≥–∞)": ["60-90", "45-60", "30-45", "15-30", "0-15"]
    })
    st.dataframe(k_norms, use_container_width=True, hide_index=True)

    st.markdown("---")

    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    st.markdown("### üí° –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")

    st.info("""
    **–ß–∞—Å—Ç–æ—Ç–∞ –∞–≥—Ä–æ—Ö–∏–º–∏—á–µ—Å–∫–æ–≥–æ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è:**
    - –û—Å–Ω–æ–≤–Ω–æ–µ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ: 1 —Ä–∞–∑ –≤ 5 –ª–µ—Ç
    - –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–µ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ: 1 —Ä–∞–∑ –≤ 2-3 –≥–æ–¥–∞
    - –û—Ç–±–æ—Ä –ø—Ä–æ–±: –æ—Å–µ–Ω—å—é –ø–æ—Å–ª–µ —É–±–æ—Ä–∫–∏ –∏–ª–∏ —Ä–∞–Ω–Ω–µ–π –≤–µ—Å–Ω–æ–π –¥–æ –≤–Ω–µ—Å–µ–Ω–∏—è —É–¥–æ–±—Ä–µ–Ω–∏–π

    **–ì–ª—É–±–∏–Ω–∞ –æ—Ç–±–æ—Ä–∞ –ø—Ä–æ–±:**
    - –ü–∞—Ö–æ—Ç–Ω—ã–π —Å–ª–æ–π: 0-20 —Å–º (–æ—Å–Ω–æ–≤–Ω–∞—è)
    - –ü–æ–¥–ø–∞—Ö–æ—Ç–Ω—ã–π —Å–ª–æ–π: 20-40 —Å–º (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ)

    **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–±:**
    - –ù–∞ 1 –≥–∞: 1 –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–∞—è –ø—Ä–æ–±–∞ (–∏–∑ 15-20 —Ç–æ—á–µ—á–Ω—ã—Ö)
    - –†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –ø–æ –ø–æ–ª—é

    **–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–∏—Ç–∞–Ω–∏—è:**
    - –ò–∑–≤–µ—Å—Ç–∫–æ–≤–∞–Ω–∏–µ: –ø—Ä–∏ pH < 5.5
    - –û—Ä–≥–∞–Ω–∏–∫–∞: –µ–∂–µ–≥–æ–¥–Ω–æ –∏–ª–∏ –≤ —Å–µ–≤–æ–æ–±–æ—Ä–æ—Ç–µ
    - –§–æ—Å—Ñ–æ—Ä–Ω—ã–µ —É–¥–æ–±—Ä–µ–Ω–∏—è: –æ—Å–Ω–æ–≤–Ω–æ–µ –≤–Ω–µ—Å–µ–Ω–∏–µ –æ—Å–µ–Ω—å—é
    - –ö–∞–ª–∏–π–Ω—ã–µ —É–¥–æ–±—Ä–µ–Ω–∏—è: –æ—Å–Ω–æ–≤–Ω–æ–µ –≤–Ω–µ—Å–µ–Ω–∏–µ –æ—Å–µ–Ω—å—é
    """)

# –§—É—Ç–µ—Ä
st.markdown("---")
st.markdown("üß™ **–ê–≥—Ä–æ—Ö–∏–º–∏—á–µ—Å–∫–∏–µ –∞–Ω–∞–ª–∏–∑—ã** | –í–µ—Ä—Å–∏—è 1.0")
