"""
Pesticides - –£—á–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤ –∑–∞—â–∏—Ç—ã —Ä–∞—Å—Ç–µ–Ω–∏–π
"""
import streamlit as st
import pandas as pd
import json
from datetime import datetime, date, timedelta
from pathlib import Path
import plotly.express as px
import plotly.graph_objects as go

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
import sys
sys.path.append(str(Path(__file__).parent.parent))

from modules.database import get_db, Farm, Field, Operation, PesticideApplication
from modules.auth import (
    require_auth,
    require_farm_binding,
    filter_query_by_farm,
    get_user_display_name,
    can_edit_data,
    can_delete_data
)
from modules.validators import DataValidator
from utils.formatters import format_date, format_area, format_number

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(page_title="–°–ó–†", page_icon="üõ°Ô∏è", layout="wide")

# –¢—Ä–µ–±—É–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∏ –ø—Ä–∏–≤—è–∑–∫—É –∫ —Ö–æ–∑—è–π—Å—Ç–≤—É
require_auth()
require_farm_binding()

st.title("üõ°Ô∏è –£—á–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤ –∑–∞—â–∏—Ç—ã —Ä–∞—Å—Ç–µ–Ω–∏–π")
st.caption(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: **{get_user_display_name()}**")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞
validator = DataValidator()

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ –°–ó–†
def load_pesticides_reference():
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ –°–ó–† –∏–∑ JSON"""
    reference_path = Path(__file__).parent.parent / "data" / "pesticides.json"
    try:
        with open(reference_path, "r", encoding="utf-8") as f:
            return json.load(f)
    except FileNotFoundError:
        st.error("–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –°–ó–† –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return {}

pesticides_ref = load_pesticides_reference()

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
db = next(get_db())

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ö–æ–∑—è–π—Å—Ç–≤–∞
farm = filter_query_by_farm(db.query(Farm), Farm).first()
if not farm:
    st.warning("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∏–º–ø–æ—Ä—Ç–∞!")
    st.stop()

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª–µ–π
fields = filter_query_by_farm(db.query(Field), Field).all()
if not fields:
    st.warning("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –ø–æ–ª—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ '–ü–æ–ª—è'!")
    st.stop()

# –¢–∞–±—ã
tab1, tab2, tab3, tab4 = st.tabs(["üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏", "üìä –ò—Å—Ç–æ—Ä–∏—è –æ–±—Ä–∞–±–æ—Ç–æ–∫", "üìö –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –°–ó–†", "‚ö†Ô∏è –ö–æ–Ω—Ç—Ä–æ–ª—å —Å—Ä–æ–∫–æ–≤"])

# ========================================
# TAB 1: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –°–ó–†
# ========================================
with tab1:
    st.subheader("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞–º–∏ –∑–∞—â–∏—Ç—ã —Ä–∞—Å—Ç–µ–Ω–∏–π")

    with st.form("pesticide_application_form"):
        col1, col2 = st.columns(2)

        with col1:
            # –í—ã–±–æ—Ä –ø–æ–ª—è
            field_options = {f"{f.field_code} - {f.name}": f for f in fields}
            selected_field_name = st.selectbox(
                "–ü–æ–ª–µ *",
                options=list(field_options.keys()),
                help="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"
            )
            selected_field = field_options[selected_field_name]

            # –î–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            application_date = st.date_input(
                "–î–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ *",
                value=date.today(),
                help="–î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"
            )

            # –ö–ª–∞—Å—Å –°–ó–†
            pesticide_classes = list(pesticides_ref.keys())
            selected_class = st.selectbox(
                "–ö–ª–∞—Å—Å –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤ *",
                options=pesticide_classes,
                help="–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å —Å—Ä–µ–¥—Å—Ç–≤ –∑–∞—â–∏—Ç—ã —Ä–∞—Å—Ç–µ–Ω–∏–π"
            )

            # –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø—Ä–µ–ø–∞—Ä–∞—Ç
            pesticide_names = list(pesticides_ref[selected_class].keys()) if selected_class in pesticides_ref else []
            selected_pesticide = st.selectbox(
                "–ü—Ä–µ–ø–∞—Ä–∞—Ç *",
                options=pesticide_names,
                help="–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø—Ä–µ–ø–∞—Ä–∞—Ç"
            )

            # –¶–µ–ª—å –æ–±—Ä–∞–±–æ—Ç–∫–∏
            treatment_target = st.selectbox(
                "–¶–µ–ª—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ *",
                options=[
                    "–ë–æ–ª–µ–∑–Ω–∏",
                    "–í—Ä–µ–¥–∏—Ç–µ–ª–∏",
                    "–°–æ—Ä–Ω—è–∫–∏",
                    "–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –∑–∞—â–∏—Ç–∞",
                    "–î–µ—Å–∏–∫–∞—Ü–∏—è",
                    "–†–µ–≥—É–ª—è—Ç–æ—Ä —Ä–æ—Å—Ç–∞"
                ],
                help="–ü—Ä–æ—Ç–∏–≤ —á–µ–≥–æ –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∫–∞"
            )

        with col2:
            # –ù–æ—Ä–º–∞ —Ä–∞—Å—Ö–æ–¥–∞ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞
            rate_product = st.number_input(
                "–ù–æ—Ä–º–∞ —Ä–∞—Å—Ö–æ–¥–∞ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞ (–ª/–≥–∞ –∏–ª–∏ –∫–≥/–≥–∞) *",
                min_value=0.0,
                max_value=10.0,
                value=1.0,
                step=0.1,
                help="–ù–æ—Ä–º–∞ —Ä–∞—Å—Ö–æ–¥–∞ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞"
            )

            # –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –ø–ª–æ—â–∞–¥—å
            area_processed = st.number_input(
                "–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –ø–ª–æ—â–∞–¥—å (–≥–∞) *",
                min_value=0.1,
                max_value=selected_field.area_ha,
                value=selected_field.area_ha,
                step=0.1,
                help=f"–ü–ª–æ—â–∞–¥—å –ø–æ–ª—è: {format_area(selected_field.area_ha)}"
            )

            # –†–∞—Å—Ö–æ–¥ —Ä–∞–±–æ—á–µ–≥–æ —Ä–∞—Å—Ç–≤–æ—Ä–∞
            water_rate = st.number_input(
                "–†–∞—Å—Ö–æ–¥ —Ä–∞–±–æ—á–µ–≥–æ —Ä–∞—Å—Ç–≤–æ—Ä–∞ (–ª/–≥–∞)",
                min_value=50.0,
                max_value=600.0,
                value=200.0,
                step=10.0,
                help="–û–±—ä–µ–º –≤–æ–¥—ã –¥–ª—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—á–µ–≥–æ —Ä–∞—Å—Ç–≤–æ—Ä–∞"
            )

            # –°–ø–æ—Å–æ–± –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
            application_method = st.selectbox(
                "–°–ø–æ—Å–æ–± –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è *",
                options=[
                    "–û–ø—Ä—ã—Å–∫–∏–≤–∞–Ω–∏–µ –Ω–∞–∑–µ–º–Ω–æ–µ",
                    "–û–ø—Ä—ã—Å–∫–∏–≤–∞–Ω–∏–µ –∞–≤–∏–∞—Ü–∏–æ–Ω–Ω–æ–µ",
                    "–ü—Ä–æ—Ç—Ä–∞–≤–ª–∏–≤–∞–Ω–∏–µ —Å–µ–º—è–Ω",
                    "–í–Ω–µ—Å–µ–Ω–∏–µ –≤ –ø–æ—á–≤—É",
                    "–§—É–º–∏–≥–∞—Ü–∏—è"
                ],
                help="–°–ø–æ—Å–æ–± –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞"
            )

            # –§–∞–∑–∞ —Ä–∞–∑–≤–∏—Ç–∏—è –∫—É–ª—å—Ç—É—Ä—ã
            growth_stage = st.text_input(
                "–§–∞–∑–∞ —Ä–∞–∑–≤–∏—Ç–∏—è –∫—É–ª—å—Ç—É—Ä—ã",
                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –∫—É—â–µ–Ω–∏–µ, –≤—ã—Ö–æ–¥ –≤ —Ç—Ä—É–±–∫—É",
                help="–§–∞–∑–∞ —Ä–∞–∑–≤–∏—Ç–∏—è –∫—É–ª—å—Ç—É—Ä—ã –≤ –º–æ–º–µ–Ω—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏"
            )

        # –†–∞—Å—á–µ—Ç –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –≤ –ø—Ä–µ–ø–∞—Ä–∞—Ç–µ –∏ –≤–æ–¥–µ
        st.markdown("---")
        st.markdown("### üßÆ –†–∞—Å—á–µ—Ç –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏")

        if selected_pesticide and selected_class in pesticides_ref:
            pesticide_data = pesticides_ref[selected_class][selected_pesticide]

            col3, col4, col5, col6 = st.columns(4)

            total_product_needed = rate_product * area_processed
            total_water_needed = water_rate * area_processed

            with col3:
                st.metric(
                    "–ü—Ä–µ–ø–∞—Ä–∞—Ç",
                    f"{format_number(total_product_needed, 2)} –ª/–∫–≥",
                    help="–û–±—â–∞—è –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –≤ –ø—Ä–µ–ø–∞—Ä–∞—Ç–µ"
                )
            with col4:
                st.metric(
                    "–†–∞–±–æ—á–∏–π —Ä–∞—Å—Ç–≤–æ—Ä",
                    f"{format_number(total_water_needed, 0)} –ª",
                    help="–û–±—â–∏–π –æ–±—ä–µ–º —Ä–∞–±–æ—á–µ–≥–æ —Ä–∞—Å—Ç–≤–æ—Ä–∞"
                )
            with col5:
                form = pesticide_data.get("—Ñ–æ—Ä–º–∞_–ø—Ä–µ–ø–∞—Ä–∞—Ç–∞", "-")
                st.metric("–§–æ—Ä–º–∞ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞", form)
            with col6:
                active_substance = pesticide_data.get("–¥–µ–π—Å—Ç–≤—É—é—â–µ–µ_–≤–µ—â–µ—Å—Ç–≤–æ", "-")
                st.metric("–î–µ–π—Å—Ç–≤—É—é—â–µ–µ –≤–µ—â–µ—Å—Ç–≤–æ", active_substance[:20] + "..." if len(active_substance) > 20 else active_substance)

            # –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –Ω–æ—Ä–º–∞ –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞
            recommended_rate = pesticide_data.get("–Ω–æ—Ä–º–∞_—Ä–∞—Å—Ö–æ–¥–∞", {})
            if recommended_rate:
                rec_min = recommended_rate.get("–º–∏–Ω", 0)
                rec_max = recommended_rate.get("–º–∞–∫—Å", 0)
                if rec_min and rec_max:
                    if rate_product < rec_min or rate_product > rec_max:
                        st.warning(f"‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –Ω–æ—Ä–º–∞: {rec_min}-{rec_max} –ª/–≥–∞ –∏–ª–∏ –∫–≥/–≥–∞")
                    else:
                        st.success(f"‚úÖ –ù–æ—Ä–º–∞ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–π: {rec_min}-{rec_max} –ª/–≥–∞ –∏–ª–∏ –∫–≥/–≥–∞")

            # –°—Ä–æ–∫ –æ–∂–∏–¥–∞–Ω–∏—è
            waiting_period = pesticide_data.get("—Å—Ä–æ–∫_–æ–∂–∏–¥–∞–Ω–∏—è_–¥–Ω–µ–π", 0)
            if waiting_period:
                harvest_allowed_date = application_date + timedelta(days=waiting_period)
                st.info(f"‚è±Ô∏è –°—Ä–æ–∫ –æ–∂–∏–¥–∞–Ω–∏—è –¥–æ —É–±–æ—Ä–∫–∏: {waiting_period} –¥–Ω–µ–π (–º–æ–∂–Ω–æ —É–±–∏—Ä–∞—Ç—å –ø–æ—Å–ª–µ {format_date(harvest_allowed_date)})")

        # –ü–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
        st.markdown("---")
        st.markdown("### üå§Ô∏è –ü–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è")

        col7, col8, col9 = st.columns(3)

        with col7:
            temperature = st.number_input(
                "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–∑–¥—É—Ö–∞ (¬∞C)",
                min_value=-10.0,
                max_value=50.0,
                value=20.0,
                step=0.5
            )

        with col8:
            wind_speed = st.number_input(
                "–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ (–º/—Å)",
                min_value=0.0,
                max_value=20.0,
                value=2.0,
                step=0.5
            )

        with col9:
            humidity = st.number_input(
                "–í–ª–∞–∂–Ω–æ—Å—Ç—å –≤–æ–∑–¥—É—Ö–∞ (%)",
                min_value=0.0,
                max_value=100.0,
                value=60.0,
                step=5.0
            )

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–≥–æ–¥–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
        weather_warnings = []
        if wind_speed > 5:
            weather_warnings.append("‚ö†Ô∏è –í—ã—Å–æ–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ (>5 –º/—Å) - —Ä–∏—Å–∫ —Å–Ω–æ—Å–∞ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞")
        if temperature > 25:
            weather_warnings.append("‚ö†Ô∏è –í—ã—Å–æ–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (>25¬∞C) - —Ä–∏—Å–∫ –∏—Å–ø–∞—Ä–µ–Ω–∏—è –∏ —Ñ–∏—Ç–æ—Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç–∏")
        if temperature < 10:
            weather_warnings.append("‚ö†Ô∏è –ù–∏–∑–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (<10¬∞C) - —Å–Ω–∏–∂–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤")
        if humidity < 30:
            weather_warnings.append("‚ö†Ô∏è –ù–∏–∑–∫–∞—è –≤–ª–∞–∂–Ω–æ—Å—Ç—å (<30%) - –±—ã—Å—Ç—Ä–æ–µ –∏—Å–ø–∞—Ä–µ–Ω–∏–µ")

        if weather_warnings:
            for warning in weather_warnings:
                st.warning(warning)

        # –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ
        notes = st.text_area(
            "–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ",
            height=80,
            help="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ"
        )

        # –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
        submitted = st.form_submit_button("‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É", use_container_width=True)

        if submitted:
            # –í–∞–ª–∏–¥–∞—Ü–∏—è
            errors = []

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞—Ç—ã
            is_valid, msg = validator.validate_date(application_date)
            if not is_valid:
                errors.append(f"–î–∞—Ç–∞: {msg}")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–æ—â–∞–¥–∏
            is_valid, msg = validator.validate_area(area_processed)
            if not is_valid:
                errors.append(f"–ü–ª–æ—â–∞–¥—å: {msg}")

            if area_processed > selected_field.area_ha:
                errors.append(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –ø–ª–æ—â–∞–¥—å ({area_processed} –≥–∞) –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ø–ª–æ—â–∞–¥—å –ø–æ–ª—è ({selected_field.area_ha} –≥–∞)")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ—Ä–º—ã
            if rate_product <= 0:
                errors.append("–ù–æ—Ä–º–∞ —Ä–∞—Å—Ö–æ–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")

            if errors:
                st.error("‚ùå –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:\n" + "\n".join(f"- {e}" for e in errors))
            else:
                try:
                    # –°–æ–∑–¥–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
                    operation = Operation(
                        farm_id=farm.id,
                        field_id=selected_field.id,
                        operation_type="spraying",
                        operation_date=application_date,
                        area_processed_ha=area_processed,
                        notes=notes
                    )
                    db.add(operation)
                    db.flush()

                    # –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–∞–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –°–ó–†
                    pesticide_application = PesticideApplication(
                        operation_id=operation.id,
                        pesticide_name=selected_pesticide,
                        pesticide_class=selected_class,
                        active_ingredient=pesticide_data.get("–¥–µ–π—Å—Ç–≤—É—é—â–µ–µ_–≤–µ—â–µ—Å—Ç–≤–æ", ""),
                        rate_per_ha=rate_product,
                        total_product_used=total_product_needed,
                        water_rate_l_ha=water_rate,
                        application_method=application_method,
                        treatment_target=treatment_target,
                        growth_stage=growth_stage if growth_stage else None,
                        temperature_c=temperature,
                        wind_speed_ms=wind_speed,
                        humidity_percent=humidity,
                        waiting_period_days=waiting_period if waiting_period else None
                    )
                    db.add(pesticide_application)

                    db.commit()

                    st.success(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞! –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ {format_number(total_product_needed, 2)} –ª/–∫–≥ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞")
                    st.balloons()

                except Exception as e:
                    db.rollback()
                    st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {str(e)}")

# ========================================
# TAB 2: –ò—Å—Ç–æ—Ä–∏—è –æ–±—Ä–∞–±–æ—Ç–æ–∫
# ========================================
with tab2:
    st.subheader("–ò—Å—Ç–æ—Ä–∏—è –æ–±—Ä–∞–±–æ—Ç–æ–∫ –°–ó–†")

    # –§–∏–ª—å—Ç—Ä—ã
    col1, col2, col3 = st.columns(3)

    with col1:
        filter_field = st.selectbox(
            "–§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–ª—é",
            options=["–í—Å–µ –ø–æ–ª—è"] + [f"{f.field_code} - {f.name}" for f in fields],
            key="filter_field_history"
        )

    with col2:
        filter_class = st.selectbox(
            "–§–∏–ª—å—Ç—Ä –ø–æ –∫–ª–∞—Å—Å—É",
            options=["–í—Å–µ –∫–ª–∞—Å—Å—ã"] + pesticide_classes,
            key="filter_class_history"
        )

    with col3:
        filter_year = st.selectbox(
            "–§–∏–ª—å—Ç—Ä –ø–æ –≥–æ–¥—É",
            options=["–í—Å–µ –≥–æ–¥—ã"] + list(range(datetime.now().year, datetime.now().year - 10, -1)),
            key="filter_year_history"
        )

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    query = db.query(Operation, PesticideApplication, Field).join(
        PesticideApplication, Operation.id == PesticideApplication.operation_id
    ).join(
        Field, Operation.field_id == Field.id
    ).filter(
        Operation.operation_type == "spraying"
    )

    # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    if filter_field != "–í—Å–µ –ø–æ–ª—è":
        field_code = filter_field.split(" - ")[0]
        query = query.filter(Field.field_code == field_code)

    if filter_class != "–í—Å–µ –∫–ª–∞—Å—Å—ã":
        query = query.filter(PesticideApplication.pesticide_class == filter_class)

    if filter_year != "–í—Å–µ –≥–æ–¥—ã":
        from sqlalchemy import extract
        query = query.filter(extract('year', Operation.operation_date) == filter_year)

    applications = query.order_by(Operation.operation_date.desc()).all()

    if applications:
        st.metric("–í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–æ–∫", len(applications))

        # –¢–∞–±–ª–∏—Ü–∞
        data = []
        for op, pest_app, field in applications:
            data.append({
                "–î–∞—Ç–∞": format_date(op.operation_date),
                "–ü–æ–ª–µ": f"{field.field_code} - {field.name}",
                "–ö–ª–∞—Å—Å": pest_app.pesticide_class,
                "–ü—Ä–µ–ø–∞—Ä–∞—Ç": pest_app.pesticide_name,
                "–ù–æ—Ä–º–∞": f"{format_number(pest_app.rate_per_ha, 2)} –ª/–≥–∞",
                "–ü–ª–æ—â–∞–¥—å (–≥–∞)": format_area(op.area_processed_ha),
                "–í—Å–µ–≥–æ": f"{format_number(pest_app.total_product_used, 2)} –ª/–∫–≥",
                "–¶–µ–ª—å": pest_app.treatment_target,
                "–°–ø–æ—Å–æ–±": pest_app.application_method
            })

        df = pd.DataFrame(data)
        st.dataframe(df, use_container_width=True, hide_index=True)

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        st.markdown("---")
        st.markdown("### üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")

        col1, col2, col3, col4 = st.columns(4)

        total_product = sum(pest_app.total_product_used for _, pest_app, _ in applications)
        total_area = sum(op.area_processed_ha for op, _, _ in applications)
        avg_rate = total_product / total_area if total_area > 0 else 0

        with col1:
            st.metric("–í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–æ–∫", len(applications))
        with col2:
            st.metric("–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–ª–æ—â–∞–¥–∏", format_area(total_area))
        with col3:
            st.metric("–ò–∑—Ä–∞—Å—Ö–æ–¥–æ–≤–∞–Ω–æ –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤", f"{format_number(total_product, 1)} –ª/–∫–≥")
        with col4:
            st.metric("–°—Ä–µ–¥–Ω—è—è –Ω–æ—Ä–º–∞", f"{format_number(avg_rate, 2)} –ª/–≥–∞")

        # –ì—Ä–∞—Ñ–∏–∫–∏
        col1, col2 = st.columns(2)

        with col1:
            # –ì—Ä–∞—Ñ–∏–∫ –ø–æ –∫–ª–∞—Å—Å–∞–º
            class_data = {}
            for _, pest_app, _ in applications:
                pest_class = pest_app.pesticide_class
                class_data[pest_class] = class_data.get(pest_class, 0) + 1

            fig_class = px.pie(
                values=list(class_data.values()),
                names=list(class_data.keys()),
                title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–ª–∞—Å—Å–∞–º –°–ó–†"
            )
            st.plotly_chart(fig_class, use_container_width=True)

        with col2:
            # –ì—Ä–∞—Ñ–∏–∫ –ø–æ —Ü–µ–ª—è–º
            target_data = {}
            for _, pest_app, _ in applications:
                target = pest_app.treatment_target
                target_data[target] = target_data.get(target, 0) + 1

            fig_target = px.pie(
                values=list(target_data.values()),
                names=list(target_data.keys()),
                title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ü–µ–ª—è–º –æ–±—Ä–∞–±–æ—Ç–∫–∏"
            )
            st.plotly_chart(fig_target, use_container_width=True)

        # –ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å—Ö–æ–¥–∞ –ø–æ –ø–æ–ª—è–º
        field_data = {}
        for op, pest_app, field in applications:
            field_name = f"{field.field_code}"
            field_data[field_name] = field_data.get(field_name, 0) + pest_app.total_product_used

        if field_data:
            fig_fields = px.bar(
                x=list(field_data.keys()),
                y=list(field_data.values()),
                title="–†–∞—Å—Ö–æ–¥ –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤ –ø–æ –ø–æ–ª—è–º (–ª/–∫–≥)",
                labels={"x": "–ü–æ–ª—è", "y": "–†–∞—Å—Ö–æ–¥ (–ª/–∫–≥)"}
            )
            st.plotly_chart(fig_fields, use_container_width=True)

    else:
        st.info("üì≠ –ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ–± –æ–±—Ä–∞–±–æ—Ç–∫–∞—Ö –°–ó–†")

# ========================================
# TAB 3: –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –°–ó–†
# ========================================
with tab3:
    st.subheader("–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ —Å—Ä–µ–¥—Å—Ç–≤ –∑–∞—â–∏—Ç—ã —Ä–∞—Å—Ç–µ–Ω–∏–π")

    if pesticides_ref:
        # –í—ã–±–æ—Ä –∫–ª–∞—Å—Å–∞
        selected_cat = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤",
            options=pesticide_classes,
            key="reference_class"
        )

        if selected_cat in pesticides_ref:
            st.markdown(f"### {selected_cat}")

            # –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤
            ref_data = []
            for pest_name, pest_info in pesticides_ref[selected_cat].items():
                rate_info = pest_info.get("–Ω–æ—Ä–º–∞_—Ä–∞—Å—Ö–æ–¥–∞", {})
                rate_str = f"{rate_info.get('–º–∏–Ω', '-')}-{rate_info.get('–º–∞–∫—Å', '-')} {rate_info.get('–µ–¥–∏–Ω–∏—Ü–∞', '')}" if rate_info else "-"

                ref_data.append({
                    "–ù–∞–∑–≤–∞–Ω–∏–µ": pest_name,
                    "–î–µ–π—Å—Ç–≤—É—é—â–µ–µ –≤–µ—â–µ—Å—Ç–≤–æ": pest_info.get("–¥–µ–π—Å—Ç–≤—É—é—â–µ–µ_–≤–µ—â–µ—Å—Ç–≤–æ", "-"),
                    "–§–æ—Ä–º–∞": pest_info.get("—Ñ–æ—Ä–º–∞_–ø—Ä–µ–ø–∞—Ä–∞—Ç–∞", "-"),
                    "–ù–æ—Ä–º–∞ —Ä–∞—Å—Ö–æ–¥–∞": rate_str,
                    "–°—Ä–æ–∫ –æ–∂–∏–¥–∞–Ω–∏—è (–¥–Ω–µ–π)": pest_info.get("—Å—Ä–æ–∫_–æ–∂–∏–¥–∞–Ω–∏—è_–¥–Ω–µ–π", "-"),
                    "–ö–ª–∞—Å—Å –æ–ø–∞—Å–Ω–æ—Å—Ç–∏": pest_info.get("–∫–ª–∞—Å—Å_–æ–ø–∞—Å–Ω–æ—Å—Ç–∏", "-")
                })

            df_ref = pd.DataFrame(ref_data)
            st.dataframe(df_ref, use_container_width=True, hide_index=True)

            # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø—Ä–µ–ø–∞—Ä–∞—Ç–µ
            selected_pest = st.selectbox(
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–ø–∞—Ä–∞—Ç –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏",
                options=list(pesticides_ref[selected_cat].keys()),
                key="detail_pesticide"
            )

            if selected_pest:
                pest_detail = pesticides_ref[selected_cat][selected_pest]

                st.markdown(f"#### {selected_pest}")

                col1, col2 = st.columns(2)

                with col1:
                    st.markdown("**–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**")
                    st.write(f"- **–î–µ–π—Å—Ç–≤—É—é—â–µ–µ –≤–µ—â–µ—Å—Ç–≤–æ:** {pest_detail.get('–¥–µ–π—Å—Ç–≤—É—é—â–µ–µ_–≤–µ—â–µ—Å—Ç–≤–æ', '-')}")
                    st.write(f"- **–§–æ—Ä–º–∞ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞:** {pest_detail.get('—Ñ–æ—Ä–º–∞_–ø—Ä–µ–ø–∞—Ä–∞—Ç–∞', '-')}")
                    st.write(f"- **–ö–ª–∞—Å—Å –æ–ø–∞—Å–Ω–æ—Å—Ç–∏:** {pest_detail.get('–∫–ª–∞—Å—Å_–æ–ø–∞—Å–Ω–æ—Å—Ç–∏', '-')}")
                    st.write(f"- **–°—Ä–æ–∫ –æ–∂–∏–¥–∞–Ω–∏—è:** {pest_detail.get('—Å—Ä–æ–∫_–æ–∂–∏–¥–∞–Ω–∏—è_–¥–Ω–µ–π', '-')} –¥–Ω–µ–π")

                with col2:
                    st.markdown("**–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:**")
                    rate_info = pest_detail.get("–Ω–æ—Ä–º–∞_—Ä–∞—Å—Ö–æ–¥–∞", {})
                    if rate_info:
                        st.write(f"- **–ù–æ—Ä–º–∞ —Ä–∞—Å—Ö–æ–¥–∞:** {rate_info.get('–º–∏–Ω', '-')}-{rate_info.get('–º–∞–∫—Å', '-')} {rate_info.get('–µ–¥–∏–Ω–∏—Ü–∞', '')}")
                    st.write(f"- **–¶–µ–ª—å:** {pest_detail.get('—Ü–µ–ª—å_–ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è', '-')}")
                    st.write(f"- **–ö—É–ª—å—Ç—É—Ä–∞:** {pest_detail.get('–∫—É–ª—å—Ç—É—Ä–∞', '-')}")

    else:
        st.warning("–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –°–ó–† –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω")

# ========================================
# TAB 4: –ö–æ–Ω—Ç—Ä–æ–ª—å —Å—Ä–æ–∫–æ–≤
# ========================================
with tab4:
    st.subheader("–ö–æ–Ω—Ç—Ä–æ–ª—å —Å—Ä–æ–∫–æ–≤ –æ–∂–∏–¥–∞–Ω–∏—è")

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–æ–∫ —Å –Ω–µ–ø—Ä–æ—à–µ–¥—à–∏–º —Å—Ä–æ–∫–æ–º –æ–∂–∏–¥–∞–Ω–∏—è
    query = db.query(Operation, PesticideApplication, Field).join(
        PesticideApplication, Operation.id == PesticideApplication.operation_id
    ).join(
        Field, Operation.field_id == Field.id
    ).filter(
        Operation.operation_type == "spraying",
        PesticideApplication.waiting_period_days.isnot(None)
    )

    applications_with_waiting = query.order_by(Operation.operation_date.desc()).all()

    if applications_with_waiting:
        # –¢–∞–±–ª–∏—Ü–∞ —Å–æ —Å—Ä–æ–∫–∞–º–∏
        data = []
        today = date.today()

        for op, pest_app, field in applications_with_waiting:
            waiting_days = pest_app.waiting_period_days
            harvest_allowed_date = op.operation_date + timedelta(days=waiting_days)
            days_remaining = (harvest_allowed_date - today).days

            status = "‚úÖ –ú–æ–∂–Ω–æ —É–±–∏—Ä–∞—Ç—å" if days_remaining <= 0 else f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å {days_remaining} –¥–Ω–µ–π"
            status_color = "üü¢" if days_remaining <= 0 else ("üü°" if days_remaining <= 7 else "üî¥")

            data.append({
                "–°—Ç–∞—Ç—É—Å": status_color,
                "–ü–æ–ª–µ": f"{field.field_code} - {field.name}",
                "–î–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏": format_date(op.operation_date),
                "–ü—Ä–µ–ø–∞—Ä–∞—Ç": pest_app.pesticide_name,
                "–°—Ä–æ–∫ –æ–∂–∏–¥–∞–Ω–∏—è": f"{waiting_days} –¥–Ω–µ–π",
                "–ú–æ–∂–Ω–æ —É–±–∏—Ä–∞—Ç—å": format_date(harvest_allowed_date),
                "–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π": days_remaining if days_remaining > 0 else 0,
                "–°—Ç–∞—Ç—É—Å —Ç–µ–∫—Å—Ç": status
            })

        df = pd.DataFrame(data)
        st.dataframe(df, use_container_width=True, hide_index=True)

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        urgent = [d for d in data if 0 < d["–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π"] <= 7]
        if urgent:
            st.warning(f"‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –£ {len(urgent)} –ø–æ–ª–µ–π —Å—Ä–æ–∫ –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–∞–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 7 –¥–Ω–µ–π")

        ready = [d for d in data if d["–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π"] <= 0]
        if ready:
            st.success(f"‚úÖ –ì–æ—Ç–æ–≤–æ –∫ —É–±–æ—Ä–∫–µ: {len(ready)} –ø–æ–ª–µ–π")

    else:
        st.info("üì≠ –ù–µ—Ç –æ–±—Ä–∞–±–æ—Ç–æ–∫ —Å –∑–∞–¥–∞–Ω–Ω—ã–º —Å—Ä–æ–∫–æ–º –æ–∂–∏–¥–∞–Ω–∏—è")

# –§—É—Ç–µ—Ä
st.markdown("---")
st.markdown("üõ°Ô∏è **–£—á–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –°–ó–†** | –í–µ—Ä—Å–∏—è 1.0")
